
GPIO_32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002990  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00002990  00002a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800170  00800170  00002b34  2**0
                  ALLOC
  3 .stab         00002880  00000000  00000000  00002b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015c1  00000000  00000000  000053b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006975  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00006af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00006cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00008cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00009e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000ae48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000afe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000b2a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 13 	call	0x26e2	; 0x26e2 <main>
      8a:	0c 94 c6 14 	jmp	0x298c	; 0x298c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e0 59       	subi	r30, 0x90	; 144
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <UART_init>:
void (*RX_IntHandler)(void)=NULL;   /* RX pointer to function */
void (*TX_IntHandler)(void)=NULL;   /*TX  pointer to function */
uint8_t BaudRateRegisterValue;

uint8_t UART_init (str_UartConfg_t * uart_config)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <UART_init+0x6>
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	9a 83       	std	Y+2, r25	; 0x02
     ce4:	89 83       	std	Y+1, r24	; 0x01
	 /* Set BaudRate */
	  BaudRateRegisterValue= FOSC/(16 * (uart_config->u32_BaudRate-1));
     ce6:	e9 81       	ldd	r30, Y+1	; 0x01
     ce8:	fa 81       	ldd	r31, Y+2	; 0x02
     cea:	80 81       	ld	r24, Z
     cec:	91 81       	ldd	r25, Z+1	; 0x01
     cee:	a2 81       	ldd	r26, Z+2	; 0x02
     cf0:	b3 81       	ldd	r27, Z+3	; 0x03
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	aa 1f       	adc	r26, r26
     cf8:	bb 1f       	adc	r27, r27
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	aa 1f       	adc	r26, r26
     d00:	bb 1f       	adc	r27, r27
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	aa 1f       	adc	r26, r26
     d08:	bb 1f       	adc	r27, r27
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	aa 1f       	adc	r26, r26
     d10:	bb 1f       	adc	r27, r27
     d12:	9c 01       	movw	r18, r24
     d14:	ad 01       	movw	r20, r26
     d16:	20 51       	subi	r18, 0x10	; 16
     d18:	30 40       	sbci	r19, 0x00	; 0
     d1a:	40 40       	sbci	r20, 0x00	; 0
     d1c:	50 40       	sbci	r21, 0x00	; 0
     d1e:	80 e4       	ldi	r24, 0x40	; 64
     d20:	92 e4       	ldi	r25, 0x42	; 66
     d22:	af e0       	ldi	r26, 0x0F	; 15
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	bc 01       	movw	r22, r24
     d28:	cd 01       	movw	r24, r26
     d2a:	0e 94 0d 14 	call	0x281a	; 0x281a <__udivmodsi4>
     d2e:	da 01       	movw	r26, r20
     d30:	c9 01       	movw	r24, r18
     d32:	80 93 86 01 	sts	0x0186, r24
	  USART_BAUD_RATE_REGISTERs_HIGH = (BaudRateRegisterValue) >>8;
     d36:	e0 e4       	ldi	r30, 0x40	; 64
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 91 86 01 	lds	r24, 0x0186
     d3e:	88 2f       	mov	r24, r24
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	89 2f       	mov	r24, r25
     d44:	99 0f       	add	r25, r25
     d46:	99 0b       	sbc	r25, r25
     d48:	80 83       	st	Z, r24
	  USART_BAUD_RATE_REGISTER_LOW = BaudRateRegisterValue;
     d4a:	e9 e2       	ldi	r30, 0x29	; 41
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 91 86 01 	lds	r24, 0x0186
     d52:	80 83       	st	Z, r24

	  SET_BIT(USART_CONTORL_STATUS_REGISTER_B , 4);     /* RX enable*/
     d54:	aa e2       	ldi	r26, 0x2A	; 42
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	ea e2       	ldi	r30, 0x2A	; 42
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 61       	ori	r24, 0x10	; 16
     d60:	8c 93       	st	X, r24
	  SET_BIT(USART_CONTORL_STATUS_REGISTER_B , 3);     /* TX enable*/
     d62:	aa e2       	ldi	r26, 0x2A	; 42
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	ea e2       	ldi	r30, 0x2A	; 42
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	88 60       	ori	r24, 0x08	; 8
     d6e:	8c 93       	st	X, r24

	  /* 5 Bit Mode*/
	if(uart_config -> u8_DataBits ==UART_5_BIT_MODE)
     d70:	e9 81       	ldd	r30, Y+1	; 0x01
     d72:	fa 81       	ldd	r31, Y+2	; 0x02
     d74:	84 81       	ldd	r24, Z+4	; 0x04
     d76:	88 23       	and	r24, r24
     d78:	41 f4       	brne	.+16     	; 0xd8a <UART_init+0xb4>
	{
	  USART_CONTORL_STATUS_REGISTER_C|=(1<<URSEL)|(1<<USBS);
     d7a:	a0 e4       	ldi	r26, 0x40	; 64
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e0 e4       	ldi	r30, 0x40	; 64
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	88 68       	ori	r24, 0x88	; 136
     d86:	8c 93       	st	X, r24
     d88:	35 c0       	rjmp	.+106    	; 0xdf4 <UART_init+0x11e>
	}

	/* 6 Bit Mode*/
	else if(uart_config-> u8_DataBits == UART_6_BIT_MODE)
     d8a:	e9 81       	ldd	r30, Y+1	; 0x01
     d8c:	fa 81       	ldd	r31, Y+2	; 0x02
     d8e:	84 81       	ldd	r24, Z+4	; 0x04
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	41 f4       	brne	.+16     	; 0xda4 <UART_init+0xce>
	{
		USART_CONTORL_STATUS_REGISTER_C|=(1<<URSEL)|(1<<USBS)|(1<<UCSZ0);
     d94:	a0 e4       	ldi	r26, 0x40	; 64
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e0 e4       	ldi	r30, 0x40	; 64
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	8a 68       	ori	r24, 0x8A	; 138
     da0:	8c 93       	st	X, r24
     da2:	28 c0       	rjmp	.+80     	; 0xdf4 <UART_init+0x11e>
	}

	/* 7 Bit Mode*/
	else if(uart_config -> u8_DataBits == UART_7_BIT_MODE)
     da4:	e9 81       	ldd	r30, Y+1	; 0x01
     da6:	fa 81       	ldd	r31, Y+2	; 0x02
     da8:	84 81       	ldd	r24, Z+4	; 0x04
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	41 f4       	brne	.+16     	; 0xdbe <UART_init+0xe8>
	{
		USART_CONTORL_STATUS_REGISTER_C|=(1<<URSEL)|(1<<USBS)|(1<<UCSZ1);
     dae:	a0 e4       	ldi	r26, 0x40	; 64
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e0 e4       	ldi	r30, 0x40	; 64
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8c 68       	ori	r24, 0x8C	; 140
     dba:	8c 93       	st	X, r24
     dbc:	1b c0       	rjmp	.+54     	; 0xdf4 <UART_init+0x11e>
	}

	/* 8 Bit Mode*/
	else if(uart_config -> u8_DataBits == UART_8_BIT_MODE)
     dbe:	e9 81       	ldd	r30, Y+1	; 0x01
     dc0:	fa 81       	ldd	r31, Y+2	; 0x02
     dc2:	84 81       	ldd	r24, Z+4	; 0x04
     dc4:	83 30       	cpi	r24, 0x03	; 3
     dc6:	41 f4       	brne	.+16     	; 0xdd8 <UART_init+0x102>
	{
		USART_CONTORL_STATUS_REGISTER_C|=(1<<URSEL)|(1<<USBS)|(1<<UCSZ0)|(1<<UCSZ1);
     dc8:	a0 e4       	ldi	r26, 0x40	; 64
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e0 e4       	ldi	r30, 0x40	; 64
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8e 68       	ori	r24, 0x8E	; 142
     dd4:	8c 93       	st	X, r24
     dd6:	0e c0       	rjmp	.+28     	; 0xdf4 <UART_init+0x11e>
	}

	/* 9 Bit Mode*/
	else
	{
        USART_CONTORL_STATUS_REGISTER_C |=(1<<URSEL)|(1<<USBS)|(1<<UCSZ0)|(1<<UCSZ1);
     dd8:	a0 e4       	ldi	r26, 0x40	; 64
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e0 e4       	ldi	r30, 0x40	; 64
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	8e 68       	ori	r24, 0x8E	; 142
     de4:	8c 93       	st	X, r24
        USART_CONTORL_STATUS_REGISTER_B |= (1<<UCSZ2);
     de6:	aa e2       	ldi	r26, 0x2A	; 42
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	ea e2       	ldi	r30, 0x2A	; 42
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	84 60       	ori	r24, 0x04	; 4
     df2:	8c 93       	st	X, r24
	}

	/* Interrupt Mode */
	if(uart_config->u8_FlagAction == UART_INTERRUPT)
     df4:	e9 81       	ldd	r30, Y+1	; 0x01
     df6:	fa 81       	ldd	r31, Y+2	; 0x02
     df8:	85 81       	ldd	r24, Z+5	; 0x05
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	49 f4       	brne	.+18     	; 0xe10 <UART_init+0x13a>
	{
		/*RX INT Enable & TX INT Enable */
		USART_CONTORL_STATUS_REGISTER_B |= (1<<RXCIE) |(1<<TXCIE);
     dfe:	aa e2       	ldi	r26, 0x2A	; 42
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	ea e2       	ldi	r30, 0x2A	; 42
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	80 6c       	ori	r24, 0xC0	; 192
     e0a:	8c 93       	st	X, r24
		return NO_ERROR;
     e0c:	1b 82       	std	Y+3, r1	; 0x03
     e0e:	09 c0       	rjmp	.+18     	; 0xe22 <UART_init+0x14c>

	}
	/* Polling Mode*/
	else if(uart_config ->u8_FlagAction == UART_POLLING)
     e10:	e9 81       	ldd	r30, Y+1	; 0x01
     e12:	fa 81       	ldd	r31, Y+2	; 0x02
     e14:	85 81       	ldd	r24, Z+5	; 0x05
     e16:	88 23       	and	r24, r24
     e18:	11 f4       	brne	.+4      	; 0xe1e <UART_init+0x148>
	{
		return NO_ERROR;
     e1a:	1b 82       	std	Y+3, r1	; 0x03
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <UART_init+0x14c>
	}
	else
	{
		return ERROR;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	8b 83       	std	Y+3, r24	; 0x03
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
	}



 }
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <UART_recieveByte>:
* Input     : pointer to u8Data int
* Output    : Error Status
*/
//_________________________________________________________________________________________________________________________________
uint8_t UART_recieveByte(uint8_t *u8_Data)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_recieveByte+0x6>
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	89 83       	std	Y+1, r24	; 0x01
	if(u8_Data != NULL)
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	9a 81       	ldd	r25, Y+2	; 0x02
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	69 f0       	breq	.+26     	; 0xe62 <UART_recieveByte+0x32>
	{
		/* This is to check that all of the data is received*/
		while(BIT_IS_CLEAR(USART_CONTORL_STATUS_REGISTER_A,RXC));
     e48:	eb e2       	ldi	r30, 0x2B	; 43
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	88 23       	and	r24, r24
     e50:	dc f7       	brge	.-10     	; 0xe48 <UART_recieveByte+0x18>

		/*Get the Received Data */
		*u8_Data = USART_DATA_REGISTER_READ;
     e52:	ec e2       	ldi	r30, 0x2C	; 44
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	e9 81       	ldd	r30, Y+1	; 0x01
     e5a:	fa 81       	ldd	r31, Y+2	; 0x02
     e5c:	80 83       	st	Z, r24

		return NO_ERROR;
     e5e:	1b 82       	std	Y+3, r1	; 0x03
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <UART_recieveByte+0x36>
	}
	else
	{
		return ERROR;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	8b 83       	std	Y+3, r24	; 0x03
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <UART_GetPollingFlag>:
*Description: Receiving Flag used in Case of Polling
* Input     : pointer to u8Data
* Output    : No Return
* */
uint8_t UART_GetPollingFlag(uint8_t *u8_Data)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <UART_GetPollingFlag+0x6>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <UART_GetPollingFlag+0x8>
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	9b 83       	std	Y+3, r25	; 0x03
     e82:	8a 83       	std	Y+2, r24	; 0x02
    if(u8_Data == NULL)
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	9b 81       	ldd	r25, Y+3	; 0x03
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	19 f4       	brne	.+6      	; 0xe92 <UART_GetPollingFlag+0x1e>
    {
       return ERROR;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	8c 83       	std	Y+4, r24	; 0x04
     e90:	11 c0       	rjmp	.+34     	; 0xeb4 <UART_GetPollingFlag+0x40>
    }
    else
    {
     uint8_t holder;
        /* holder gets the value 128 if RXC bit is set or 0 if RXC bit is cleared*/
     holder = USART_CONTORL_STATUS_REGISTER_A & (1 << RXC);
     e92:	eb e2       	ldi	r30, 0x2B	; 43
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	80 78       	andi	r24, 0x80	; 128
     e9a:	89 83       	std	Y+1, r24	; 0x01
     if(holder == 128)   /* there are an Unread Data in the  Receive Buffer */
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	80 38       	cpi	r24, 0x80	; 128
     ea0:	19 f4       	brne	.+6      	; 0xea8 <UART_GetPollingFlag+0x34>
     {
        holder = 1;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <UART_GetPollingFlag+0x36>
     }
     else  /* The Receive Buffer is Empty */
     {
        holder = 0;
     ea8:	19 82       	std	Y+1, r1	; 0x01
     }
     *u8_Data = holder;  /* Read Data Received */
     eaa:	ea 81       	ldd	r30, Y+2	; 0x02
     eac:	fb 81       	ldd	r31, Y+3	; 0x03
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	80 83       	st	Z, r24

       return NO_ERROR;
     eb2:	1c 82       	std	Y+4, r1	; 0x04
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    }
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <UART_sendByte>:
*Description: Sending byte of data
* Input     : u16Data to send
* Output    : Error Status
* */
uint8_t UART_sendByte( uint8_t u8_Data)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	0f 92       	push	r0
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	89 83       	std	Y+1, r24	; 0x01
 //wait for the transmission buffer to be empty
 while(BIT_IS_CLEAR(USART_CONTORL_STATUS_REGISTER_A,UDRE));
     ed0:	eb e2       	ldi	r30, 0x2B	; 43
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	88 2f       	mov	r24, r24
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	80 72       	andi	r24, 0x20	; 32
     edc:	90 70       	andi	r25, 0x00	; 0
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	b9 f3       	breq	.-18     	; 0xed0 <UART_sendByte+0xc>
 USART_DATA_REGISTER_READ = u8_Data; //put data in buffer, send data
     ee2:	ec e2       	ldi	r30, 0x2C	; 44
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	80 83       	st	Z, r24
 return NO_ERROR;
     eea:	80 e0       	ldi	r24, 0x00	; 0

}
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <UART_TX_SetCallBack>:
*Description: Call Back for function to send to ISR
* Input     : pointer to function
* Output    : ERROR Status
* */
 uint8_t UART_TX_SetCallBack(void (*Copy_FunctionAddress)(void))
 {
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <UART_TX_SetCallBack+0x6>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
	 TX_IntHandler= Copy_FunctionAddress;
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	90 93 73 01 	sts	0x0173, r25
     f0a:	80 93 72 01 	sts	0x0172, r24
      return NO_ERROR;
     f0e:	80 e0       	ldi	r24, 0x00	; 0
 }
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <UART_RX_SetCallBack>:
*Description: Call Back for function to Receive Data
* Input     : pointer to function
* Output    : ERROR Status
* */
 uint8_t UART_RX_SetCallBack(void (*Copy_FunctionAddress)(void))
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <UART_RX_SetCallBack+0x6>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
	 RX_IntHandler = Copy_FunctionAddress;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	90 93 71 01 	sts	0x0171, r25
     f30:	80 93 70 01 	sts	0x0170, r24
       return NO_ERROR;
     f34:	80 e0       	ldi	r24, 0x00	; 0
}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <__vector_15>:
 /* TX Complete ISR */
ISR(USART_TXC_vect)
{
     f40:	1f 92       	push	r1
     f42:	0f 92       	push	r0
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	0f 92       	push	r0
     f48:	11 24       	eor	r1, r1
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
  TX_IntHandler();
     f6a:	e0 91 72 01 	lds	r30, 0x0172
     f6e:	f0 91 73 01 	lds	r31, 0x0173
     f72:	09 95       	icall
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	ff 91       	pop	r31
     f7a:	ef 91       	pop	r30
     f7c:	bf 91       	pop	r27
     f7e:	af 91       	pop	r26
     f80:	9f 91       	pop	r25
     f82:	8f 91       	pop	r24
     f84:	7f 91       	pop	r23
     f86:	6f 91       	pop	r22
     f88:	5f 91       	pop	r21
     f8a:	4f 91       	pop	r20
     f8c:	3f 91       	pop	r19
     f8e:	2f 91       	pop	r18
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0
     f96:	1f 90       	pop	r1
     f98:	18 95       	reti

00000f9a <__vector_13>:

/* RX Complete ISR */
ISR(USART_RXC_vect)
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62

 RX_IntHandler();
     fc4:	e0 91 70 01 	lds	r30, 0x0170
     fc8:	f0 91 71 01 	lds	r31, 0x0171
     fcc:	09 95       	icall

}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	ff 91       	pop	r31
     fd4:	ef 91       	pop	r30
     fd6:	bf 91       	pop	r27
     fd8:	af 91       	pop	r26
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	7f 91       	pop	r23
     fe0:	6f 91       	pop	r22
     fe2:	5f 91       	pop	r21
     fe4:	4f 91       	pop	r20
     fe6:	3f 91       	pop	r19
     fe8:	2f 91       	pop	r18
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <Timer_Init>:
/*Description: Timer/Counter Initialization
 * Input     : Timer_Configuration_S* Confg_S (Struct contain : Timer Channel, Prescaler , Mode as described in Struct)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Init(Str_TimerConfiguration_t* Confg_S)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <Timer_Init+0x6>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01
/************************************** Initialization for Timer0 ******************************************************/
	if (Confg_S->Timer_Channel == TIMER0)
    1004:	e9 81       	ldd	r30, Y+1	; 0x01
    1006:	fa 81       	ldd	r31, Y+2	; 0x02
    1008:	80 81       	ld	r24, Z
    100a:	88 23       	and	r24, r24
    100c:	09 f0       	breq	.+2      	; 0x1010 <Timer_Init+0x1c>
    100e:	6f c0       	rjmp	.+222    	; 0x10ee <Timer_Init+0xfa>
	{  /*Configuration for TIMER0 */
		Timers[TIMER0].Timer_Channel = TIMER0;
    1010:	10 92 74 01 	sts	0x0174, r1
		if (Confg_S->Interrupt_Mode == POLLING)
    1014:	e9 81       	ldd	r30, Y+1	; 0x01
    1016:	fa 81       	ldd	r31, Y+2	; 0x02
    1018:	83 81       	ldd	r24, Z+3	; 0x03
    101a:	88 23       	and	r24, r24
    101c:	49 f5       	brne	.+82     	; 0x1070 <Timer_Init+0x7c>
		{  /*Initialization for polling*/
			Timers[TIMER0].Interrupt_Mode = POLLING;
    101e:	10 92 77 01 	sts	0x0177, r1
			if (Confg_S->Timer_Mode == TIMER_MODE)
    1022:	e9 81       	ldd	r30, Y+1	; 0x01
    1024:	fa 81       	ldd	r31, Y+2	; 0x02
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	88 23       	and	r24, r24
    102a:	b1 f4       	brne	.+44     	; 0x1058 <Timer_Init+0x64>
			{
				Timers[TIMER0].Timer_Mode = TIMER_MODE;
    102c:	10 92 76 01 	sts	0x0176, r1
				Timers[TIMER0].Timer_Psc = Confg_S->Timer_Psc;
    1030:	e9 81       	ldd	r30, Y+1	; 0x01
    1032:	fa 81       	ldd	r31, Y+2	; 0x02
    1034:	81 81       	ldd	r24, Z+1	; 0x01
    1036:	80 93 75 01 	sts	0x0175, r24
				/* CTC Mode */
				SET_BIT(TIMER0_CONTROL_REGISTER, TIMER0_CONTROL_WAVEGENERATION_01);
    103a:	a3 e5       	ldi	r26, 0x53	; 83
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e3 e5       	ldi	r30, 0x53	; 83
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 60       	ori	r24, 0x08	; 8
    1046:	8c 93       	st	X, r24
				CLEAR_BIT(TIMER0_CONTROL_REGISTER, TIMER0_CONTROL_WAVEGENERATION_00);
    1048:	a3 e5       	ldi	r26, 0x53	; 83
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e3 e5       	ldi	r30, 0x53	; 83
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	8f 7b       	andi	r24, 0xBF	; 191
    1054:	8c 93       	st	X, r24
    1056:	56 c1       	rjmp	.+684    	; 0x1304 <Timer_Init+0x310>



			}
			else if (Confg_S->Timer_Mode == COUNTER_MODE)
    1058:	e9 81       	ldd	r30, Y+1	; 0x01
    105a:	fa 81       	ldd	r31, Y+2	; 0x02
    105c:	82 81       	ldd	r24, Z+2	; 0x02
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	29 f4       	brne	.+10     	; 0x106c <Timer_Init+0x78>
			{
				Timers[TIMER0].Timer_Mode = COUNTER_MODE;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	80 93 76 01 	sts	0x0176, r24
				/* Write your counter initialization here*/
			   /* As we don't support counter mode*/
				return ERROR_OK;
    1068:	1b 82       	std	Y+3, r1	; 0x03
    106a:	4e c1       	rjmp	.+668    	; 0x1308 <Timer_Init+0x314>
			}

			else
			{

				return ERROR_OK;
    106c:	1b 82       	std	Y+3, r1	; 0x03
    106e:	4c c1       	rjmp	.+664    	; 0x1308 <Timer_Init+0x314>
			}
		}
		/* Interrupt Mode */
		else if (Confg_S->Interrupt_Mode == INTERRUPT)
    1070:	e9 81       	ldd	r30, Y+1	; 0x01
    1072:	fa 81       	ldd	r31, Y+2	; 0x02
    1074:	83 81       	ldd	r24, Z+3	; 0x03
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	c1 f5       	brne	.+112    	; 0x10ea <Timer_Init+0xf6>
		{
			Timers[TIMER0].Interrupt_Mode = INTERRUPT;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	80 93 77 01 	sts	0x0177, r24
			/*Initialization for Interrupt */
			if (Confg_S->Timer_Mode == TIMER_MODE)
    1080:	e9 81       	ldd	r30, Y+1	; 0x01
    1082:	fa 81       	ldd	r31, Y+2	; 0x02
    1084:	82 81       	ldd	r24, Z+2	; 0x02
    1086:	88 23       	and	r24, r24
    1088:	21 f5       	brne	.+72     	; 0x10d2 <Timer_Init+0xde>
			{
				Timers[TIMER0].Timer_Mode = TIMER_MODE;
    108a:	10 92 76 01 	sts	0x0176, r1
				/* Write your timer initialization here*/
				Timers[TIMER0].Timer_Psc = Confg_S->Timer_Psc;
    108e:	e9 81       	ldd	r30, Y+1	; 0x01
    1090:	fa 81       	ldd	r31, Y+2	; 0x02
    1092:	81 81       	ldd	r24, Z+1	; 0x01
    1094:	80 93 75 01 	sts	0x0175, r24

				/*CTC mode*/
				SET_BIT(TIMER0_CONTROL_REGISTER, TIMER0_CONTROL_WAVEGENERATION_01);
    1098:	a3 e5       	ldi	r26, 0x53	; 83
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e3 e5       	ldi	r30, 0x53	; 83
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	88 60       	ori	r24, 0x08	; 8
    10a4:	8c 93       	st	X, r24
				CLEAR_BIT(TIMER0_CONTROL_REGISTER, TIMER0_CONTROL_WAVEGENERATION_00);
    10a6:	a3 e5       	ldi	r26, 0x53	; 83
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e3 e5       	ldi	r30, 0x53	; 83
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 7b       	andi	r24, 0xBF	; 191
    10b2:	8c 93       	st	X, r24

				/*Enable Timer0 Compare Match Interrupt */
				SET_BIT(TIMER_INTERRUPT_MASK_REGISTER, TIMER0_INTERRUPT_COMPARE_MATCH_ENABLE_BIT);
    10b4:	a9 e5       	ldi	r26, 0x59	; 89
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e9 e5       	ldi	r30, 0x59	; 89
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	82 60       	ori	r24, 0x02	; 2
    10c0:	8c 93       	st	X, r24

				/*Enable Global Interrupt */
				SET_BIT(STATUS_REGISTER, GLOBAL_INTERRUPT_BIT);
    10c2:	af e5       	ldi	r26, 0x5F	; 95
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ef e5       	ldi	r30, 0x5F	; 95
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	8c 93       	st	X, r24
    10d0:	19 c1       	rjmp	.+562    	; 0x1304 <Timer_Init+0x310>
			}
			else if (Confg_S->Timer_Mode == COUNTER_MODE)
    10d2:	e9 81       	ldd	r30, Y+1	; 0x01
    10d4:	fa 81       	ldd	r31, Y+2	; 0x02
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	29 f4       	brne	.+10     	; 0x10e6 <Timer_Init+0xf2>
			{
				Timers[TIMER0].Timer_Mode = COUNTER_MODE;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	80 93 76 01 	sts	0x0176, r24
				/* Write your counter initialization here*/
			   /* As we don't support counter mode*/
				return ERROR_OK;
    10e2:	1b 82       	std	Y+3, r1	; 0x03
    10e4:	11 c1       	rjmp	.+546    	; 0x1308 <Timer_Init+0x314>
			}
			else
			{
				return ERROR_OK;
    10e6:	1b 82       	std	Y+3, r1	; 0x03
    10e8:	0f c1       	rjmp	.+542    	; 0x1308 <Timer_Init+0x314>
			}
		}
		else {
			return ERROR_OK;
    10ea:	1b 82       	std	Y+3, r1	; 0x03
    10ec:	0d c1       	rjmp	.+538    	; 0x1308 <Timer_Init+0x314>
		}
	}

/******************************	 Initialization for Timer1  ******************************************************/

	else if (Confg_S->Timer_Channel == TIMER1)
    10ee:	e9 81       	ldd	r30, Y+1	; 0x01
    10f0:	fa 81       	ldd	r31, Y+2	; 0x02
    10f2:	80 81       	ld	r24, Z
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	09 f0       	breq	.+2      	; 0x10fa <Timer_Init+0x106>
    10f8:	8d c0       	rjmp	.+282    	; 0x1214 <Timer_Init+0x220>
	{
		/*Configuration for TIMER1 */
		Timers[TIMER1].Timer_Channel = TIMER1;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	80 93 78 01 	sts	0x0178, r24
		if (Confg_S->Interrupt_Mode == POLLING)
    1100:	e9 81       	ldd	r30, Y+1	; 0x01
    1102:	fa 81       	ldd	r31, Y+2	; 0x02
    1104:	83 81       	ldd	r24, Z+3	; 0x03
    1106:	88 23       	and	r24, r24
    1108:	b9 f5       	brne	.+110    	; 0x1178 <Timer_Init+0x184>
		{
			Timers[TIMER1].Interrupt_Mode = POLLING;
    110a:	10 92 7b 01 	sts	0x017B, r1
			/*Initialization for polling */
			if (Confg_S->Timer_Mode == TIMER_MODE)
    110e:	e9 81       	ldd	r30, Y+1	; 0x01
    1110:	fa 81       	ldd	r31, Y+2	; 0x02
    1112:	82 81       	ldd	r24, Z+2	; 0x02
    1114:	88 23       	and	r24, r24
    1116:	21 f5       	brne	.+72     	; 0x1160 <Timer_Init+0x16c>
			{
				Timers[TIMER1].Timer_Mode = TIMER_MODE;
    1118:	10 92 7a 01 	sts	0x017A, r1
				Timers[TIMER1].Timer_Psc = Confg_S->Timer_Psc;
    111c:	e9 81       	ldd	r30, Y+1	; 0x01
    111e:	fa 81       	ldd	r31, Y+2	; 0x02
    1120:	81 81       	ldd	r24, Z+1	; 0x01
    1122:	80 93 79 01 	sts	0x0179, r24

				/*CTC Mode*/
				CLEAR_BIT(TIMER1_CONTROL_REGISTER_A, TIMER0_CONTROL_WAVEGENERATION_10);
    1126:	af e4       	ldi	r26, 0x4F	; 79
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	ef e4       	ldi	r30, 0x4F	; 79
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	8e 7f       	andi	r24, 0xFE	; 254
    1132:	8c 93       	st	X, r24
				CLEAR_BIT(TIMER1_CONTROL_REGISTER_A, TIMER0_CONTROL_WAVEGENERATION_11);
    1134:	af e4       	ldi	r26, 0x4F	; 79
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	ef e4       	ldi	r30, 0x4F	; 79
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8d 7f       	andi	r24, 0xFD	; 253
    1140:	8c 93       	st	X, r24
				SET_BIT  (TIMER1_CONTROL_REGISTER_B, TIMER0_CONTROL_WAVEGENERATION_12);
    1142:	ae e4       	ldi	r26, 0x4E	; 78
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	ee e4       	ldi	r30, 0x4E	; 78
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	88 60       	ori	r24, 0x08	; 8
    114e:	8c 93       	st	X, r24
				CLEAR_BIT(TIMER1_CONTROL_REGISTER_B, TIMER0_CONTROL_WAVEGENERATION_13);
    1150:	ae e4       	ldi	r26, 0x4E	; 78
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ee e4       	ldi	r30, 0x4E	; 78
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8f 7e       	andi	r24, 0xEF	; 239
    115c:	8c 93       	st	X, r24
    115e:	d2 c0       	rjmp	.+420    	; 0x1304 <Timer_Init+0x310>
			}

			else if (Confg_S->Timer_Mode == COUNTER_MODE)
    1160:	e9 81       	ldd	r30, Y+1	; 0x01
    1162:	fa 81       	ldd	r31, Y+2	; 0x02
    1164:	82 81       	ldd	r24, Z+2	; 0x02
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	29 f4       	brne	.+10     	; 0x1174 <Timer_Init+0x180>
			{
				Timers[TIMER1].Timer_Mode = COUNTER_MODE;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 7a 01 	sts	0x017A, r24
				return ERROR_OK;
    1170:	1b 82       	std	Y+3, r1	; 0x03
    1172:	ca c0       	rjmp	.+404    	; 0x1308 <Timer_Init+0x314>
			}
			else
			{
				return ERROR_OK;
    1174:	1b 82       	std	Y+3, r1	; 0x03
    1176:	c8 c0       	rjmp	.+400    	; 0x1308 <Timer_Init+0x314>
			}
		}
		else if (Confg_S->Interrupt_Mode == INTERRUPT) {
    1178:	e9 81       	ldd	r30, Y+1	; 0x01
    117a:	fa 81       	ldd	r31, Y+2	; 0x02
    117c:	83 81       	ldd	r24, Z+3	; 0x03
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	09 f0       	breq	.+2      	; 0x1184 <Timer_Init+0x190>
    1182:	46 c0       	rjmp	.+140    	; 0x1210 <Timer_Init+0x21c>
			/*Initialization for Interrupt */
			Timers[TIMER1].Interrupt_Mode = INTERRUPT;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	80 93 7b 01 	sts	0x017B, r24
			if (Confg_S->Timer_Mode == TIMER_MODE)
    118a:	e9 81       	ldd	r30, Y+1	; 0x01
    118c:	fa 81       	ldd	r31, Y+2	; 0x02
    118e:	82 81       	ldd	r24, Z+2	; 0x02
    1190:	88 23       	and	r24, r24
    1192:	91 f5       	brne	.+100    	; 0x11f8 <Timer_Init+0x204>
			{
				Timers[TIMER1].Timer_Mode = TIMER_MODE;
    1194:	10 92 7a 01 	sts	0x017A, r1

				/*CTC Mode*/
				CLEAR_BIT(TIMER1_CONTROL_REGISTER_A, TIMER0_CONTROL_WAVEGENERATION_10);
    1198:	af e4       	ldi	r26, 0x4F	; 79
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	ef e4       	ldi	r30, 0x4F	; 79
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8e 7f       	andi	r24, 0xFE	; 254
    11a4:	8c 93       	st	X, r24
				CLEAR_BIT(TIMER1_CONTROL_REGISTER_A, TIMER0_CONTROL_WAVEGENERATION_11);
    11a6:	af e4       	ldi	r26, 0x4F	; 79
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ef e4       	ldi	r30, 0x4F	; 79
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8d 7f       	andi	r24, 0xFD	; 253
    11b2:	8c 93       	st	X, r24
				SET_BIT  (TIMER1_CONTROL_REGISTER_B, TIMER0_CONTROL_WAVEGENERATION_12);
    11b4:	ae e4       	ldi	r26, 0x4E	; 78
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	ee e4       	ldi	r30, 0x4E	; 78
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	88 60       	ori	r24, 0x08	; 8
    11c0:	8c 93       	st	X, r24
				SET_BIT  (TIMER1_CONTROL_REGISTER_B, TIMER0_CONTROL_WAVEGENERATION_13);
    11c2:	ae e4       	ldi	r26, 0x4E	; 78
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	ee e4       	ldi	r30, 0x4E	; 78
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 61       	ori	r24, 0x10	; 16
    11ce:	8c 93       	st	X, r24

				/*Enable Global Interrupt*/
				SET_BIT(STATUS_REGISTER, GLOBAL_INTERRUPT_BIT);
    11d0:	af e5       	ldi	r26, 0x5F	; 95
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ef e5       	ldi	r30, 0x5F	; 95
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	80 68       	ori	r24, 0x80	; 128
    11dc:	8c 93       	st	X, r24

				/*Enable Timer1 Compare Match Interrupt*/
				SET_BIT(TIMER_INTERRUPT_MASK_REGISTER, TIMER1_INTERRUPT_COMPARE_MATCH_ENABLE_BIT);
    11de:	a9 e5       	ldi	r26, 0x59	; 89
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e9 e5       	ldi	r30, 0x59	; 89
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	80 62       	ori	r24, 0x20	; 32
    11ea:	8c 93       	st	X, r24
				Timers[TIMER1].Timer_Psc = Confg_S->Timer_Psc;
    11ec:	e9 81       	ldd	r30, Y+1	; 0x01
    11ee:	fa 81       	ldd	r31, Y+2	; 0x02
    11f0:	81 81       	ldd	r24, Z+1	; 0x01
    11f2:	80 93 79 01 	sts	0x0179, r24
    11f6:	86 c0       	rjmp	.+268    	; 0x1304 <Timer_Init+0x310>
			}
			else if (Confg_S->Timer_Mode == COUNTER_MODE)
    11f8:	e9 81       	ldd	r30, Y+1	; 0x01
    11fa:	fa 81       	ldd	r31, Y+2	; 0x02
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	29 f4       	brne	.+10     	; 0x120c <Timer_Init+0x218>
			{
				Timers[TIMER1].Timer_Mode = COUNTER_MODE;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	80 93 7a 01 	sts	0x017A, r24
				return ERROR_OK;
    1208:	1b 82       	std	Y+3, r1	; 0x03
    120a:	7e c0       	rjmp	.+252    	; 0x1308 <Timer_Init+0x314>
			}
			else
			{
				return ERROR_OK;
    120c:	1b 82       	std	Y+3, r1	; 0x03
    120e:	7c c0       	rjmp	.+248    	; 0x1308 <Timer_Init+0x314>
			}
		}
		else
		{
			return ERROR_OK;
    1210:	1b 82       	std	Y+3, r1	; 0x03
    1212:	7a c0       	rjmp	.+244    	; 0x1308 <Timer_Init+0x314>

	}

/************************************  Initialization for Timer2  **********************************************/

	else if (Confg_S->Timer_Channel == TIMER2)
    1214:	e9 81       	ldd	r30, Y+1	; 0x01
    1216:	fa 81       	ldd	r31, Y+2	; 0x02
    1218:	80 81       	ld	r24, Z
    121a:	82 30       	cpi	r24, 0x02	; 2
    121c:	09 f0       	breq	.+2      	; 0x1220 <Timer_Init+0x22c>
    121e:	70 c0       	rjmp	.+224    	; 0x1300 <Timer_Init+0x30c>
	{
		/*Configuration for TIMER2*/
		Timers[TIMER2].Timer_Channel = TIMER2;
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	80 93 7c 01 	sts	0x017C, r24
		if (Confg_S->Interrupt_Mode == POLLING)
    1226:	e9 81       	ldd	r30, Y+1	; 0x01
    1228:	fa 81       	ldd	r31, Y+2	; 0x02
    122a:	83 81       	ldd	r24, Z+3	; 0x03
    122c:	88 23       	and	r24, r24
    122e:	49 f5       	brne	.+82     	; 0x1282 <Timer_Init+0x28e>
		{
			Timers[TIMER2].Interrupt_Mode = POLLING;
    1230:	10 92 7f 01 	sts	0x017F, r1
			/*Initialization for Polling */
			if (Confg_S->Timer_Mode == TIMER_MODE)
    1234:	e9 81       	ldd	r30, Y+1	; 0x01
    1236:	fa 81       	ldd	r31, Y+2	; 0x02
    1238:	82 81       	ldd	r24, Z+2	; 0x02
    123a:	88 23       	and	r24, r24
    123c:	b1 f4       	brne	.+44     	; 0x126a <Timer_Init+0x276>
			{
				Timers[TIMER2].Timer_Mode = TIMER_MODE;
    123e:	10 92 7e 01 	sts	0x017E, r1
				Timers[TIMER2].Timer_Psc = Confg_S->Timer_Psc;
    1242:	e9 81       	ldd	r30, Y+1	; 0x01
    1244:	fa 81       	ldd	r31, Y+2	; 0x02
    1246:	81 81       	ldd	r24, Z+1	; 0x01
    1248:	80 93 7d 01 	sts	0x017D, r24

				/*CTC Mode */
				SET_BIT  (TCCR2, TIMER0_CONTROL_WAVEGENERATION_21);
    124c:	a5 e4       	ldi	r26, 0x45	; 69
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e4       	ldi	r30, 0x45	; 69
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	88 60       	ori	r24, 0x08	; 8
    1258:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2	,TIMER0_CONTROL_WAVEGENERATION_20);
    125a:	a5 e4       	ldi	r26, 0x45	; 69
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e5 e4       	ldi	r30, 0x45	; 69
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8f 7b       	andi	r24, 0xBF	; 191
    1266:	8c 93       	st	X, r24
    1268:	4d c0       	rjmp	.+154    	; 0x1304 <Timer_Init+0x310>
			}
			else if (Confg_S->Timer_Mode == COUNTER_MODE)
    126a:	e9 81       	ldd	r30, Y+1	; 0x01
    126c:	fa 81       	ldd	r31, Y+2	; 0x02
    126e:	82 81       	ldd	r24, Z+2	; 0x02
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	29 f4       	brne	.+10     	; 0x127e <Timer_Init+0x28a>
			{
				Timers[TIMER2].Timer_Mode = COUNTER_MODE;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 93 7e 01 	sts	0x017E, r24
				return ERROR_OK;
    127a:	1b 82       	std	Y+3, r1	; 0x03
    127c:	45 c0       	rjmp	.+138    	; 0x1308 <Timer_Init+0x314>
			}
			else
			{
				return ERROR_OK;
    127e:	1b 82       	std	Y+3, r1	; 0x03
    1280:	43 c0       	rjmp	.+134    	; 0x1308 <Timer_Init+0x314>
			}
		}
		else if (Confg_S->Interrupt_Mode == INTERRUPT)
    1282:	e9 81       	ldd	r30, Y+1	; 0x01
    1284:	fa 81       	ldd	r31, Y+2	; 0x02
    1286:	83 81       	ldd	r24, Z+3	; 0x03
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	c1 f5       	brne	.+112    	; 0x12fc <Timer_Init+0x308>
		{  /* Initialization for interrupt */
			Timers[TIMER2].Interrupt_Mode = INTERRUPT;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	80 93 7f 01 	sts	0x017F, r24
			if (Confg_S->Timer_Mode == TIMER_MODE)
    1292:	e9 81       	ldd	r30, Y+1	; 0x01
    1294:	fa 81       	ldd	r31, Y+2	; 0x02
    1296:	82 81       	ldd	r24, Z+2	; 0x02
    1298:	88 23       	and	r24, r24
    129a:	21 f5       	brne	.+72     	; 0x12e4 <Timer_Init+0x2f0>
			{
				Timers[TIMER2].Timer_Mode = TIMER_MODE;
    129c:	10 92 7e 01 	sts	0x017E, r1

				/* CTC Mode */
				SET_BIT(TCCR2, TIMER0_CONTROL_WAVEGENERATION_21);
    12a0:	a5 e4       	ldi	r26, 0x45	; 69
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e5 e4       	ldi	r30, 0x45	; 69
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	88 60       	ori	r24, 0x08	; 8
    12ac:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2, TIMER0_CONTROL_WAVEGENERATION_20);
    12ae:	a5 e4       	ldi	r26, 0x45	; 69
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e5 e4       	ldi	r30, 0x45	; 69
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 7b       	andi	r24, 0xBF	; 191
    12ba:	8c 93       	st	X, r24
				/*Enable Global Interrupt */
				SET_BIT(STATUS_REGISTER, GLOBAL_INTERRUPT_BIT);
    12bc:	af e5       	ldi	r26, 0x5F	; 95
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ef e5       	ldi	r30, 0x5F	; 95
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	80 68       	ori	r24, 0x80	; 128
    12c8:	8c 93       	st	X, r24

				/*Enable Timer2 Compare Match Interrupt */
				SET_BIT(TIMER_INTERRUPT_MASK_REGISTER, TIMER2_INTERRUPT_COMPARE_MATCH_ENABLE_BIT);
    12ca:	a9 e5       	ldi	r26, 0x59	; 89
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e9 e5       	ldi	r30, 0x59	; 89
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	80 64       	ori	r24, 0x40	; 64
    12d6:	8c 93       	st	X, r24
				Timers[TIMER2].Timer_Psc = Confg_S->Timer_Psc;
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	81 81       	ldd	r24, Z+1	; 0x01
    12de:	80 93 7d 01 	sts	0x017D, r24
    12e2:	10 c0       	rjmp	.+32     	; 0x1304 <Timer_Init+0x310>
			}
			else if (Confg_S->Timer_Mode == COUNTER_MODE)
    12e4:	e9 81       	ldd	r30, Y+1	; 0x01
    12e6:	fa 81       	ldd	r31, Y+2	; 0x02
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	29 f4       	brne	.+10     	; 0x12f8 <Timer_Init+0x304>
			{
				Timers[TIMER2].Timer_Mode = COUNTER_MODE;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	80 93 7e 01 	sts	0x017E, r24
				return ERROR_OK;
    12f4:	1b 82       	std	Y+3, r1	; 0x03
    12f6:	08 c0       	rjmp	.+16     	; 0x1308 <Timer_Init+0x314>
			}
			else
			{
				return ERROR_OK;
    12f8:	1b 82       	std	Y+3, r1	; 0x03
    12fa:	06 c0       	rjmp	.+12     	; 0x1308 <Timer_Init+0x314>
			}

		}
		else
		{
			return ERROR_OK;
    12fc:	1b 82       	std	Y+3, r1	; 0x03
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <Timer_Init+0x314>

	}

	else
	{
		return ERROR_OK;
    1300:	1b 82       	std	Y+3, r1	; 0x03
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <Timer_Init+0x314>
	}
	return ERROR_NOK;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	8b 83       	std	Y+3, r24	; 0x03
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <Timer_Start>:
 * Input     :  Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2), Tick Counting (Counts given by user)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/

uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel, uint16_t Copy_uint16_TickCounts)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <Timer_Start+0x6>
    131c:	00 d0       	rcall	.+0      	; 0x131e <Timer_Start+0x8>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <Timer_Start+0xa>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	7b 83       	std	Y+3, r23	; 0x03
    1328:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_uint8_TimerChannel)
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	3e 83       	std	Y+6, r19	; 0x06
    1332:	2d 83       	std	Y+5, r18	; 0x05
    1334:	8d 81       	ldd	r24, Y+5	; 0x05
    1336:	9e 81       	ldd	r25, Y+6	; 0x06
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	91 05       	cpc	r25, r1
    133c:	09 f4       	brne	.+2      	; 0x1340 <Timer_Start+0x2a>
    133e:	7c c0       	rjmp	.+248    	; 0x1438 <Timer_Start+0x122>
    1340:	2d 81       	ldd	r18, Y+5	; 0x05
    1342:	3e 81       	ldd	r19, Y+6	; 0x06
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	09 f4       	brne	.+2      	; 0x134c <Timer_Start+0x36>
    134a:	ea c0       	rjmp	.+468    	; 0x1520 <Timer_Start+0x20a>
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	09 f0       	breq	.+2      	; 0x1356 <Timer_Start+0x40>
    1354:	56 c1       	rjmp	.+684    	; 0x1602 <Timer_Start+0x2ec>
	{
/**************************************     TIMER0  **************************************************************/
		case TIMER0:
		{
			TIMER0_COUNTER_REGISTER = 0x00; /* to Start from Zero */
    1356:	e2 e5       	ldi	r30, 0x52	; 82
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	10 82       	st	Z, r1
			TickCounts[TIMER0] = Copy_uint16_TickCounts;
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	9b 81       	ldd	r25, Y+3	; 0x03
    1360:	90 93 81 01 	sts	0x0181, r25
    1364:	80 93 80 01 	sts	0x0180, r24
			TIMER0_OUTPUT_COMPARE_MATCH = Copy_uint16_TickCounts;
    1368:	ec e5       	ldi	r30, 0x5C	; 92
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	80 83       	st	Z, r24
			if (Timers[TIMER0].Timer_Psc == F_CPU_CLOCK_TIMER_0)
    1370:	80 91 75 01 	lds	r24, 0x0175
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	51 f4       	brne	.+20     	; 0x138c <Timer_Start+0x76>
			{ /*  No Prescaler */
				TIMER0_CONTROL_REGISTER |= (1<<CS00);
    1378:	a3 e5       	ldi	r26, 0x53	; 83
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e3 e5       	ldi	r30, 0x53	; 83
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	81 60       	ori	r24, 0x01	; 1
    1384:	8c 93       	st	X, r24
				return ERROR_NOK;
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	9c 83       	std	Y+4, r25	; 0x04
    138a:	3c c1       	rjmp	.+632    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER0].Timer_Psc == F_CPU_CLOCK_8_TIMER_0)
    138c:	80 91 75 01 	lds	r24, 0x0175
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	51 f4       	brne	.+20     	; 0x13a8 <Timer_Start+0x92>
			{	/* clkI/O /8 */
				TIMER0_CONTROL_REGISTER |= (1<<CS01);
    1394:	a3 e5       	ldi	r26, 0x53	; 83
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e3 e5       	ldi	r30, 0x53	; 83
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	82 60       	ori	r24, 0x02	; 2
    13a0:	8c 93       	st	X, r24
				return ERROR_NOK;
    13a2:	21 e0       	ldi	r18, 0x01	; 1
    13a4:	2c 83       	std	Y+4, r18	; 0x04
    13a6:	2e c1       	rjmp	.+604    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER0].Timer_Psc == F_CPU_CLOCK_64_TIMER_0)
    13a8:	80 91 75 01 	lds	r24, 0x0175
    13ac:	83 30       	cpi	r24, 0x03	; 3
    13ae:	51 f4       	brne	.+20     	; 0x13c4 <Timer_Start+0xae>
			{  /*  clkI/O /64 */
				TIMER0_CONTROL_REGISTER |= (1<<CS00) |(1<<CS01);
    13b0:	a3 e5       	ldi	r26, 0x53	; 83
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e3 e5       	ldi	r30, 0x53	; 83
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	83 60       	ori	r24, 0x03	; 3
    13bc:	8c 93       	st	X, r24
				return ERROR_NOK;
    13be:	31 e0       	ldi	r19, 0x01	; 1
    13c0:	3c 83       	std	Y+4, r19	; 0x04
    13c2:	20 c1       	rjmp	.+576    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER0].Timer_Psc == F_CPU_CLOCK_256_TIMER_0)
    13c4:	80 91 75 01 	lds	r24, 0x0175
    13c8:	84 30       	cpi	r24, 0x04	; 4
    13ca:	51 f4       	brne	.+20     	; 0x13e0 <Timer_Start+0xca>
			{   /*  clkI/O /256 */
				TIMER0_CONTROL_REGISTER |= (1<<CS02);
    13cc:	a3 e5       	ldi	r26, 0x53	; 83
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e3 e5       	ldi	r30, 0x53	; 83
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	84 60       	ori	r24, 0x04	; 4
    13d8:	8c 93       	st	X, r24
				return ERROR_NOK;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	8c 83       	std	Y+4, r24	; 0x04
    13de:	12 c1       	rjmp	.+548    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER0].Timer_Psc == F_CPU_CLOCK_1024_TIMER_0)
    13e0:	80 91 75 01 	lds	r24, 0x0175
    13e4:	85 30       	cpi	r24, 0x05	; 5
    13e6:	51 f4       	brne	.+20     	; 0x13fc <Timer_Start+0xe6>
			{   /*  clkI/O /1024 */
				TIMER0_CONTROL_REGISTER |= (1<<CS00) |(1<<CS02);
    13e8:	a3 e5       	ldi	r26, 0x53	; 83
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e3 e5       	ldi	r30, 0x53	; 83
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	85 60       	ori	r24, 0x05	; 5
    13f4:	8c 93       	st	X, r24
				return ERROR_NOK;
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	9c 83       	std	Y+4, r25	; 0x04
    13fa:	04 c1       	rjmp	.+520    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER0].Timer_Psc == F_EXTERNAL_CLOCK_FALLING_TIMER_0)
    13fc:	80 91 75 01 	lds	r24, 0x0175
    1400:	86 30       	cpi	r24, 0x06	; 6
    1402:	51 f4       	brne	.+20     	; 0x1418 <Timer_Start+0x102>
			{
				TIMER0_CONTROL_REGISTER |=(1<<CS01) |(1<<CS02);
    1404:	a3 e5       	ldi	r26, 0x53	; 83
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e3 e5       	ldi	r30, 0x53	; 83
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	86 60       	ori	r24, 0x06	; 6
    1410:	8c 93       	st	X, r24
				return ERROR_NOK;
    1412:	21 e0       	ldi	r18, 0x01	; 1
    1414:	2c 83       	std	Y+4, r18	; 0x04
    1416:	f6 c0       	rjmp	.+492    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER0].Timer_Psc == F_EXTERNAL_CLOCK_RISING_TIMER_0)
    1418:	80 91 75 01 	lds	r24, 0x0175
    141c:	87 30       	cpi	r24, 0x07	; 7
    141e:	51 f4       	brne	.+20     	; 0x1434 <Timer_Start+0x11e>
			{
				TIMER0_CONTROL_REGISTER |=(1<<CS00) |(1<<CS01) |(1<<CS02);
    1420:	a3 e5       	ldi	r26, 0x53	; 83
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e3 e5       	ldi	r30, 0x53	; 83
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	87 60       	ori	r24, 0x07	; 7
    142c:	8c 93       	st	X, r24
				return ERROR_NOK;
    142e:	31 e0       	ldi	r19, 0x01	; 1
    1430:	3c 83       	std	Y+4, r19	; 0x04
    1432:	e8 c0       	rjmp	.+464    	; 0x1604 <Timer_Start+0x2ee>
			}
			else
			{
				return ERROR_OK;
    1434:	1c 82       	std	Y+4, r1	; 0x04
    1436:	e6 c0       	rjmp	.+460    	; 0x1604 <Timer_Start+0x2ee>
		break;

/***************************************** TIMER1  ***************************************************************/
		case TIMER1:
		{
			TIMER1_COUNTER_REGISTER = 0x00; /* to start from zero */
    1438:	ec e4       	ldi	r30, 0x4C	; 76
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	11 82       	std	Z+1, r1	; 0x01
    143e:	10 82       	st	Z, r1
			TickCounts[TIMER1] = Copy_uint16_TickCounts;
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	9b 81       	ldd	r25, Y+3	; 0x03
    1444:	90 93 83 01 	sts	0x0183, r25
    1448:	80 93 82 01 	sts	0x0182, r24
			TIMER1A_OUTPUT_COMPARE_MATCH = Copy_uint16_TickCounts;
    144c:	ea e4       	ldi	r30, 0x4A	; 74
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	9b 81       	ldd	r25, Y+3	; 0x03
    1454:	91 83       	std	Z+1, r25	; 0x01
    1456:	80 83       	st	Z, r24
			if (Timers[TIMER1].Timer_Psc == F_CPU_CLOCK_TIMER_1)
    1458:	80 91 79 01 	lds	r24, 0x0179
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	51 f4       	brne	.+20     	; 0x1474 <Timer_Start+0x15e>
			{ /*  No Prescaler */
				TIMER1_CONTROL_REGISTER_B |=(1<<CS10);
    1460:	ae e4       	ldi	r26, 0x4E	; 78
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	ee e4       	ldi	r30, 0x4E	; 78
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	81 60       	ori	r24, 0x01	; 1
    146c:	8c 93       	st	X, r24
				return ERROR_NOK;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	8c 83       	std	Y+4, r24	; 0x04
    1472:	c8 c0       	rjmp	.+400    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER1].Timer_Psc == F_CPU_CLOCK_8_TIMER_1)
    1474:	80 91 79 01 	lds	r24, 0x0179
    1478:	82 30       	cpi	r24, 0x02	; 2
    147a:	51 f4       	brne	.+20     	; 0x1490 <Timer_Start+0x17a>
			{
				TIMER1_CONTROL_REGISTER_B |= (1<<CS11);
    147c:	ae e4       	ldi	r26, 0x4E	; 78
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	ee e4       	ldi	r30, 0x4E	; 78
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	82 60       	ori	r24, 0x02	; 2
    1488:	8c 93       	st	X, r24
				return ERROR_NOK;
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	9c 83       	std	Y+4, r25	; 0x04
    148e:	ba c0       	rjmp	.+372    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER1].Timer_Psc == F_CPU_CLOCK_64_TIMER_1)
    1490:	80 91 79 01 	lds	r24, 0x0179
    1494:	83 30       	cpi	r24, 0x03	; 3
    1496:	51 f4       	brne	.+20     	; 0x14ac <Timer_Start+0x196>
			{
				TIMER1_CONTROL_REGISTER_B |=(1<<CS10) |(1<<CS11);
    1498:	ae e4       	ldi	r26, 0x4E	; 78
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	ee e4       	ldi	r30, 0x4E	; 78
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	83 60       	ori	r24, 0x03	; 3
    14a4:	8c 93       	st	X, r24
				return ERROR_NOK;
    14a6:	21 e0       	ldi	r18, 0x01	; 1
    14a8:	2c 83       	std	Y+4, r18	; 0x04
    14aa:	ac c0       	rjmp	.+344    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER1].Timer_Psc == F_CPU_CLOCK_256_TIMER_1)
    14ac:	80 91 79 01 	lds	r24, 0x0179
    14b0:	84 30       	cpi	r24, 0x04	; 4
    14b2:	51 f4       	brne	.+20     	; 0x14c8 <Timer_Start+0x1b2>
			{
				TIMER1_CONTROL_REGISTER_B |= (1<<CS12);
    14b4:	ae e4       	ldi	r26, 0x4E	; 78
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	ee e4       	ldi	r30, 0x4E	; 78
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	84 60       	ori	r24, 0x04	; 4
    14c0:	8c 93       	st	X, r24
				return ERROR_NOK;
    14c2:	31 e0       	ldi	r19, 0x01	; 1
    14c4:	3c 83       	std	Y+4, r19	; 0x04
    14c6:	9e c0       	rjmp	.+316    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER1].Timer_Psc == F_CPU_CLOCK_1024_TIMER_1)
    14c8:	80 91 79 01 	lds	r24, 0x0179
    14cc:	85 30       	cpi	r24, 0x05	; 5
    14ce:	51 f4       	brne	.+20     	; 0x14e4 <Timer_Start+0x1ce>
			{
				TIMER1_CONTROL_REGISTER_B |= (1<<CS10)|(1<<CS12);
    14d0:	ae e4       	ldi	r26, 0x4E	; 78
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ee e4       	ldi	r30, 0x4E	; 78
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	85 60       	ori	r24, 0x05	; 5
    14dc:	8c 93       	st	X, r24
				return ERROR_NOK;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	8c 83       	std	Y+4, r24	; 0x04
    14e2:	90 c0       	rjmp	.+288    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER1].Timer_Psc == F_EXTERNAL_CLOCK_FALLING_TIMER_1)
    14e4:	80 91 79 01 	lds	r24, 0x0179
    14e8:	86 30       	cpi	r24, 0x06	; 6
    14ea:	51 f4       	brne	.+20     	; 0x1500 <Timer_Start+0x1ea>
			{
				TIMER1_CONTROL_REGISTER_B |= (1<<CS11)|(1<<CS12);
    14ec:	ae e4       	ldi	r26, 0x4E	; 78
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ee e4       	ldi	r30, 0x4E	; 78
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	86 60       	ori	r24, 0x06	; 6
    14f8:	8c 93       	st	X, r24
				return ERROR_NOK;
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	9c 83       	std	Y+4, r25	; 0x04
    14fe:	82 c0       	rjmp	.+260    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER1].Timer_Psc == F_EXTERNAL_CLOCK_RISING_TIMER_1)
    1500:	80 91 79 01 	lds	r24, 0x0179
    1504:	87 30       	cpi	r24, 0x07	; 7
    1506:	51 f4       	brne	.+20     	; 0x151c <Timer_Start+0x206>
			{
				TIMER1_CONTROL_REGISTER_B |= (1<<CS10)|(1<<CS11)|(1<<CS12);
    1508:	ae e4       	ldi	r26, 0x4E	; 78
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	ee e4       	ldi	r30, 0x4E	; 78
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	87 60       	ori	r24, 0x07	; 7
    1514:	8c 93       	st	X, r24
				return ERROR_NOK;
    1516:	21 e0       	ldi	r18, 0x01	; 1
    1518:	2c 83       	std	Y+4, r18	; 0x04
    151a:	74 c0       	rjmp	.+232    	; 0x1604 <Timer_Start+0x2ee>
			}
			else
			{
				return ERROR_OK;
    151c:	1c 82       	std	Y+4, r1	; 0x04
    151e:	72 c0       	rjmp	.+228    	; 0x1604 <Timer_Start+0x2ee>

/*********************************    TIMER2     ******************************************************************/

		case TIMER2:
		{
			TIMER2_COUNTER_REGISTER = 0x00; /* to start from zero */
    1520:	e4 e4       	ldi	r30, 0x44	; 68
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	10 82       	st	Z, r1
			TickCounts[TIMER2] = Copy_uint16_TickCounts;
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	9b 81       	ldd	r25, Y+3	; 0x03
    152a:	90 93 85 01 	sts	0x0185, r25
    152e:	80 93 84 01 	sts	0x0184, r24
			TIMER2_OUTPUT_COMPARE_MATCH = Copy_uint16_TickCounts;
    1532:	e3 e4       	ldi	r30, 0x43	; 67
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	80 83       	st	Z, r24
			if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_TIMER_2)
    153a:	80 91 7d 01 	lds	r24, 0x017D
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	51 f4       	brne	.+20     	; 0x1556 <Timer_Start+0x240>
			{ /*  No Prescaler  */
				TIMER2_CONTROL_REGISTER |=(1<<CS20);
    1542:	a5 e4       	ldi	r26, 0x45	; 69
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e5 e4       	ldi	r30, 0x45	; 69
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	81 60       	ori	r24, 0x01	; 1
    154e:	8c 93       	st	X, r24
				return ERROR_NOK;
    1550:	31 e0       	ldi	r19, 0x01	; 1
    1552:	3c 83       	std	Y+4, r19	; 0x04
    1554:	57 c0       	rjmp	.+174    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_8_TIMER_2)
    1556:	80 91 7d 01 	lds	r24, 0x017D
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	51 f4       	brne	.+20     	; 0x1572 <Timer_Start+0x25c>
			{
				TIMER2_CONTROL_REGISTER |= (1<<CS21);
    155e:	a5 e4       	ldi	r26, 0x45	; 69
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e5 e4       	ldi	r30, 0x45	; 69
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	82 60       	ori	r24, 0x02	; 2
    156a:	8c 93       	st	X, r24
				return ERROR_NOK;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	8c 83       	std	Y+4, r24	; 0x04
    1570:	49 c0       	rjmp	.+146    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_32_TIMER_2)
    1572:	80 91 7d 01 	lds	r24, 0x017D
    1576:	83 30       	cpi	r24, 0x03	; 3
    1578:	51 f4       	brne	.+20     	; 0x158e <Timer_Start+0x278>
			{
				TIMER2_CONTROL_REGISTER |=(1<<CS20)|(1<<CS21);
    157a:	a5 e4       	ldi	r26, 0x45	; 69
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e5 e4       	ldi	r30, 0x45	; 69
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	83 60       	ori	r24, 0x03	; 3
    1586:	8c 93       	st	X, r24
				return ERROR_NOK;
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	9c 83       	std	Y+4, r25	; 0x04
    158c:	3b c0       	rjmp	.+118    	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_64_TIMER_2)
    158e:	80 91 7d 01 	lds	r24, 0x017D
    1592:	84 30       	cpi	r24, 0x04	; 4
    1594:	51 f4       	brne	.+20     	; 0x15aa <Timer_Start+0x294>
			{
				TIMER2_CONTROL_REGISTER |= (1<<CS22);
    1596:	a5 e4       	ldi	r26, 0x45	; 69
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e5 e4       	ldi	r30, 0x45	; 69
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	84 60       	ori	r24, 0x04	; 4
    15a2:	8c 93       	st	X, r24
				return ERROR_NOK;
    15a4:	21 e0       	ldi	r18, 0x01	; 1
    15a6:	2c 83       	std	Y+4, r18	; 0x04
    15a8:	2d c0       	rjmp	.+90     	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_128_TIMER_2)
    15aa:	80 91 7d 01 	lds	r24, 0x017D
    15ae:	85 30       	cpi	r24, 0x05	; 5
    15b0:	51 f4       	brne	.+20     	; 0x15c6 <Timer_Start+0x2b0>
			{
				TIMER2_CONTROL_REGISTER |=(1<<CS20)|(1<<CS22);
    15b2:	a5 e4       	ldi	r26, 0x45	; 69
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e5 e4       	ldi	r30, 0x45	; 69
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	85 60       	ori	r24, 0x05	; 5
    15be:	8c 93       	st	X, r24
				return ERROR_NOK;
    15c0:	31 e0       	ldi	r19, 0x01	; 1
    15c2:	3c 83       	std	Y+4, r19	; 0x04
    15c4:	1f c0       	rjmp	.+62     	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_256_TIMER_2)
    15c6:	80 91 7d 01 	lds	r24, 0x017D
    15ca:	86 30       	cpi	r24, 0x06	; 6
    15cc:	51 f4       	brne	.+20     	; 0x15e2 <Timer_Start+0x2cc>
			{
				TIMER2_CONTROL_REGISTER |=(1<<CS21)|(1<<CS22);
    15ce:	a5 e4       	ldi	r26, 0x45	; 69
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e5 e4       	ldi	r30, 0x45	; 69
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	86 60       	ori	r24, 0x06	; 6
    15da:	8c 93       	st	X, r24
				return ERROR_NOK;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	8c 83       	std	Y+4, r24	; 0x04
    15e0:	11 c0       	rjmp	.+34     	; 0x1604 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_1024_TIMER_2)
    15e2:	80 91 7d 01 	lds	r24, 0x017D
    15e6:	87 30       	cpi	r24, 0x07	; 7
    15e8:	51 f4       	brne	.+20     	; 0x15fe <Timer_Start+0x2e8>
			{
				TIMER2_CONTROL_REGISTER |=(1<<CS20)|(1<<CS21)|(1<<CS22);
    15ea:	a5 e4       	ldi	r26, 0x45	; 69
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e5 e4       	ldi	r30, 0x45	; 69
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	87 60       	ori	r24, 0x07	; 7
    15f6:	8c 93       	st	X, r24
				return ERROR_NOK;
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <Timer_Start+0x2ee>
			}
			else
			{
				return ERROR_OK;
    15fe:	1c 82       	std	Y+4, r1	; 0x04
    1600:	01 c0       	rjmp	.+2      	; 0x1604 <Timer_Start+0x2ee>
			}
		}

		break;
		default:
			return ERROR_OK;
    1602:	1c 82       	std	Y+4, r1	; 0x04
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
		break;

  }
return ERROR_NOK;
}
    1606:	26 96       	adiw	r28, 0x06	; 6
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <Timer_Stop>:
/*Description: Timer/Counter Stop
 * Input     :  Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Stop(uint8_t Copy_uint8_TimerChannel)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <Timer_Stop+0x6>
    161e:	00 d0       	rcall	.+0      	; 0x1620 <Timer_Stop+0x8>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_uint8_TimerChannel)
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3c 83       	std	Y+4, r19	; 0x04
    162e:	2b 83       	std	Y+3, r18	; 0x03
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	91 05       	cpc	r25, r1
    1638:	09 f1       	breq	.+66     	; 0x167c <Timer_Stop+0x64>
    163a:	2b 81       	ldd	r18, Y+3	; 0x03
    163c:	3c 81       	ldd	r19, Y+4	; 0x04
    163e:	22 30       	cpi	r18, 0x02	; 2
    1640:	31 05       	cpc	r19, r1
    1642:	99 f1       	breq	.+102    	; 0x16aa <Timer_Stop+0x92>
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	9c 81       	ldd	r25, Y+4	; 0x04
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	09 f0       	breq	.+2      	; 0x164e <Timer_Stop+0x36>
    164c:	45 c0       	rjmp	.+138    	; 0x16d8 <Timer_Stop+0xc0>
	{
	case TIMER0:
	{
		CLEAR_BIT(TIMER0_CONTROL_REGISTER, CS00);
    164e:	a3 e5       	ldi	r26, 0x53	; 83
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e3 e5       	ldi	r30, 0x53	; 83
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	8e 7f       	andi	r24, 0xFE	; 254
    165a:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER0_CONTROL_REGISTER, CS01);
    165c:	a3 e5       	ldi	r26, 0x53	; 83
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e3 e5       	ldi	r30, 0x53	; 83
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	8d 7f       	andi	r24, 0xFD	; 253
    1668:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER0_CONTROL_REGISTER, CS02);
    166a:	a3 e5       	ldi	r26, 0x53	; 83
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e3 e5       	ldi	r30, 0x53	; 83
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	8b 7f       	andi	r24, 0xFB	; 251
    1676:	8c 93       	st	X, r24
		return ERROR_OK;
    1678:	1a 82       	std	Y+2, r1	; 0x02
    167a:	30 c0       	rjmp	.+96     	; 0x16dc <Timer_Stop+0xc4>
	}
		break;

	case TIMER1:
	{
		CLEAR_BIT(TIMER1_CONTROL_REGISTER_B, CS10);
    167c:	ae e4       	ldi	r26, 0x4E	; 78
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	ee e4       	ldi	r30, 0x4E	; 78
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8e 7f       	andi	r24, 0xFE	; 254
    1688:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_CONTROL_REGISTER_B, CS11);
    168a:	ae e4       	ldi	r26, 0x4E	; 78
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	ee e4       	ldi	r30, 0x4E	; 78
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	8d 7f       	andi	r24, 0xFD	; 253
    1696:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_CONTROL_REGISTER_B, CS12);
    1698:	ae e4       	ldi	r26, 0x4E	; 78
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ee e4       	ldi	r30, 0x4E	; 78
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8b 7f       	andi	r24, 0xFB	; 251
    16a4:	8c 93       	st	X, r24
		return ERROR_OK;
    16a6:	1a 82       	std	Y+2, r1	; 0x02
    16a8:	19 c0       	rjmp	.+50     	; 0x16dc <Timer_Stop+0xc4>
	}
	break;
	case TIMER2:
	{
		CLEAR_BIT(TIMER2_CONTROL_REGISTER, CS20);
    16aa:	a5 e4       	ldi	r26, 0x45	; 69
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e5 e4       	ldi	r30, 0x45	; 69
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8e 7f       	andi	r24, 0xFE	; 254
    16b6:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER2_CONTROL_REGISTER, CS21);
    16b8:	a5 e4       	ldi	r26, 0x45	; 69
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e5 e4       	ldi	r30, 0x45	; 69
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8d 7f       	andi	r24, 0xFD	; 253
    16c4:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER2_CONTROL_REGISTER, CS22);
    16c6:	a5 e4       	ldi	r26, 0x45	; 69
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e5 e4       	ldi	r30, 0x45	; 69
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	8b 7f       	andi	r24, 0xFB	; 251
    16d2:	8c 93       	st	X, r24
		return ERROR_OK;
    16d4:	1a 82       	std	Y+2, r1	; 0x02
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <Timer_Stop+0xc4>
	}
	break;

	default:
		return ERROR_NOK;
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	9a 83       	std	Y+2, r25	; 0x02
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
	break;
	}
}
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <Timer_Reset>:
/*Description: Timer Reset
 * Input     :  Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Reset(uint8_t Copy_uint8_TimerChannel)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <Timer_Reset+0x6>
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	89 83       	std	Y+1, r24	; 0x01
	//checker if the inputs are correct or not
	if (Copy_uint8_TimerChannel == TIMER0 || Copy_uint8_TimerChannel == TIMER1 || Copy_uint8_TimerChannel == TIMER2)
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	88 23       	and	r24, r24
    16fc:	31 f0       	breq	.+12     	; 0x170a <Timer_Reset+0x1e>
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	19 f0       	breq	.+6      	; 0x170a <Timer_Reset+0x1e>
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	82 30       	cpi	r24, 0x02	; 2
    1708:	a9 f4       	brne	.+42     	; 0x1734 <Timer_Reset+0x48>
	{
		if (Copy_uint8_TimerChannel == TIMER0)
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	88 23       	and	r24, r24
    170e:	21 f4       	brne	.+8      	; 0x1718 <Timer_Reset+0x2c>
		{

			TIMER0_COUNTER_REGISTER =0x00;
    1710:	e2 e5       	ldi	r30, 0x52	; 82
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	10 82       	st	Z, r1
    1716:	0b c0       	rjmp	.+22     	; 0x172e <Timer_Reset+0x42>
		}
		else if (Copy_uint8_TimerChannel == TIMER1)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	81 30       	cpi	r24, 0x01	; 1
    171c:	29 f4       	brne	.+10     	; 0x1728 <Timer_Reset+0x3c>
		{

			TIMER1_COUNTER_REGISTER=0x00;
    171e:	ec e4       	ldi	r30, 0x4C	; 76
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	11 82       	std	Z+1, r1	; 0x01
    1724:	10 82       	st	Z, r1
    1726:	03 c0       	rjmp	.+6      	; 0x172e <Timer_Reset+0x42>
		}
		else
		{
			TIMER2_COUNTER_REGISTER=0x00;
    1728:	e4 e4       	ldi	r30, 0x44	; 68
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	10 82       	st	Z, r1
		}

		return ERROR_NOK;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	8a 83       	std	Y+2, r24	; 0x02
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <Timer_Reset+0x4a>
	}
	else
	{
		return ERROR_OK;
    1734:	1a 82       	std	Y+2, r1	; 0x02
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <Timer_Get_TickTime>:
/*Description: Get Timer Tick Time value to use it by user
 * Input     : Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2), *Timer_Time (Pointer to return Value)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Get_TickTime(uint8_t Copy_uint8_TimerChannel, uint32_t* Copy_uint8Ptr_TimerTickTime)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	00 d0       	rcall	.+0      	; 0x1748 <Timer_Get_TickTime+0x6>
    1748:	00 d0       	rcall	.+0      	; 0x174a <Timer_Get_TickTime+0x8>
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	7b 83       	std	Y+3, r23	; 0x03
    1752:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_uint8Ptr_TimerTickTime == NULL)
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	9b 81       	ldd	r25, Y+3	; 0x03
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	11 f4       	brne	.+4      	; 0x1760 <Timer_Get_TickTime+0x1e>
	{
		return ERROR_OK; /* error occurred as the pointer points to null */
    175c:	1c 82       	std	Y+4, r1	; 0x04
    175e:	5b c0       	rjmp	.+182    	; 0x1816 <Timer_Get_TickTime+0xd4>
	}
	else
	{
		if (Copy_uint8_TimerChannel == TIMER0 || Copy_uint8_TimerChannel == TIMER1 || Copy_uint8_TimerChannel == TIMER2)
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	88 23       	and	r24, r24
    1764:	39 f0       	breq	.+14     	; 0x1774 <Timer_Get_TickTime+0x32>
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	21 f0       	breq	.+8      	; 0x1774 <Timer_Get_TickTime+0x32>
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	82 30       	cpi	r24, 0x02	; 2
    1770:	09 f0       	breq	.+2      	; 0x1774 <Timer_Get_TickTime+0x32>
    1772:	50 c0       	rjmp	.+160    	; 0x1814 <Timer_Get_TickTime+0xd2>
		{
			if (Copy_uint8_TimerChannel == TIMER0)
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	88 23       	and	r24, r24
    1778:	b9 f4       	brne	.+46     	; 0x17a8 <Timer_Get_TickTime+0x66>
			{
				*Copy_uint8Ptr_TimerTickTime = Timers[0].Timer_Psc / CPU_FREQ;   // CPU_Frequency is defined in this file.
    177a:	80 91 75 01 	lds	r24, 0x0175
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a0 e0       	ldi	r26, 0x00	; 0
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	20 e4       	ldi	r18, 0x40	; 64
    1788:	32 e4       	ldi	r19, 0x42	; 66
    178a:	4f e0       	ldi	r20, 0x0F	; 15
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 2f 14 	call	0x285e	; 0x285e <__divmodsi4>
    1796:	da 01       	movw	r26, r20
    1798:	c9 01       	movw	r24, r18
    179a:	ea 81       	ldd	r30, Y+2	; 0x02
    179c:	fb 81       	ldd	r31, Y+3	; 0x03
    179e:	80 83       	st	Z, r24
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	a2 83       	std	Z+2, r26	; 0x02
    17a4:	b3 83       	std	Z+3, r27	; 0x03
    17a6:	33 c0       	rjmp	.+102    	; 0x180e <Timer_Get_TickTime+0xcc>
			}
			else if (Copy_uint8_TimerChannel == TIMER1)
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	b9 f4       	brne	.+46     	; 0x17dc <Timer_Get_TickTime+0x9a>
			{
				*Copy_uint8Ptr_TimerTickTime = Timers[1].Timer_Psc / CPU_FREQ;
    17ae:	80 91 79 01 	lds	r24, 0x0179
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a0 e0       	ldi	r26, 0x00	; 0
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	20 e4       	ldi	r18, 0x40	; 64
    17bc:	32 e4       	ldi	r19, 0x42	; 66
    17be:	4f e0       	ldi	r20, 0x0F	; 15
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	bc 01       	movw	r22, r24
    17c4:	cd 01       	movw	r24, r26
    17c6:	0e 94 2f 14 	call	0x285e	; 0x285e <__divmodsi4>
    17ca:	da 01       	movw	r26, r20
    17cc:	c9 01       	movw	r24, r18
    17ce:	ea 81       	ldd	r30, Y+2	; 0x02
    17d0:	fb 81       	ldd	r31, Y+3	; 0x03
    17d2:	80 83       	st	Z, r24
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	a2 83       	std	Z+2, r26	; 0x02
    17d8:	b3 83       	std	Z+3, r27	; 0x03
    17da:	19 c0       	rjmp	.+50     	; 0x180e <Timer_Get_TickTime+0xcc>
			}
			else if (Copy_uint8_TimerChannel == TIMER2)
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	82 30       	cpi	r24, 0x02	; 2
    17e0:	b1 f4       	brne	.+44     	; 0x180e <Timer_Get_TickTime+0xcc>
			{
				*Copy_uint8Ptr_TimerTickTime = Timers[2].Timer_Psc / CPU_FREQ;
    17e2:	80 91 7d 01 	lds	r24, 0x017D
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	a0 e0       	ldi	r26, 0x00	; 0
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	20 e4       	ldi	r18, 0x40	; 64
    17f0:	32 e4       	ldi	r19, 0x42	; 66
    17f2:	4f e0       	ldi	r20, 0x0F	; 15
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	bc 01       	movw	r22, r24
    17f8:	cd 01       	movw	r24, r26
    17fa:	0e 94 2f 14 	call	0x285e	; 0x285e <__divmodsi4>
    17fe:	da 01       	movw	r26, r20
    1800:	c9 01       	movw	r24, r18
    1802:	ea 81       	ldd	r30, Y+2	; 0x02
    1804:	fb 81       	ldd	r31, Y+3	; 0x03
    1806:	80 83       	st	Z, r24
    1808:	91 83       	std	Z+1, r25	; 0x01
    180a:	a2 83       	std	Z+2, r26	; 0x02
    180c:	b3 83       	std	Z+3, r27	; 0x03
		}
		else
		{
			return ERROR_OK; /*error occurred as Timer channel is not supported */
		}
	}return ERROR_NOK;  /* no error occurred*/
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	8c 83       	std	Y+4, r24	; 0x04
    1812:	01 c0       	rjmp	.+2      	; 0x1816 <Timer_Get_TickTime+0xd4>
			}

		}
		else
		{
			return ERROR_OK; /*error occurred as Timer channel is not supported */
    1814:	1c 82       	std	Y+4, r1	; 0x04
    1816:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}return ERROR_NOK;  /* no error occurred*/
}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <PWM_void_Init>:
#include "timer.h"
#include "Dio.h"
#include "PWM_Cfg.h"

void PWM_void_Init(Str_TimerConfiguration_t *timer)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <PWM_void_Init+0x6>
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01
	Timer_Init(timer);
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	9a 81       	ldd	r25, Y+2	; 0x02
    1838:	0e 94 fa 07 	call	0xff4	; 0xff4 <Timer_Init>
	Timer_Start(TIMER0,255);
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	6f ef       	ldi	r22, 0xFF	; 255
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	0e 94 8b 09 	call	0x1316	; 0x1316 <Timer_Start>
	DIO_u8Init_PIN(MOTOR_PWM_PIN,DIO_OUTPUT);   /* SET PB0 OUTPUT*/
    1846:	88 e0       	ldi	r24, 0x08	; 8
    1848:	61 e0       	ldi	r22, 0x01	; 1
    184a:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <DIO_u8Init_PIN>

}
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <PWM_void_SetDutyCycle>:


void  PWM_void_SetDutyCycle(uint8_t *Copy_uint16_t_DutyCycle)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	00 d0       	rcall	.+0      	; 0x185e <PWM_void_SetDutyCycle+0x6>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	9a 83       	std	Y+2, r25	; 0x02
    1864:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		if(TCNT0>=*Copy_uint16_t_DutyCycle)
    1866:	e2 e5       	ldi	r30, 0x52	; 82
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	90 81       	ld	r25, Z
    186c:	e9 81       	ldd	r30, Y+1	; 0x01
    186e:	fa 81       	ldd	r31, Y+2	; 0x02
    1870:	80 81       	ld	r24, Z
    1872:	98 17       	cp	r25, r24
    1874:	40 f0       	brcs	.+16     	; 0x1886 <PWM_void_SetDutyCycle+0x2e>
		{
			CLEAR_BIT(VALUE_PORT1,0);
    1876:	a8 e3       	ldi	r26, 0x38	; 56
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e8 e3       	ldi	r30, 0x38	; 56
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8e 7f       	andi	r24, 0xFE	; 254
    1882:	8c 93       	st	X, r24
    1884:	f0 cf       	rjmp	.-32     	; 0x1866 <PWM_void_SetDutyCycle+0xe>
		}
		else
		{
		   SET_BIT(VALUE_PORT1,0);
    1886:	a8 e3       	ldi	r26, 0x38	; 56
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e8 e3       	ldi	r30, 0x38	; 56
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	81 60       	ori	r24, 0x01	; 1
    1892:	8c 93       	st	X, r24
    1894:	e8 cf       	rjmp	.-48     	; 0x1866 <PWM_void_SetDutyCycle+0xe>

00001896 <LCD_init>:

/*
 * Init LCD.
 */
void LCD_init()
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
	 * in 8-bit mode to init.
	 */
	//init RS, RW, ENABLE pins.


	SET_BIT(LCD_CONTROL_DDR, LCD_RS);
    189e:	a4 e3       	ldi	r26, 0x34	; 52
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e4 e3       	ldi	r30, 0x34	; 52
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	81 60       	ori	r24, 0x01	; 1
    18aa:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR, LCD_RW);
    18ac:	a4 e3       	ldi	r26, 0x34	; 52
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e4 e3       	ldi	r30, 0x34	; 52
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	82 60       	ori	r24, 0x02	; 2
    18b8:	8c 93       	st	X, r24
	SET_BIT(LCD_CONTROL_DDR, LCD_ENABLE_PIN);
    18ba:	a4 e3       	ldi	r26, 0x34	; 52
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e4 e3       	ldi	r30, 0x34	; 52
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	84 60       	ori	r24, 0x04	; 4
    18c6:	8c 93       	st	X, r24
	//init ports as output pins.
	LCD_DDR = LCD_DDR | 0x7F;
	LCD_sendCommand(0x38);
#elif LCD_MODE == 4
#ifdef HIGH_PINS
	LCD_DDR = LCD_DDR | 0xF0;
    18c8:	a4 e3       	ldi	r26, 0x34	; 52
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e4 e3       	ldi	r30, 0x34	; 52
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 6f       	ori	r24, 0xF0	; 240
    18d4:	8c 93       	st	X, r24
#else
	LCD_DDR = LCD_DDR  | 0x0F;
#endif
	LCD_sendCommand(0x33);
    18d6:	83 e3       	ldi	r24, 0x33	; 51
    18d8:	0e 94 80 0c 	call	0x1900	; 0x1900 <LCD_sendCommand>
	LCD_sendCommand(0x32);
    18dc:	82 e3       	ldi	r24, 0x32	; 50
    18de:	0e 94 80 0c 	call	0x1900	; 0x1900 <LCD_sendCommand>
	LCD_sendCommand(0x28);
    18e2:	88 e2       	ldi	r24, 0x28	; 40
    18e4:	0e 94 80 0c 	call	0x1900	; 0x1900 <LCD_sendCommand>
#else
	#error "Error Wrong mode for LCD"
#endif
	LCD_sendCommand(0x0E);
    18e8:	8e e0       	ldi	r24, 0x0E	; 14
    18ea:	0e 94 80 0c 	call	0x1900	; 0x1900 <LCD_sendCommand>
	LCD_sendCommand(0x01);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	0e 94 80 0c 	call	0x1900	; 0x1900 <LCD_sendCommand>
	wait(1);
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <wait>
}
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <LCD_sendCommand>:

/*
 * LCD send Command.
 */
void LCD_sendCommand(uint8_t cmd)
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	0f 92       	push	r0
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	89 83       	std	Y+1, r24	; 0x01
	 	 * E enable bit high-to-low pulse.
	 	 * delay about 20ms.
	 	 * send cmd.
	 	 * delay about 20ms.
	 */
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RS);
    190c:	a5 e3       	ldi	r26, 0x35	; 53
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e5 e3       	ldi	r30, 0x35	; 53
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	8e 7f       	andi	r24, 0xFE	; 254
    1918:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RW);
    191a:	a5 e3       	ldi	r26, 0x35	; 53
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e5 e3       	ldi	r30, 0x35	; 53
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	8d 7f       	andi	r24, 0xFD	; 253
    1926:	8c 93       	st	X, r24
	high_to_low_pulse();
#elif LCD_MODE == 4

#ifdef HIGH_PINS
	//Send high nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (cmd  & 0xF0);
    1928:	a5 e3       	ldi	r26, 0x35	; 53
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e5 e3       	ldi	r30, 0x35	; 53
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	98 2f       	mov	r25, r24
    1934:	9f 70       	andi	r25, 0x0F	; 15
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	80 7f       	andi	r24, 0xF0	; 240
    193a:	89 2b       	or	r24, r25
    193c:	8c 93       	st	X, r24
	high_to_low_pulse();
    193e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <high_to_low_pulse>
	//send low nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (cmd << 4);
    1942:	a5 e3       	ldi	r26, 0x35	; 53
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e5 e3       	ldi	r30, 0x35	; 53
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	28 2f       	mov	r18, r24
    194e:	2f 70       	andi	r18, 0x0F	; 15
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	82 95       	swap	r24
    1958:	92 95       	swap	r25
    195a:	90 7f       	andi	r25, 0xF0	; 240
    195c:	98 27       	eor	r25, r24
    195e:	80 7f       	andi	r24, 0xF0	; 240
    1960:	98 27       	eor	r25, r24
    1962:	82 2b       	or	r24, r18
    1964:	8c 93       	st	X, r24
	high_to_low_pulse();
    1966:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <high_to_low_pulse>
	LCD_PORT = (LCD_PORT & 0xF0) |  (cmd & 0x0F);
	high_to_low_pulse();
#endif

#endif
}
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <LCD_displayCharacter>:

/*
 * LCD display Character.
 */
void LCD_displayCharacter(uint8_t character)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	0f 92       	push	r0
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	89 83       	std	Y+1, r24	; 0x01
	 * Write Data.
	 * delay to latch.
	 */


	SET_BIT(LCD_CONTROL_PORT,   LCD_RS);
    197e:	a5 e3       	ldi	r26, 0x35	; 53
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e5 e3       	ldi	r30, 0x35	; 53
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	81 60       	ori	r24, 0x01	; 1
    198a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_RW);
    198c:	a5 e3       	ldi	r26, 0x35	; 53
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e5 e3       	ldi	r30, 0x35	; 53
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8d 7f       	andi	r24, 0xFD	; 253
    1998:	8c 93       	st	X, r24
	high_to_low_pulse();
#elif LCD_MODE == 4

#ifdef HIGH_PINS
	//Send high nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (character  & 0xF0);
    199a:	a5 e3       	ldi	r26, 0x35	; 53
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e5 e3       	ldi	r30, 0x35	; 53
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	98 2f       	mov	r25, r24
    19a6:	9f 70       	andi	r25, 0x0F	; 15
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	80 7f       	andi	r24, 0xF0	; 240
    19ac:	89 2b       	or	r24, r25
    19ae:	8c 93       	st	X, r24
	high_to_low_pulse();
    19b0:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <high_to_low_pulse>
	//send low nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (character << 4);
    19b4:	a5 e3       	ldi	r26, 0x35	; 53
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e5 e3       	ldi	r30, 0x35	; 53
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	28 2f       	mov	r18, r24
    19c0:	2f 70       	andi	r18, 0x0F	; 15
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	82 95       	swap	r24
    19ca:	92 95       	swap	r25
    19cc:	90 7f       	andi	r25, 0xF0	; 240
    19ce:	98 27       	eor	r25, r24
    19d0:	80 7f       	andi	r24, 0xF0	; 240
    19d2:	98 27       	eor	r25, r24
    19d4:	82 2b       	or	r24, r18
    19d6:	8c 93       	st	X, r24
	high_to_low_pulse();
    19d8:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <high_to_low_pulse>
	high_to_low_pulse();

#endif

#endif
}
    19dc:	0f 90       	pop	r0
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <LCD_displayString>:

/*
 * Display string.
 */
void LCD_displayString(uint8_t * string)
{
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <LCD_displayString+0x6>
    19ea:	0f 92       	push	r0
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	9b 83       	std	Y+3, r25	; 0x03
    19f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    19f4:	19 82       	std	Y+1, r1	; 0x01
    19f6:	0e c0       	rjmp	.+28     	; 0x1a14 <LCD_displayString+0x30>

	while( *(string + i) != '\0' )
	{
		LCD_displayCharacter(*(string + i));
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	9b 81       	ldd	r25, Y+3	; 0x03
    1a02:	fc 01       	movw	r30, r24
    1a04:	e2 0f       	add	r30, r18
    1a06:	f3 1f       	adc	r31, r19
    1a08:	80 81       	ld	r24, Z
    1a0a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LCD_displayCharacter>
		i++;
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	8f 5f       	subi	r24, 0xFF	; 255
    1a12:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(uint8_t * string)
{
	uint8_t i = 0;

	while( *(string + i) != '\0' )
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1e:	fc 01       	movw	r30, r24
    1a20:	e2 0f       	add	r30, r18
    1a22:	f3 1f       	adc	r31, r19
    1a24:	80 81       	ld	r24, Z
    1a26:	88 23       	and	r24, r24
    1a28:	39 f7       	brne	.-50     	; 0x19f8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*(string + i));
		i++;
	}
}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <LCD_displayStringRowCol>:
/*
 * Display string at specific location.
 */

void LCD_displayStringRowCol(uint8_t * string, uint8_t row, uint8_t col)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <LCD_displayStringRowCol+0x6>
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <LCD_displayStringRowCol+0x8>
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	6b 83       	std	Y+3, r22	; 0x03
    1a48:	4c 83       	std	Y+4, r20	; 0x04
	LCD_goToRowColumn( row, col );
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	6c 81       	ldd	r22, Y+4	; 0x04
    1a4e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_goToRowColumn>
	LCD_displayString(string);
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	9a 81       	ldd	r25, Y+2	; 0x02
    1a56:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <LCD_displayString>
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <LCD_goToRowColumn>:
/*
 * Go to row column.
 */
void LCD_goToRowColumn(uint8_t row, uint8_t col)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <LCD_goToRowColumn+0x6>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <LCD_goToRowColumn+0x8>
    1a70:	0f 92       	push	r0
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	8a 83       	std	Y+2, r24	; 0x02
    1a78:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t address;
	switch(row)
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	3d 83       	std	Y+5, r19	; 0x05
    1a82:	2c 83       	std	Y+4, r18	; 0x04
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	82 30       	cpi	r24, 0x02	; 2
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	d1 f0       	breq	.+52     	; 0x1ac2 <LCD_goToRowColumn+0x5a>
    1a8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a90:	3d 81       	ldd	r19, Y+5	; 0x05
    1a92:	23 30       	cpi	r18, 0x03	; 3
    1a94:	31 05       	cpc	r19, r1
    1a96:	34 f4       	brge	.+12     	; 0x1aa4 <LCD_goToRowColumn+0x3c>
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	61 f0       	breq	.+24     	; 0x1aba <LCD_goToRowColumn+0x52>
    1aa2:	1a c0       	rjmp	.+52     	; 0x1ad8 <LCD_goToRowColumn+0x70>
    1aa4:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa6:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa8:	23 30       	cpi	r18, 0x03	; 3
    1aaa:	31 05       	cpc	r19, r1
    1aac:	71 f0       	breq	.+28     	; 0x1aca <LCD_goToRowColumn+0x62>
    1aae:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab2:	84 30       	cpi	r24, 0x04	; 4
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	69 f0       	breq	.+26     	; 0x1ad2 <LCD_goToRowColumn+0x6a>
    1ab8:	0f c0       	rjmp	.+30     	; 0x1ad8 <LCD_goToRowColumn+0x70>
	{
		case 1:
			address = 0x80 + col;
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	80 58       	subi	r24, 0x80	; 128
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	0b c0       	rjmp	.+22     	; 0x1ad8 <LCD_goToRowColumn+0x70>
			break;
		case 2:
			address = 0x40 + col;
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	80 5c       	subi	r24, 0xC0	; 192
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	07 c0       	rjmp	.+14     	; 0x1ad8 <LCD_goToRowColumn+0x70>
			break;
		case 3:
			address =  0x10 + col;
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	80 5f       	subi	r24, 0xF0	; 240
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	03 c0       	rjmp	.+6      	; 0x1ad8 <LCD_goToRowColumn+0x70>
			break;
		case 4:
			address = 0x50 + col;
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	80 5b       	subi	r24, 0xB0	; 176
    1ad6:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_sendCommand( address | 0x80 );
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	80 68       	ori	r24, 0x80	; 128
    1adc:	0e 94 80 0c 	call	0x1900	; 0x1900 <LCD_sendCommand>
}
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <LCD_integerToString>:

/*
 * Integer to ascii.
 */
void LCD_integerToString(uint16_t number)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	62 97       	sbiw	r28, 0x12	; 18
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	9a 8b       	std	Y+18, r25	; 0x12
    1b06:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t buffer[16];
	itoa(number, buffer, 10);
    1b08:	89 89       	ldd	r24, Y+17	; 0x11
    1b0a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b0c:	9e 01       	movw	r18, r28
    1b0e:	2f 5f       	subi	r18, 0xFF	; 255
    1b10:	3f 4f       	sbci	r19, 0xFF	; 255
    1b12:	b9 01       	movw	r22, r18
    1b14:	4a e0       	ldi	r20, 0x0A	; 10
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	0e 94 95 14 	call	0x292a	; 0x292a <itoa>
	LCD_displayString(buffer);
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <LCD_displayString>
}
    1b24:	62 96       	adiw	r28, 0x12	; 18
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <LCD_clearScreen>:

/*
 * Clear Screen.
 */
void LCD_clearScreen()
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(0x01);
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	0e 94 80 0c 	call	0x1900	; 0x1900 <LCD_sendCommand>
}
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <wait>:
/*
 * LCD_wait .. this function used to create a delay after sending commands or data so LCD latch information.
 */

static void wait(uint8_t time)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	2f 97       	sbiw	r28, 0x0f	; 15
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(time);
    1b60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a0 e0       	ldi	r26, 0x00	; 0
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8b 87       	std	Y+11, r24	; 0x0b
    1b78:	9c 87       	std	Y+12, r25	; 0x0c
    1b7a:	ad 87       	std	Y+13, r26	; 0x0d
    1b7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	4a e7       	ldi	r20, 0x7A	; 122
    1b8c:	53 e4       	ldi	r21, 0x43	; 67
    1b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	8f 83       	std	Y+7, r24	; 0x07
    1b98:	98 87       	std	Y+8, r25	; 0x08
    1b9a:	a9 87       	std	Y+9, r26	; 0x09
    1b9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	78 85       	ldd	r23, Y+8	; 0x08
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb2:	88 23       	and	r24, r24
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <wait+0x76>
		__ticks = 1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	3f c0       	rjmp	.+126    	; 0x1c3e <wait+0xf4>
	else if (__tmp > 65535)
    1bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc2:	78 85       	ldd	r23, Y+8	; 0x08
    1bc4:	89 85       	ldd	r24, Y+9	; 0x09
    1bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	3f ef       	ldi	r19, 0xFF	; 255
    1bcc:	4f e7       	ldi	r20, 0x7F	; 127
    1bce:	57 e4       	ldi	r21, 0x47	; 71
    1bd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd4:	18 16       	cp	r1, r24
    1bd6:	4c f5       	brge	.+82     	; 0x1c2a <wait+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e2       	ldi	r20, 0x20	; 32
    1be6:	51 e4       	ldi	r21, 0x41	; 65
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	cd 01       	movw	r24, r26
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
    1c00:	0f c0       	rjmp	.+30     	; 0x1c20 <wait+0xd6>
    1c02:	89 e1       	ldi	r24, 0x19	; 25
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9c 83       	std	Y+4, r25	; 0x04
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <wait+0xc4>
    1c12:	9c 83       	std	Y+4, r25	; 0x04
    1c14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c16:	8d 81       	ldd	r24, Y+5	; 0x05
    1c18:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	69 f7       	brne	.-38     	; 0x1c02 <wait+0xb8>
    1c28:	14 c0       	rjmp	.+40     	; 0x1c52 <wait+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2c:	78 85       	ldd	r23, Y+8	; 0x08
    1c2e:	89 85       	ldd	r24, Y+9	; 0x09
    1c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	9e 81       	ldd	r25, Y+6	; 0x06
    1c42:	9a 83       	std	Y+2, r25	; 0x02
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <wait+0x100>
    1c4e:	9a 83       	std	Y+2, r25	; 0x02
    1c50:	89 83       	std	Y+1, r24	; 0x01
}
    1c52:	2f 96       	adiw	r28, 0x0f	; 15
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <high_to_low_pulse>:

static void high_to_low_pulse()
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
    1c6c:	a5 e3       	ldi	r26, 0x35	; 53
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e5 e3       	ldi	r30, 0x35	; 53
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	84 60       	ori	r24, 0x04	; 4
    1c78:	8c 93       	st	X, r24
	wait(20);
    1c7a:	84 e1       	ldi	r24, 0x14	; 20
    1c7c:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <wait>
	CLEAR_BIT(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
    1c80:	a5 e3       	ldi	r26, 0x35	; 53
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e5 e3       	ldi	r30, 0x35	; 53
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8b 7f       	andi	r24, 0xFB	; 251
    1c8c:	8c 93       	st	X, r24
	wait(1);
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <wait>
}
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <DIO_u8Init_PORT>:
/*Description: Set PORT Direction (INPUT or OUTPUT)
 * Input     : Copy_u8PortNB (PORT Number) ,  Copy_u8Dir (PORT Direction)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8Init_PORT(uint8_t Copy_u8PortNB,uint8_t Copy_u8Dir)
{   //KHALED
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <DIO_u8Init_PORT+0x6>
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <DIO_u8Init_PORT+0x8>
    1ca2:	0f 92       	push	r0
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */

	if( (Copy_u8PortNB == DIOA)|| (Copy_u8PortNB == DIOB) ||  (Copy_u8PortNB == DIOC) || (Copy_u8PortNB == DIOD))
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	88 23       	and	r24, r24
    1cb0:	49 f0       	breq	.+18     	; 0x1cc4 <DIO_u8Init_PORT+0x2a>
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	31 f0       	breq	.+12     	; 0x1cc4 <DIO_u8Init_PORT+0x2a>
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	82 30       	cpi	r24, 0x02	; 2
    1cbc:	19 f0       	breq	.+6      	; 0x1cc4 <DIO_u8Init_PORT+0x2a>
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	83 30       	cpi	r24, 0x03	; 3
    1cc2:	a1 f5       	brne	.+104    	; 0x1d2c <DIO_u8Init_PORT+0x92>
	{
		switch (Copy_u8PortNB)
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	3d 83       	std	Y+5, r19	; 0x05
    1ccc:	2c 83       	std	Y+4, r18	; 0x04
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	d1 f0       	breq	.+52     	; 0x1d0c <DIO_u8Init_PORT+0x72>
    1cd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cda:	3d 81       	ldd	r19, Y+5	; 0x05
    1cdc:	22 30       	cpi	r18, 0x02	; 2
    1cde:	31 05       	cpc	r19, r1
    1ce0:	2c f4       	brge	.+10     	; 0x1cec <DIO_u8Init_PORT+0x52>
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	61 f0       	breq	.+24     	; 0x1d02 <DIO_u8Init_PORT+0x68>
    1cea:	1e c0       	rjmp	.+60     	; 0x1d28 <DIO_u8Init_PORT+0x8e>
    1cec:	2c 81       	ldd	r18, Y+4	; 0x04
    1cee:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf0:	22 30       	cpi	r18, 0x02	; 2
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	81 f0       	breq	.+32     	; 0x1d16 <DIO_u8Init_PORT+0x7c>
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfa:	83 30       	cpi	r24, 0x03	; 3
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	81 f0       	breq	.+32     	; 0x1d20 <DIO_u8Init_PORT+0x86>
    1d00:	13 c0       	rjmp	.+38     	; 0x1d28 <DIO_u8Init_PORT+0x8e>
		{
		case DIOA:
			DIRECTION_PORT0=Copy_u8Dir; //setting whole port A direction
    1d02:	ea e3       	ldi	r30, 0x3A	; 58
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	80 83       	st	Z, r24
    1d0a:	0e c0       	rjmp	.+28     	; 0x1d28 <DIO_u8Init_PORT+0x8e>
			break;
		case DIOB:
			DIRECTION_PORT1=Copy_u8Dir; //setting whole port B direction
    1d0c:	e7 e3       	ldi	r30, 0x37	; 55
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	80 83       	st	Z, r24
    1d14:	09 c0       	rjmp	.+18     	; 0x1d28 <DIO_u8Init_PORT+0x8e>
			break;
		case DIOC:
			DIRECTION_PORT2=Copy_u8Dir; //setting whole port C direction
    1d16:	e4 e3       	ldi	r30, 0x34	; 52
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	80 83       	st	Z, r24
    1d1e:	04 c0       	rjmp	.+8      	; 0x1d28 <DIO_u8Init_PORT+0x8e>
			break;
		case DIOD:
			DIRECTION_PORT3=Copy_u8Dir; //setting whole port D direction
    1d20:	e1 e3       	ldi	r30, 0x31	; 49
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	80 83       	st	Z, r24
			break;


		}
		return NO_ERROR;
    1d28:	1b 82       	std	Y+3, r1	; 0x03
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <DIO_u8Init_PORT+0x96>
	}
	else
	{
		return ERROR;
    1d2c:	91 e0       	ldi	r25, 0x01	; 1
    1d2e:	9b 83       	std	Y+3, r25	; 0x03
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <DIO_u8Init_PIN>:
/*Description: Set PIN Direction (INPUT or OUTPUT)
 * Input     :Copy_u8PinNB (PIN Number) ,  Copy_u8Dir (PIN Direction)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8Init_PIN(uint8_t Copy_u8PinN,uint8_t Copy_u8Dir)
{ // YOUSSEF
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <DIO_u8Init_PIN+0x6>
    1d48:	0f 92       	push	r0
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	6a 83       	std	Y+2, r22	; 0x02

	/* Implement Your Code */
	if(Copy_u8PinN >= MINIMUM_PIN_NO && Copy_u8PinN <= MAX_PIN_NO)
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	80 32       	cpi	r24, 0x20	; 32
    1d56:	08 f0       	brcs	.+2      	; 0x1d5a <DIO_u8Init_PIN+0x18>
    1d58:	e8 c0       	rjmp	.+464    	; 0x1f2a <DIO_u8Init_PIN+0x1e8>
	    {
	        // Copy_u8Dir should be either having the value input or output.

	        if(Copy_u8Dir == DIO_INPUT || Copy_u8Dir == DIO_OUTPUT)
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	88 23       	and	r24, r24
    1d5e:	21 f0       	breq	.+8      	; 0x1d68 <DIO_u8Init_PIN+0x26>
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <DIO_u8Init_PIN+0x26>
    1d66:	de c0       	rjmp	.+444    	; 0x1f24 <DIO_u8Init_PIN+0x1e2>
	        {
	            if(Copy_u8PinN >= DIO_PIN_NO_0 && Copy_u8PinN <= DIO_PIN_NO_7)  // PORT A
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	88 30       	cpi	r24, 0x08	; 8
    1d6c:	90 f5       	brcc	.+100    	; 0x1dd2 <DIO_u8Init_PIN+0x90>
	            {
	                if(Copy_u8Dir == DIO_OUTPUT)
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	b9 f4       	brne	.+46     	; 0x1da2 <DIO_u8Init_PIN+0x60>
	                {
	                    // Setting the required bit in the DDRA register to 1 (output).
	                    SET_BIT(DIRECTION_PORT0, (Copy_u8PinN % 8));
    1d74:	aa e3       	ldi	r26, 0x3A	; 58
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	ea e3       	ldi	r30, 0x3A	; 58
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	48 2f       	mov	r20, r24
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	88 2f       	mov	r24, r24
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9c 01       	movw	r18, r24
    1d88:	27 70       	andi	r18, 0x07	; 7
    1d8a:	30 70       	andi	r19, 0x00	; 0
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 2e       	mov	r0, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <DIO_u8Init_PIN+0x56>
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	0a 94       	dec	r0
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <DIO_u8Init_PIN+0x52>
    1d9c:	84 2b       	or	r24, r20
    1d9e:	8c 93       	st	X, r24
    1da0:	bf c0       	rjmp	.+382    	; 0x1f20 <DIO_u8Init_PIN+0x1de>
	                }
	                else
	                {
	                    // Clearing the required bit in the DDRA register (input).
	                    CLEAR_BIT(DIRECTION_PORT0, (Copy_u8PinN % 8));
    1da2:	aa e3       	ldi	r26, 0x3A	; 58
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	ea e3       	ldi	r30, 0x3A	; 58
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9c 01       	movw	r18, r24
    1db6:	27 70       	andi	r18, 0x07	; 7
    1db8:	30 70       	andi	r19, 0x00	; 0
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	02 2e       	mov	r0, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_u8Init_PIN+0x84>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_u8Init_PIN+0x80>
    1dca:	80 95       	com	r24
    1dcc:	84 23       	and	r24, r20
    1dce:	8c 93       	st	X, r24
    1dd0:	a7 c0       	rjmp	.+334    	; 0x1f20 <DIO_u8Init_PIN+0x1de>
	                }
	                // %8 is used to return a number between 0 and 7.

	            }
	            else if(Copy_u8PinN >= DIO_PIN_NO_8 && Copy_u8PinN <= DIO_PIN_NO_15)  // PORT B
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	88 30       	cpi	r24, 0x08	; 8
    1dd6:	a8 f1       	brcs	.+106    	; 0x1e42 <DIO_u8Init_PIN+0x100>
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	80 31       	cpi	r24, 0x10	; 16
    1ddc:	90 f5       	brcc	.+100    	; 0x1e42 <DIO_u8Init_PIN+0x100>
	            {
	                if(Copy_u8Dir == DIO_OUTPUT)
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	b9 f4       	brne	.+46     	; 0x1e12 <DIO_u8Init_PIN+0xd0>
	                {
	                    // Setting the required bit in the DDRB register to 1 (output).
	                    SET_BIT(DIRECTION_PORT1, (Copy_u8PinN % 8));
    1de4:	a7 e3       	ldi	r26, 0x37	; 55
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e7 e3       	ldi	r30, 0x37	; 55
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	88 2f       	mov	r24, r24
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9c 01       	movw	r18, r24
    1df8:	27 70       	andi	r18, 0x07	; 7
    1dfa:	30 70       	andi	r19, 0x00	; 0
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	02 2e       	mov	r0, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <DIO_u8Init_PIN+0xc6>
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	0a 94       	dec	r0
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <DIO_u8Init_PIN+0xc2>
    1e0c:	84 2b       	or	r24, r20
    1e0e:	8c 93       	st	X, r24
    1e10:	87 c0       	rjmp	.+270    	; 0x1f20 <DIO_u8Init_PIN+0x1de>
	                }
	                else
	                {
	                    // Clearing the required bit in the DDRB register (input).
	                    CLEAR_BIT(DIRECTION_PORT1, (Copy_u8PinN % 8));
    1e12:	a7 e3       	ldi	r26, 0x37	; 55
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e7 e3       	ldi	r30, 0x37	; 55
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	88 2f       	mov	r24, r24
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9c 01       	movw	r18, r24
    1e26:	27 70       	andi	r18, 0x07	; 7
    1e28:	30 70       	andi	r19, 0x00	; 0
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 2e       	mov	r0, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <DIO_u8Init_PIN+0xf4>
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	0a 94       	dec	r0
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <DIO_u8Init_PIN+0xf0>
    1e3a:	80 95       	com	r24
    1e3c:	84 23       	and	r24, r20
    1e3e:	8c 93       	st	X, r24
    1e40:	6f c0       	rjmp	.+222    	; 0x1f20 <DIO_u8Init_PIN+0x1de>
	                }
	                // %8 is used to return a number between 0 and 7.
	            }
	            else if(Copy_u8PinN >= DIO_PIN_NO_16 && Copy_u8PinN <= DIO_PIN_NO_23)  // PORT C
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	80 31       	cpi	r24, 0x10	; 16
    1e46:	a8 f1       	brcs	.+106    	; 0x1eb2 <DIO_u8Init_PIN+0x170>
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	88 31       	cpi	r24, 0x18	; 24
    1e4c:	90 f5       	brcc	.+100    	; 0x1eb2 <DIO_u8Init_PIN+0x170>
	            {
	                if(Copy_u8Dir == DIO_OUTPUT)
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	81 30       	cpi	r24, 0x01	; 1
    1e52:	b9 f4       	brne	.+46     	; 0x1e82 <DIO_u8Init_PIN+0x140>
	                {
	                    // Setting the required bit in the DDRC register to 1 (output).
	                    SET_BIT(DIRECTION_PORT2, (Copy_u8PinN % 8));
    1e54:	a4 e3       	ldi	r26, 0x34	; 52
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e4 e3       	ldi	r30, 0x34	; 52
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	48 2f       	mov	r20, r24
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9c 01       	movw	r18, r24
    1e68:	27 70       	andi	r18, 0x07	; 7
    1e6a:	30 70       	andi	r19, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	02 2e       	mov	r0, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <DIO_u8Init_PIN+0x136>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <DIO_u8Init_PIN+0x132>
    1e7c:	84 2b       	or	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	4f c0       	rjmp	.+158    	; 0x1f20 <DIO_u8Init_PIN+0x1de>
	                }
	                else
	                {
	                    // Clearing the required bit in the DDRC register (input).
	                    CLEAR_BIT(DIRECTION_PORT2, (Copy_u8PinN % 8));
    1e82:	a4 e3       	ldi	r26, 0x34	; 52
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e4 e3       	ldi	r30, 0x34	; 52
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	88 2f       	mov	r24, r24
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9c 01       	movw	r18, r24
    1e96:	27 70       	andi	r18, 0x07	; 7
    1e98:	30 70       	andi	r19, 0x00	; 0
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	02 2e       	mov	r0, r18
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <DIO_u8Init_PIN+0x164>
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	0a 94       	dec	r0
    1ea8:	e2 f7       	brpl	.-8      	; 0x1ea2 <DIO_u8Init_PIN+0x160>
    1eaa:	80 95       	com	r24
    1eac:	84 23       	and	r24, r20
    1eae:	8c 93       	st	X, r24
    1eb0:	37 c0       	rjmp	.+110    	; 0x1f20 <DIO_u8Init_PIN+0x1de>
	                }
	                // %8 is used to return a number between 0 and 7.
	            }
	            else if(Copy_u8PinN >= DIO_PIN_NO_24 && Copy_u8PinN <= DIO_PIN_NO_31)  // PORT D
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	88 31       	cpi	r24, 0x18	; 24
    1eb6:	a0 f1       	brcs	.+104    	; 0x1f20 <DIO_u8Init_PIN+0x1de>
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	80 32       	cpi	r24, 0x20	; 32
    1ebc:	88 f5       	brcc	.+98     	; 0x1f20 <DIO_u8Init_PIN+0x1de>
	            {
	                if(Copy_u8Dir == DIO_OUTPUT)
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	b9 f4       	brne	.+46     	; 0x1ef2 <DIO_u8Init_PIN+0x1b0>
	                {
	                    // Setting the required bit in the DDRD register to 1 (output).
	                    SET_BIT(DIRECTION_PORT3, (Copy_u8PinN % 8));
    1ec4:	a1 e3       	ldi	r26, 0x31	; 49
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e1 e3       	ldi	r30, 0x31	; 49
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	48 2f       	mov	r20, r24
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9c 01       	movw	r18, r24
    1ed8:	27 70       	andi	r18, 0x07	; 7
    1eda:	30 70       	andi	r19, 0x00	; 0
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	02 2e       	mov	r0, r18
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <DIO_u8Init_PIN+0x1a6>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	0a 94       	dec	r0
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <DIO_u8Init_PIN+0x1a2>
    1eec:	84 2b       	or	r24, r20
    1eee:	8c 93       	st	X, r24
    1ef0:	17 c0       	rjmp	.+46     	; 0x1f20 <DIO_u8Init_PIN+0x1de>
	                }
	                else
	                {
	                    // Clearing the required bit in the DDRD register (input).
	                    CLEAR_BIT(DIRECTION_PORT3, (Copy_u8PinN % 8));
    1ef2:	a1 e3       	ldi	r26, 0x31	; 49
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e1 e3       	ldi	r30, 0x31	; 49
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	48 2f       	mov	r20, r24
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	9c 01       	movw	r18, r24
    1f06:	27 70       	andi	r18, 0x07	; 7
    1f08:	30 70       	andi	r19, 0x00	; 0
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	02 2e       	mov	r0, r18
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <DIO_u8Init_PIN+0x1d4>
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	0a 94       	dec	r0
    1f18:	e2 f7       	brpl	.-8      	; 0x1f12 <DIO_u8Init_PIN+0x1d0>
    1f1a:	80 95       	com	r24
    1f1c:	84 23       	and	r24, r20
    1f1e:	8c 93       	st	X, r24
	                }
	                // %8 is used to return a number between 0 and 7.
	            }

	            return NO_ERROR;
    1f20:	1b 82       	std	Y+3, r1	; 0x03
    1f22:	05 c0       	rjmp	.+10     	; 0x1f2e <DIO_u8Init_PIN+0x1ec>
	        }
	        else
	        {
	            return ERROR;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	8b 83       	std	Y+3, r24	; 0x03
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <DIO_u8Init_PIN+0x1ec>
	        }
	    }
	    else
	    {
	        return ERROR;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	8b 83       	std	Y+3, r24	; 0x03
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
	    }



}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <DIO_u8SetPortValue>:
/*Description: Set PORT Value (from 0 to 255)
 * Input     : Copy_u8PortNB (PORT Number) , Copy_u8Value (Value)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPortValue(uint8_t Copy_u8PortNB,uint8_t Copy_u8Value)
{ //  yasmeen
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <DIO_u8SetPortValue+0x6>
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <DIO_u8SetPortValue+0x8>
    1f44:	0f 92       	push	r0
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	switch(Copy_u8PortNB)
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	3d 83       	std	Y+5, r19	; 0x05
    1f56:	2c 83       	std	Y+4, r18	; 0x04
    1f58:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	91 05       	cpc	r25, r1
    1f60:	d9 f0       	breq	.+54     	; 0x1f98 <DIO_u8SetPortValue+0x5c>
    1f62:	2c 81       	ldd	r18, Y+4	; 0x04
    1f64:	3d 81       	ldd	r19, Y+5	; 0x05
    1f66:	22 30       	cpi	r18, 0x02	; 2
    1f68:	31 05       	cpc	r19, r1
    1f6a:	2c f4       	brge	.+10     	; 0x1f76 <DIO_u8SetPortValue+0x3a>
    1f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	61 f0       	breq	.+24     	; 0x1f8c <DIO_u8SetPortValue+0x50>
    1f74:	23 c0       	rjmp	.+70     	; 0x1fbc <DIO_u8SetPortValue+0x80>
    1f76:	2c 81       	ldd	r18, Y+4	; 0x04
    1f78:	3d 81       	ldd	r19, Y+5	; 0x05
    1f7a:	22 30       	cpi	r18, 0x02	; 2
    1f7c:	31 05       	cpc	r19, r1
    1f7e:	91 f0       	breq	.+36     	; 0x1fa4 <DIO_u8SetPortValue+0x68>
    1f80:	8c 81       	ldd	r24, Y+4	; 0x04
    1f82:	9d 81       	ldd	r25, Y+5	; 0x05
    1f84:	83 30       	cpi	r24, 0x03	; 3
    1f86:	91 05       	cpc	r25, r1
    1f88:	99 f0       	breq	.+38     	; 0x1fb0 <DIO_u8SetPortValue+0x74>
    1f8a:	18 c0       	rjmp	.+48     	; 0x1fbc <DIO_u8SetPortValue+0x80>
		{
			case DIOA:
			{
				VALUE_PORT0 = Copy_u8Value;
    1f8c:	eb e3       	ldi	r30, 0x3B	; 59
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	80 83       	st	Z, r24
				return NO_ERROR;
    1f94:	1b 82       	std	Y+3, r1	; 0x03
    1f96:	14 c0       	rjmp	.+40     	; 0x1fc0 <DIO_u8SetPortValue+0x84>
			}
			break;
			case DIOB:
			{
				VALUE_PORT1 = Copy_u8Value;
    1f98:	e8 e3       	ldi	r30, 0x38	; 56
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	80 83       	st	Z, r24
				return NO_ERROR;
    1fa0:	1b 82       	std	Y+3, r1	; 0x03
    1fa2:	0e c0       	rjmp	.+28     	; 0x1fc0 <DIO_u8SetPortValue+0x84>
			}
			break;
			case DIOC:
			{
				VALUE_PORT2 = Copy_u8Value;
    1fa4:	e5 e3       	ldi	r30, 0x35	; 53
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	80 83       	st	Z, r24
				return NO_ERROR;
    1fac:	1b 82       	std	Y+3, r1	; 0x03
    1fae:	08 c0       	rjmp	.+16     	; 0x1fc0 <DIO_u8SetPortValue+0x84>
			}
			break;
			case DIOD:
			{
				VALUE_PORT3 = Copy_u8Value;
    1fb0:	e2 e3       	ldi	r30, 0x32	; 50
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	80 83       	st	Z, r24
				return NO_ERROR;
    1fb8:	1b 82       	std	Y+3, r1	; 0x03
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <DIO_u8SetPortValue+0x84>
			}
			break;
			default:
			 return ERROR;
    1fbc:	91 e0       	ldi	r25, 0x01	; 1
    1fbe:	9b 83       	std	Y+3, r25	; 0x03
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03


		}


}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <DIO_u8SetPinValue>:
/*Description: Set PIN Value (HIGH or LOW)
 * Input     : Copy_u8PinNB (PIN Number) , Copy_u8Value (Value)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPinValue(uint8_t Copy_u8PinN,uint8_t Copy_u8Value)
{    // Ahmed Mohamed
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <DIO_u8SetPinValue+0x6>
    1fd8:	0f 92       	push	r0
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */

	if(Copy_u8PinN>=MINIMUM_PIN_NO && Copy_u8PinN<=MAX_PIN_NO && (Copy_u8Value==DIO_HIGH || Copy_u8Value==DIO_LOW))
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	80 32       	cpi	r24, 0x20	; 32
    1fe6:	08 f0       	brcs	.+2      	; 0x1fea <DIO_u8SetPinValue+0x18>
    1fe8:	d9 c0       	rjmp	.+434    	; 0x219c <DIO_u8SetPinValue+0x1ca>
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	21 f0       	breq	.+8      	; 0x1ff8 <DIO_u8SetPinValue+0x26>
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	88 23       	and	r24, r24
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <DIO_u8SetPinValue+0x26>
    1ff6:	d2 c0       	rjmp	.+420    	; 0x219c <DIO_u8SetPinValue+0x1ca>
		{
			//incase no error occurred
			if(Copy_u8PinN >= DIO_PIN_NO_0 && Copy_u8PinN <= DIO_PIN_NO_7)
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	88 30       	cpi	r24, 0x08	; 8
    1ffc:	60 f5       	brcc	.+88     	; 0x2056 <DIO_u8SetPinValue+0x84>
			{
				//port A
				if(Copy_u8Value==DIO_HIGH)
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	81 30       	cpi	r24, 0x01	; 1
    2002:	a1 f4       	brne	.+40     	; 0x202c <DIO_u8SetPinValue+0x5a>
				{
					SET_BIT(VALUE_PORT0,Copy_u8PinN);
    2004:	ab e3       	ldi	r26, 0x3B	; 59
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	eb e3       	ldi	r30, 0x3B	; 59
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	48 2f       	mov	r20, r24
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	02 2e       	mov	r0, r18
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <DIO_u8SetPinValue+0x50>
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	0a 94       	dec	r0
    2024:	e2 f7       	brpl	.-8      	; 0x201e <DIO_u8SetPinValue+0x4c>
    2026:	84 2b       	or	r24, r20
    2028:	8c 93       	st	X, r24
    202a:	b6 c0       	rjmp	.+364    	; 0x2198 <DIO_u8SetPinValue+0x1c6>

				}
				else
				{
					CLEAR_BIT(VALUE_PORT0,Copy_u8PinN);
    202c:	ab e3       	ldi	r26, 0x3B	; 59
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	eb e3       	ldi	r30, 0x3B	; 59
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	48 2f       	mov	r20, r24
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	02 2e       	mov	r0, r18
    2044:	02 c0       	rjmp	.+4      	; 0x204a <DIO_u8SetPinValue+0x78>
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	0a 94       	dec	r0
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <DIO_u8SetPinValue+0x74>
    204e:	80 95       	com	r24
    2050:	84 23       	and	r24, r20
    2052:	8c 93       	st	X, r24
    2054:	a1 c0       	rjmp	.+322    	; 0x2198 <DIO_u8SetPinValue+0x1c6>

				}

			}
			else if(Copy_u8PinN>=DIO_PIN_NO_8 && Copy_u8PinN<=DIO_PIN_NO_15)
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	88 30       	cpi	r24, 0x08	; 8
    205a:	a8 f1       	brcs	.+106    	; 0x20c6 <DIO_u8SetPinValue+0xf4>
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	80 31       	cpi	r24, 0x10	; 16
    2060:	90 f5       	brcc	.+100    	; 0x20c6 <DIO_u8SetPinValue+0xf4>
			{
				//port B
				if(Copy_u8Value==DIO_HIGH)
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	81 30       	cpi	r24, 0x01	; 1
    2066:	b9 f4       	brne	.+46     	; 0x2096 <DIO_u8SetPinValue+0xc4>
				{
					SET_BIT(VALUE_PORT1,(Copy_u8PinN-DIO_PIN_NO_8));
    2068:	a8 e3       	ldi	r26, 0x38	; 56
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e8 e3       	ldi	r30, 0x38	; 56
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	48 2f       	mov	r20, r24
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	9c 01       	movw	r18, r24
    207c:	28 50       	subi	r18, 0x08	; 8
    207e:	30 40       	sbci	r19, 0x00	; 0
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	02 2e       	mov	r0, r18
    2086:	02 c0       	rjmp	.+4      	; 0x208c <DIO_u8SetPinValue+0xba>
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	0a 94       	dec	r0
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <DIO_u8SetPinValue+0xb6>
    2090:	84 2b       	or	r24, r20
    2092:	8c 93       	st	X, r24
    2094:	81 c0       	rjmp	.+258    	; 0x2198 <DIO_u8SetPinValue+0x1c6>

				}
				else
				{
					CLEAR_BIT(VALUE_PORT1,(Copy_u8PinN-DIO_PIN_NO_8));
    2096:	a8 e3       	ldi	r26, 0x38	; 56
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e8 e3       	ldi	r30, 0x38	; 56
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	48 2f       	mov	r20, r24
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9c 01       	movw	r18, r24
    20aa:	28 50       	subi	r18, 0x08	; 8
    20ac:	30 40       	sbci	r19, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 2e       	mov	r0, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <DIO_u8SetPinValue+0xe8>
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	0a 94       	dec	r0
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <DIO_u8SetPinValue+0xe4>
    20be:	80 95       	com	r24
    20c0:	84 23       	and	r24, r20
    20c2:	8c 93       	st	X, r24
    20c4:	69 c0       	rjmp	.+210    	; 0x2198 <DIO_u8SetPinValue+0x1c6>

				}
			}
			else if(Copy_u8PinN>=DIO_PIN_NO_16 && Copy_u8PinN<=DIO_PIN_NO_23)
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	80 31       	cpi	r24, 0x10	; 16
    20ca:	a8 f1       	brcs	.+106    	; 0x2136 <DIO_u8SetPinValue+0x164>
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	88 31       	cpi	r24, 0x18	; 24
    20d0:	90 f5       	brcc	.+100    	; 0x2136 <DIO_u8SetPinValue+0x164>
			{
				//port C
				if(Copy_u8Value==DIO_HIGH)
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	b9 f4       	brne	.+46     	; 0x2106 <DIO_u8SetPinValue+0x134>
				{
					SET_BIT(VALUE_PORT2,(Copy_u8PinN-DIO_PIN_NO_16));
    20d8:	a5 e3       	ldi	r26, 0x35	; 53
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e5 e3       	ldi	r30, 0x35	; 53
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	48 2f       	mov	r20, r24
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	88 2f       	mov	r24, r24
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9c 01       	movw	r18, r24
    20ec:	20 51       	subi	r18, 0x10	; 16
    20ee:	30 40       	sbci	r19, 0x00	; 0
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	02 2e       	mov	r0, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <DIO_u8SetPinValue+0x12a>
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	0a 94       	dec	r0
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <DIO_u8SetPinValue+0x126>
    2100:	84 2b       	or	r24, r20
    2102:	8c 93       	st	X, r24
    2104:	49 c0       	rjmp	.+146    	; 0x2198 <DIO_u8SetPinValue+0x1c6>

				}
				else
				{
					CLEAR_BIT(VALUE_PORT2,(Copy_u8PinN-DIO_PIN_NO_16));
    2106:	a5 e3       	ldi	r26, 0x35	; 53
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e5 e3       	ldi	r30, 0x35	; 53
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	48 2f       	mov	r20, r24
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	88 2f       	mov	r24, r24
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9c 01       	movw	r18, r24
    211a:	20 51       	subi	r18, 0x10	; 16
    211c:	30 40       	sbci	r19, 0x00	; 0
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	02 2e       	mov	r0, r18
    2124:	02 c0       	rjmp	.+4      	; 0x212a <DIO_u8SetPinValue+0x158>
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	0a 94       	dec	r0
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <DIO_u8SetPinValue+0x154>
    212e:	80 95       	com	r24
    2130:	84 23       	and	r24, r20
    2132:	8c 93       	st	X, r24
    2134:	31 c0       	rjmp	.+98     	; 0x2198 <DIO_u8SetPinValue+0x1c6>
				}
			}
			else
			{
				//port D
				if(Copy_u8Value==DIO_HIGH)
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	81 30       	cpi	r24, 0x01	; 1
    213a:	b9 f4       	brne	.+46     	; 0x216a <DIO_u8SetPinValue+0x198>
				{
					SET_BIT(VALUE_PORT3,(Copy_u8PinN-DIO_PIN_NO_24));
    213c:	a2 e3       	ldi	r26, 0x32	; 50
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	e2 e3       	ldi	r30, 0x32	; 50
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	48 2f       	mov	r20, r24
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	88 2f       	mov	r24, r24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9c 01       	movw	r18, r24
    2150:	28 51       	subi	r18, 0x18	; 24
    2152:	30 40       	sbci	r19, 0x00	; 0
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	02 2e       	mov	r0, r18
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <DIO_u8SetPinValue+0x18e>
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	0a 94       	dec	r0
    2162:	e2 f7       	brpl	.-8      	; 0x215c <DIO_u8SetPinValue+0x18a>
    2164:	84 2b       	or	r24, r20
    2166:	8c 93       	st	X, r24
    2168:	17 c0       	rjmp	.+46     	; 0x2198 <DIO_u8SetPinValue+0x1c6>

				}
				else
				{
					CLEAR_BIT(VALUE_PORT3,(Copy_u8PinN-DIO_PIN_NO_24));
    216a:	a2 e3       	ldi	r26, 0x32	; 50
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	e2 e3       	ldi	r30, 0x32	; 50
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	48 2f       	mov	r20, r24
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9c 01       	movw	r18, r24
    217e:	28 51       	subi	r18, 0x18	; 24
    2180:	30 40       	sbci	r19, 0x00	; 0
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	02 2e       	mov	r0, r18
    2188:	02 c0       	rjmp	.+4      	; 0x218e <DIO_u8SetPinValue+0x1bc>
    218a:	88 0f       	add	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	0a 94       	dec	r0
    2190:	e2 f7       	brpl	.-8      	; 0x218a <DIO_u8SetPinValue+0x1b8>
    2192:	80 95       	com	r24
    2194:	84 23       	and	r24, r20
    2196:	8c 93       	st	X, r24

				}
			}

			return NO_ERROR;
    2198:	1b 82       	std	Y+3, r1	; 0x03
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <DIO_u8SetPinValue+0x1ce>
		}
		else
		{
			//incase an error occurred
			return ERROR;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	8b 83       	std	Y+3, r24	; 0x03
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
		}

}
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <DIO_u8GetPortValue>:
/*Description: Get PORT Value
 * Input     :  Copy_u8PortNB (PORT Number),*Copy_u8Value (Pointer to send value to it)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8GetPortValue(uint8_t Copy_u8PortNB,uint8_t *Copy_u8Value)
{  // HANA
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <DIO_u8GetPortValue+0x6>
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <DIO_u8GetPortValue+0x8>
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <DIO_u8GetPortValue+0xa>
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	7b 83       	std	Y+3, r23	; 0x03
    21c0:	6a 83       	std	Y+2, r22	; 0x02

	/* Implement Your Code */
	if ( (Copy_u8Value == NULL) ||	(Copy_u8PortNB > 3) ||	(Copy_u8PortNB < 0))
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	9b 81       	ldd	r25, Y+3	; 0x03
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	19 f0       	breq	.+6      	; 0x21d0 <DIO_u8GetPortValue+0x22>
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	84 30       	cpi	r24, 0x04	; 4
    21ce:	18 f0       	brcs	.+6      	; 0x21d6 <DIO_u8GetPortValue+0x28>
	  {
	   return ERROR;
    21d0:	21 e0       	ldi	r18, 0x01	; 1
    21d2:	2e 83       	std	Y+6, r18	; 0x06
    21d4:	41 c0       	rjmp	.+130    	; 0x2258 <DIO_u8GetPortValue+0xaa>
	  }
	  else
	  {
	    switch(Copy_u8PortNB)
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	3d 83       	std	Y+5, r19	; 0x05
    21de:	2c 83       	std	Y+4, r18	; 0x04
    21e0:	8c 81       	ldd	r24, Y+4	; 0x04
    21e2:	9d 81       	ldd	r25, Y+5	; 0x05
    21e4:	81 30       	cpi	r24, 0x01	; 1
    21e6:	91 05       	cpc	r25, r1
    21e8:	e9 f0       	breq	.+58     	; 0x2224 <DIO_u8GetPortValue+0x76>
    21ea:	2c 81       	ldd	r18, Y+4	; 0x04
    21ec:	3d 81       	ldd	r19, Y+5	; 0x05
    21ee:	22 30       	cpi	r18, 0x02	; 2
    21f0:	31 05       	cpc	r19, r1
    21f2:	2c f4       	brge	.+10     	; 0x21fe <DIO_u8GetPortValue+0x50>
    21f4:	8c 81       	ldd	r24, Y+4	; 0x04
    21f6:	9d 81       	ldd	r25, Y+5	; 0x05
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	61 f0       	breq	.+24     	; 0x2214 <DIO_u8GetPortValue+0x66>
    21fc:	2b c0       	rjmp	.+86     	; 0x2254 <DIO_u8GetPortValue+0xa6>
    21fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2200:	3d 81       	ldd	r19, Y+5	; 0x05
    2202:	22 30       	cpi	r18, 0x02	; 2
    2204:	31 05       	cpc	r19, r1
    2206:	b1 f0       	breq	.+44     	; 0x2234 <DIO_u8GetPortValue+0x86>
    2208:	8c 81       	ldd	r24, Y+4	; 0x04
    220a:	9d 81       	ldd	r25, Y+5	; 0x05
    220c:	83 30       	cpi	r24, 0x03	; 3
    220e:	91 05       	cpc	r25, r1
    2210:	c9 f0       	breq	.+50     	; 0x2244 <DIO_u8GetPortValue+0x96>
    2212:	20 c0       	rjmp	.+64     	; 0x2254 <DIO_u8GetPortValue+0xa6>
	    {
	     case DIOA:
		 {
			 *Copy_u8Value=READ_PORT0;   //*PORTA is assigned the number 0
    2214:	e9 e3       	ldi	r30, 0x39	; 57
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	ea 81       	ldd	r30, Y+2	; 0x02
    221c:	fb 81       	ldd	r31, Y+3	; 0x03
    221e:	80 83       	st	Z, r24
	          return NO_ERROR;
    2220:	1e 82       	std	Y+6, r1	; 0x06
    2222:	1a c0       	rjmp	.+52     	; 0x2258 <DIO_u8GetPortValue+0xaa>
		 }
		 break;

	     case DIOB:
		 {
			 *Copy_u8Value=READ_PORT1;   //*PORTB is assigned the number 1
    2224:	e6 e3       	ldi	r30, 0x36	; 54
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	ea 81       	ldd	r30, Y+2	; 0x02
    222c:	fb 81       	ldd	r31, Y+3	; 0x03
    222e:	80 83       	st	Z, r24
			 return NO_ERROR;
    2230:	1e 82       	std	Y+6, r1	; 0x06
    2232:	12 c0       	rjmp	.+36     	; 0x2258 <DIO_u8GetPortValue+0xaa>

		 }
		 break;

	     case DIOC:
		 {        *Copy_u8Value=READ_PORT2;   //*PORTC is assigned the number 2
    2234:	e3 e3       	ldi	r30, 0x33	; 51
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	ea 81       	ldd	r30, Y+2	; 0x02
    223c:	fb 81       	ldd	r31, Y+3	; 0x03
    223e:	80 83       	st	Z, r24
	              return NO_ERROR;
    2240:	1e 82       	std	Y+6, r1	; 0x06
    2242:	0a c0       	rjmp	.+20     	; 0x2258 <DIO_u8GetPortValue+0xaa>
		 }
		 break;

	     case DIOD:
		 {
				*Copy_u8Value=READ_PORT3;   //*PORTD is assigned the number 3
    2244:	e0 e3       	ldi	r30, 0x30	; 48
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	ea 81       	ldd	r30, Y+2	; 0x02
    224c:	fb 81       	ldd	r31, Y+3	; 0x03
    224e:	80 83       	st	Z, r24
	              return NO_ERROR;
    2250:	1e 82       	std	Y+6, r1	; 0x06
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <DIO_u8GetPortValue+0xaa>
		 }
		 break;
		 default:  return ERROR;  break;
    2254:	91 e0       	ldi	r25, 0x01	; 1
    2256:	9e 83       	std	Y+6, r25	; 0x06
    2258:	8e 81       	ldd	r24, Y+6	; 0x06
	    }
	  }


}
    225a:	26 96       	adiw	r28, 0x06	; 6
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <DIO_u8GetPinValue>:
/*Description: Get PIN Value (HIGH or LOW)
 * Input     : Copy_u8PinN (PIN Number) ,*Copy_u8Value (Pointer to send value to it)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8GetPinValue(uint8_t Copy_u8PinN,uint8_t *Copy_u8Value)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	00 d0       	rcall	.+0      	; 0x2272 <DIO_u8GetPinValue+0x6>
    2272:	00 d0       	rcall	.+0      	; 0x2274 <DIO_u8GetPinValue+0x8>
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	7b 83       	std	Y+3, r23	; 0x03
    227c:	6a 83       	std	Y+2, r22	; 0x02
	// AHMED MOSTAFA



	/* Implement Your Code */
	if((Copy_u8PinN>= MINIMUM_PIN_NO) && (Copy_u8PinN< TOTAL_NO_OF_PINS)){
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	80 32       	cpi	r24, 0x20	; 32
    2282:	08 f0       	brcs	.+2      	; 0x2286 <DIO_u8GetPinValue+0x1a>
    2284:	74 c0       	rjmp	.+232    	; 0x236e <DIO_u8GetPinValue+0x102>
		//port A
		if((Copy_u8PinN>=DIO_PIN_NO_0) && (Copy_u8PinN<=DIO_PIN_NO_7)){
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	88 30       	cpi	r24, 0x08	; 8
    228a:	b8 f4       	brcc	.+46     	; 0x22ba <DIO_u8GetPinValue+0x4e>

				*Copy_u8Value=GET_BIT(READ_PORT0,(Copy_u8PinN%8));
    228c:	e9 e3       	ldi	r30, 0x39	; 57
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	87 70       	andi	r24, 0x07	; 7
    229e:	90 70       	andi	r25, 0x00	; 0
    22a0:	a9 01       	movw	r20, r18
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <DIO_u8GetPinValue+0x3c>
    22a4:	55 95       	asr	r21
    22a6:	47 95       	ror	r20
    22a8:	8a 95       	dec	r24
    22aa:	e2 f7       	brpl	.-8      	; 0x22a4 <DIO_u8GetPinValue+0x38>
    22ac:	ca 01       	movw	r24, r20
    22ae:	81 70       	andi	r24, 0x01	; 1
    22b0:	ea 81       	ldd	r30, Y+2	; 0x02
    22b2:	fb 81       	ldd	r31, Y+3	; 0x03
    22b4:	80 83       	st	Z, r24

			return  NO_ERROR;
    22b6:	1c 82       	std	Y+4, r1	; 0x04
    22b8:	5c c0       	rjmp	.+184    	; 0x2372 <DIO_u8GetPinValue+0x106>
		}

		//port B
		else if((Copy_u8PinN>=DIO_PIN_NO_8) && (Copy_u8PinN<=DIO_PIN_NO_15)){
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	88 30       	cpi	r24, 0x08	; 8
    22be:	d0 f0       	brcs	.+52     	; 0x22f4 <DIO_u8GetPinValue+0x88>
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	80 31       	cpi	r24, 0x10	; 16
    22c4:	b8 f4       	brcc	.+46     	; 0x22f4 <DIO_u8GetPinValue+0x88>

			*Copy_u8Value=GET_BIT(READ_PORT1,(Copy_u8PinN%8));
    22c6:	e6 e3       	ldi	r30, 0x36	; 54
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	87 70       	andi	r24, 0x07	; 7
    22d8:	90 70       	andi	r25, 0x00	; 0
    22da:	a9 01       	movw	r20, r18
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <DIO_u8GetPinValue+0x76>
    22de:	55 95       	asr	r21
    22e0:	47 95       	ror	r20
    22e2:	8a 95       	dec	r24
    22e4:	e2 f7       	brpl	.-8      	; 0x22de <DIO_u8GetPinValue+0x72>
    22e6:	ca 01       	movw	r24, r20
    22e8:	81 70       	andi	r24, 0x01	; 1
    22ea:	ea 81       	ldd	r30, Y+2	; 0x02
    22ec:	fb 81       	ldd	r31, Y+3	; 0x03
    22ee:	80 83       	st	Z, r24

			return  NO_ERROR;
    22f0:	1c 82       	std	Y+4, r1	; 0x04
    22f2:	3f c0       	rjmp	.+126    	; 0x2372 <DIO_u8GetPinValue+0x106>
				}

		//port C
		else if((Copy_u8PinN>=DIO_PIN_NO_16) && (Copy_u8PinN<=DIO_PIN_NO_23)){
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	80 31       	cpi	r24, 0x10	; 16
    22f8:	d0 f0       	brcs	.+52     	; 0x232e <DIO_u8GetPinValue+0xc2>
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	88 31       	cpi	r24, 0x18	; 24
    22fe:	b8 f4       	brcc	.+46     	; 0x232e <DIO_u8GetPinValue+0xc2>

			*Copy_u8Value=GET_BIT(READ_PORT2,(Copy_u8PinN%8));
    2300:	e3 e3       	ldi	r30, 0x33	; 51
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	88 2f       	mov	r24, r24
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	87 70       	andi	r24, 0x07	; 7
    2312:	90 70       	andi	r25, 0x00	; 0
    2314:	a9 01       	movw	r20, r18
    2316:	02 c0       	rjmp	.+4      	; 0x231c <DIO_u8GetPinValue+0xb0>
    2318:	55 95       	asr	r21
    231a:	47 95       	ror	r20
    231c:	8a 95       	dec	r24
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <DIO_u8GetPinValue+0xac>
    2320:	ca 01       	movw	r24, r20
    2322:	81 70       	andi	r24, 0x01	; 1
    2324:	ea 81       	ldd	r30, Y+2	; 0x02
    2326:	fb 81       	ldd	r31, Y+3	; 0x03
    2328:	80 83       	st	Z, r24

			return  NO_ERROR;
    232a:	1c 82       	std	Y+4, r1	; 0x04
    232c:	22 c0       	rjmp	.+68     	; 0x2372 <DIO_u8GetPinValue+0x106>
			}

		//port D
		else if((Copy_u8PinN>=DIO_PIN_NO_24) && (Copy_u8PinN<=DIO_PIN_NO_31)){
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	88 31       	cpi	r24, 0x18	; 24
    2332:	d0 f0       	brcs	.+52     	; 0x2368 <DIO_u8GetPinValue+0xfc>
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	80 32       	cpi	r24, 0x20	; 32
    2338:	b8 f4       	brcc	.+46     	; 0x2368 <DIO_u8GetPinValue+0xfc>

			*Copy_u8Value=GET_BIT(READ_PORT3,(Copy_u8PinN%8));
    233a:	e0 e3       	ldi	r30, 0x30	; 48
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	87 70       	andi	r24, 0x07	; 7
    234c:	90 70       	andi	r25, 0x00	; 0
    234e:	a9 01       	movw	r20, r18
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <DIO_u8GetPinValue+0xea>
    2352:	55 95       	asr	r21
    2354:	47 95       	ror	r20
    2356:	8a 95       	dec	r24
    2358:	e2 f7       	brpl	.-8      	; 0x2352 <DIO_u8GetPinValue+0xe6>
    235a:	ca 01       	movw	r24, r20
    235c:	81 70       	andi	r24, 0x01	; 1
    235e:	ea 81       	ldd	r30, Y+2	; 0x02
    2360:	fb 81       	ldd	r31, Y+3	; 0x03
    2362:	80 83       	st	Z, r24
			return  NO_ERROR;
    2364:	1c 82       	std	Y+4, r1	; 0x04
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <DIO_u8GetPinValue+0x106>
				}
		else{
			return ERROR;
    2368:	51 e0       	ldi	r21, 0x01	; 1
    236a:	5c 83       	std	Y+4, r21	; 0x04
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <DIO_u8GetPinValue+0x106>
		}

	}
	else{

		return ERROR;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	8c 83       	std	Y+4, r24	; 0x04
    2372:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <DIO_u8SetPortInputType>:
/*Description: Set PORT Type in case of INPUT Direction (PULL UP or FLOATING)
 * Input     :  Copy_u8PortNB (PORT Number),Copy_u8InputType(1 for PULL UP and 0 for FLOATING)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPortInputType(uint8_t Copy_u8PortNB,uint8_t Copy_u8InputType)
{  // AHMED MOSTAFA
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <DIO_u8SetPortInputType+0x6>
    2388:	0f 92       	push	r0
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	if(Copy_u8PortNB==DIOA){
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	88 23       	and	r24, r24
    2396:	79 f4       	brne	.+30     	; 0x23b6 <DIO_u8SetPortInputType+0x34>
		//PORT A
		if(Copy_u8InputType>=1){
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	88 23       	and	r24, r24
    239c:	49 f0       	breq	.+18     	; 0x23b0 <DIO_u8SetPortInputType+0x2e>

			DIRECTION_PORT0= DIO_INPUT;
    239e:	ea e3       	ldi	r30, 0x3A	; 58
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	10 82       	st	Z, r1
			VALUE_PORT0=Copy_u8InputType;
    23a4:	eb e3       	ldi	r30, 0x3B	; 59
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	8a 81       	ldd	r24, Y+2	; 0x02
    23aa:	80 83       	st	Z, r24
			return NO_ERROR;
    23ac:	1b 82       	std	Y+3, r1	; 0x03
    23ae:	3b c0       	rjmp	.+118    	; 0x2426 <DIO_u8SetPortInputType+0xa4>
		}
		else{
			return ERROR;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	8b 83       	std	Y+3, r24	; 0x03
    23b4:	38 c0       	rjmp	.+112    	; 0x2426 <DIO_u8SetPortInputType+0xa4>
		}}

	//PORT B
	else if(Copy_u8PortNB==DIOB){
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	79 f4       	brne	.+30     	; 0x23da <DIO_u8SetPortInputType+0x58>
		if(Copy_u8InputType>=1){
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	88 23       	and	r24, r24
    23c0:	49 f0       	breq	.+18     	; 0x23d4 <DIO_u8SetPortInputType+0x52>

			DIRECTION_PORT1= DIO_INPUT;
    23c2:	e7 e3       	ldi	r30, 0x37	; 55
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	10 82       	st	Z, r1
			VALUE_PORT1=Copy_u8InputType;
    23c8:	e8 e3       	ldi	r30, 0x38	; 56
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	80 83       	st	Z, r24
			return NO_ERROR;
    23d0:	1b 82       	std	Y+3, r1	; 0x03
    23d2:	29 c0       	rjmp	.+82     	; 0x2426 <DIO_u8SetPortInputType+0xa4>
			}
			else{
				return ERROR;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	8b 83       	std	Y+3, r24	; 0x03
    23d8:	26 c0       	rjmp	.+76     	; 0x2426 <DIO_u8SetPortInputType+0xa4>
				}}
	//PORT C
	else if(Copy_u8PortNB==DIOC){
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	82 30       	cpi	r24, 0x02	; 2
    23de:	79 f4       	brne	.+30     	; 0x23fe <DIO_u8SetPortInputType+0x7c>
		if(Copy_u8InputType>=1){
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	88 23       	and	r24, r24
    23e4:	49 f0       	breq	.+18     	; 0x23f8 <DIO_u8SetPortInputType+0x76>

			DIRECTION_PORT2= DIO_INPUT;
    23e6:	e4 e3       	ldi	r30, 0x34	; 52
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	10 82       	st	Z, r1
			VALUE_PORT2=Copy_u8InputType;
    23ec:	e5 e3       	ldi	r30, 0x35	; 53
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	80 83       	st	Z, r24
			return NO_ERROR;
    23f4:	1b 82       	std	Y+3, r1	; 0x03
    23f6:	17 c0       	rjmp	.+46     	; 0x2426 <DIO_u8SetPortInputType+0xa4>
			}
			else{
			return ERROR;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	8b 83       	std	Y+3, r24	; 0x03
    23fc:	14 c0       	rjmp	.+40     	; 0x2426 <DIO_u8SetPortInputType+0xa4>
				}}
	//PORT D
	else if(Copy_u8PortNB==DIOD){
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	83 30       	cpi	r24, 0x03	; 3
    2402:	79 f4       	brne	.+30     	; 0x2422 <DIO_u8SetPortInputType+0xa0>
		if(Copy_u8InputType>=1){
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	88 23       	and	r24, r24
    2408:	49 f0       	breq	.+18     	; 0x241c <DIO_u8SetPortInputType+0x9a>

			DIRECTION_PORT3= DIO_INPUT;
    240a:	e1 e3       	ldi	r30, 0x31	; 49
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	10 82       	st	Z, r1
			VALUE_PORT3=Copy_u8InputType;
    2410:	e2 e3       	ldi	r30, 0x32	; 50
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	80 83       	st	Z, r24
			return NO_ERROR;
    2418:	1b 82       	std	Y+3, r1	; 0x03
    241a:	05 c0       	rjmp	.+10     	; 0x2426 <DIO_u8SetPortInputType+0xa4>
				}
			else{
			return ERROR;
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	8b 83       	std	Y+3, r24	; 0x03
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <DIO_u8SetPortInputType+0xa4>
				}

		}
	 else{
		return ERROR;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	8b 83       	std	Y+3, r24	; 0x03
    2426:	8b 81       	ldd	r24, Y+3	; 0x03

	}
}
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	cf 91       	pop	r28
    2430:	df 91       	pop	r29
    2432:	08 95       	ret

00002434 <DIO_u8SetPinInputType>:
/*Description: Set PORT Type in case of INPUT Direction (PULL UP or FLOATING)
 * Input     : Copy_u8PinN(PIN NO) ,Copy_u8InputType(1 for PULL UP and 0 for FLOATING)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPinInputType(uint8_t Copy_u8PinN,uint8_t Copy_u8InputType)
{           // YASMEEN
    2434:	df 93       	push	r29
    2436:	cf 93       	push	r28
    2438:	00 d0       	rcall	.+0      	; 0x243a <DIO_u8SetPinInputType+0x6>
    243a:	0f 92       	push	r0
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	if(Copy_u8PinN <= MAX_PIN_NO)
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	80 32       	cpi	r24, 0x20	; 32
    2448:	08 f0       	brcs	.+2      	; 0x244c <DIO_u8SetPinInputType+0x18>
    244a:	e4 c0       	rjmp	.+456    	; 0x2614 <DIO_u8SetPinInputType+0x1e0>
		{
			if(Copy_u8PinN / 8 == 0)  // in PORTA
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	88 30       	cpi	r24, 0x08	; 8
    2450:	a0 f5       	brcc	.+104    	; 0x24ba <DIO_u8SetPinInputType+0x86>
			{
				if( Copy_u8InputType == PULL_UP)
    2452:	8a 81       	ldd	r24, Y+2	; 0x02
    2454:	81 30       	cpi	r24, 0x01	; 1
    2456:	a9 f4       	brne	.+42     	; 0x2482 <DIO_u8SetPinInputType+0x4e>
				{
					SET_BIT(VALUE_PORT0,Copy_u8PinN);    //Enable PULL_UP
    2458:	ab e3       	ldi	r26, 0x3B	; 59
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	eb e3       	ldi	r30, 0x3B	; 59
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	48 2f       	mov	r20, r24
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	02 2e       	mov	r0, r18
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <DIO_u8SetPinInputType+0x42>
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	0a 94       	dec	r0
    2478:	e2 f7       	brpl	.-8      	; 0x2472 <DIO_u8SetPinInputType+0x3e>
    247a:	84 2b       	or	r24, r20
    247c:	8c 93       	st	X, r24
					return NO_ERROR;
    247e:	1b 82       	std	Y+3, r1	; 0x03
    2480:	cb c0       	rjmp	.+406    	; 0x2618 <DIO_u8SetPinInputType+0x1e4>
				}
				else if( Copy_u8InputType == FLOATING)
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	88 23       	and	r24, r24
    2486:	b1 f4       	brne	.+44     	; 0x24b4 <DIO_u8SetPinInputType+0x80>
				{
					CLEAR_BIT(VALUE_PORT0 ,Copy_u8PinN);     //Disable PULL_UP
    2488:	ab e3       	ldi	r26, 0x3B	; 59
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	eb e3       	ldi	r30, 0x3B	; 59
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	48 2f       	mov	r20, r24
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	28 2f       	mov	r18, r24
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	02 2e       	mov	r0, r18
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <DIO_u8SetPinInputType+0x72>
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	0a 94       	dec	r0
    24a8:	e2 f7       	brpl	.-8      	; 0x24a2 <DIO_u8SetPinInputType+0x6e>
    24aa:	80 95       	com	r24
    24ac:	84 23       	and	r24, r20
    24ae:	8c 93       	st	X, r24
					return NO_ERROR;
    24b0:	1b 82       	std	Y+3, r1	; 0x03
    24b2:	b2 c0       	rjmp	.+356    	; 0x2618 <DIO_u8SetPinInputType+0x1e4>
				}
				else
				{
					return ERROR;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	8b 83       	std	Y+3, r24	; 0x03
    24b8:	af c0       	rjmp	.+350    	; 0x2618 <DIO_u8SetPinInputType+0x1e4>
				}
			}
			else if(Copy_u8PinN / 8 == 1)  // PORTB
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	88 50       	subi	r24, 0x08	; 8
    24be:	88 30       	cpi	r24, 0x08	; 8
    24c0:	b8 f5       	brcc	.+110    	; 0x2530 <DIO_u8SetPinInputType+0xfc>
			{
			     Copy_u8PinN-=8;
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	88 50       	subi	r24, 0x08	; 8
    24c6:	89 83       	std	Y+1, r24	; 0x01
				if( Copy_u8InputType == PULL_UP)
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	81 30       	cpi	r24, 0x01	; 1
    24cc:	a9 f4       	brne	.+42     	; 0x24f8 <DIO_u8SetPinInputType+0xc4>
				{
					SET_BIT(VALUE_PORT1,Copy_u8PinN);		//Enable PULL_UP
    24ce:	a8 e3       	ldi	r26, 0x38	; 56
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e8 e3       	ldi	r30, 0x38	; 56
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	48 2f       	mov	r20, r24
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	02 2e       	mov	r0, r18
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <DIO_u8SetPinInputType+0xb8>
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	0a 94       	dec	r0
    24ee:	e2 f7       	brpl	.-8      	; 0x24e8 <DIO_u8SetPinInputType+0xb4>
    24f0:	84 2b       	or	r24, r20
    24f2:	8c 93       	st	X, r24
					return NO_ERROR;
    24f4:	1b 82       	std	Y+3, r1	; 0x03
    24f6:	90 c0       	rjmp	.+288    	; 0x2618 <DIO_u8SetPinInputType+0x1e4>
				}
				else if( Copy_u8InputType == FLOATING)
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	88 23       	and	r24, r24
    24fc:	b1 f4       	brne	.+44     	; 0x252a <DIO_u8SetPinInputType+0xf6>
				{
					CLEAR_BIT(VALUE_PORT1 ,Copy_u8PinN);		//Disable PULL_UP
    24fe:	a8 e3       	ldi	r26, 0x38	; 56
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e8 e3       	ldi	r30, 0x38	; 56
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	48 2f       	mov	r20, r24
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	02 2e       	mov	r0, r18
    2516:	02 c0       	rjmp	.+4      	; 0x251c <DIO_u8SetPinInputType+0xe8>
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	0a 94       	dec	r0
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <DIO_u8SetPinInputType+0xe4>
    2520:	80 95       	com	r24
    2522:	84 23       	and	r24, r20
    2524:	8c 93       	st	X, r24
					return NO_ERROR;
    2526:	1b 82       	std	Y+3, r1	; 0x03
    2528:	77 c0       	rjmp	.+238    	; 0x2618 <DIO_u8SetPinInputType+0x1e4>
				}
				else
				{
					return ERROR;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	8b 83       	std	Y+3, r24	; 0x03
    252e:	74 c0       	rjmp	.+232    	; 0x2618 <DIO_u8SetPinInputType+0x1e4>
				}
			}
			else if(Copy_u8PinN / 8 == 2)  // PORTC
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	80 51       	subi	r24, 0x10	; 16
    2534:	88 30       	cpi	r24, 0x08	; 8
    2536:	b8 f5       	brcc	.+110    	; 0x25a6 <DIO_u8SetPinInputType+0x172>
			{
			     Copy_u8PinN -=16;
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	80 51       	subi	r24, 0x10	; 16
    253c:	89 83       	std	Y+1, r24	; 0x01
				if( Copy_u8InputType == PULL_UP)
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	81 30       	cpi	r24, 0x01	; 1
    2542:	a9 f4       	brne	.+42     	; 0x256e <DIO_u8SetPinInputType+0x13a>
				{
					SET_BIT(VALUE_PORT2,Copy_u8PinN);		//Enable PULL_UP
    2544:	a5 e3       	ldi	r26, 0x35	; 53
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	e5 e3       	ldi	r30, 0x35	; 53
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	48 2f       	mov	r20, r24
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	02 2e       	mov	r0, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <DIO_u8SetPinInputType+0x12e>
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	0a 94       	dec	r0
    2564:	e2 f7       	brpl	.-8      	; 0x255e <DIO_u8SetPinInputType+0x12a>
    2566:	84 2b       	or	r24, r20
    2568:	8c 93       	st	X, r24
					return NO_ERROR;
    256a:	1b 82       	std	Y+3, r1	; 0x03
    256c:	55 c0       	rjmp	.+170    	; 0x2618 <DIO_u8SetPinInputType+0x1e4>
				}
				else if( Copy_u8InputType == FLOATING)
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	88 23       	and	r24, r24
    2572:	b1 f4       	brne	.+44     	; 0x25a0 <DIO_u8SetPinInputType+0x16c>
				{
					CLEAR_BIT(VALUE_PORT2 ,Copy_u8PinN);		//Disable PULL_UP
    2574:	a5 e3       	ldi	r26, 0x35	; 53
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	e5 e3       	ldi	r30, 0x35	; 53
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	48 2f       	mov	r20, r24
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	28 2f       	mov	r18, r24
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	02 2e       	mov	r0, r18
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <DIO_u8SetPinInputType+0x15e>
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	0a 94       	dec	r0
    2594:	e2 f7       	brpl	.-8      	; 0x258e <DIO_u8SetPinInputType+0x15a>
    2596:	80 95       	com	r24
    2598:	84 23       	and	r24, r20
    259a:	8c 93       	st	X, r24
					return NO_ERROR;
    259c:	1b 82       	std	Y+3, r1	; 0x03
    259e:	3c c0       	rjmp	.+120    	; 0x2618 <DIO_u8SetPinInputType+0x1e4>
				}
				else
				{
					return ERROR;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	8b 83       	std	Y+3, r24	; 0x03
    25a4:	39 c0       	rjmp	.+114    	; 0x2618 <DIO_u8SetPinInputType+0x1e4>
				}
			}
			else  // PORTD
			{
				Copy_u8PinN -=24;
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	88 51       	subi	r24, 0x18	; 24
    25aa:	89 83       	std	Y+1, r24	; 0x01
				if( Copy_u8InputType == PULL_UP)
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	a9 f4       	brne	.+42     	; 0x25dc <DIO_u8SetPinInputType+0x1a8>
				{
					SET_BIT(VALUE_PORT3,Copy_u8PinN);      //Enable PULL_UP
    25b2:	a2 e3       	ldi	r26, 0x32	; 50
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e2 e3       	ldi	r30, 0x32	; 50
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	48 2f       	mov	r20, r24
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	02 2e       	mov	r0, r18
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <DIO_u8SetPinInputType+0x19c>
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	0a 94       	dec	r0
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <DIO_u8SetPinInputType+0x198>
    25d4:	84 2b       	or	r24, r20
    25d6:	8c 93       	st	X, r24
					return NO_ERROR;
    25d8:	1b 82       	std	Y+3, r1	; 0x03
    25da:	1e c0       	rjmp	.+60     	; 0x2618 <DIO_u8SetPinInputType+0x1e4>
				}
				else if( Copy_u8InputType == FLOATING)
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	88 23       	and	r24, r24
    25e0:	b1 f4       	brne	.+44     	; 0x260e <DIO_u8SetPinInputType+0x1da>
				{
					CLEAR_BIT(VALUE_PORT3 ,Copy_u8PinN);   //Disable PULL_UP
    25e2:	a2 e3       	ldi	r26, 0x32	; 50
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e2 e3       	ldi	r30, 0x32	; 50
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	48 2f       	mov	r20, r24
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	02 2e       	mov	r0, r18
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <DIO_u8SetPinInputType+0x1cc>
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	0a 94       	dec	r0
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <DIO_u8SetPinInputType+0x1c8>
    2604:	80 95       	com	r24
    2606:	84 23       	and	r24, r20
    2608:	8c 93       	st	X, r24
					return NO_ERROR;
    260a:	1b 82       	std	Y+3, r1	; 0x03
    260c:	05 c0       	rjmp	.+10     	; 0x2618 <DIO_u8SetPinInputType+0x1e4>
				}
				else
				{
					return ERROR;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	8b 83       	std	Y+3, r24	; 0x03
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <DIO_u8SetPinInputType+0x1e4>
			}

		}
		else
		{
			return ERROR;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	8b 83       	std	Y+3, r24	; 0x03
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
		}
}
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <RX_MyISR>:
#include "PWM.h"

uint8_t Recieved_Speed,*PRecieved_Speed;

void RX_MyISR (void)
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	2d 97       	sbiw	r28, 0x0d	; 13
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
	*PRecieved_Speed=USART_DATA_REGISTER_READ;
    263a:	e0 91 87 01 	lds	r30, 0x0187
    263e:	f0 91 88 01 	lds	r31, 0x0188
    2642:	ac e2       	ldi	r26, 0x2C	; 44
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	8c 91       	ld	r24, X
    2648:	80 83       	st	Z, r24
	 LCD_clearScreen();
    264a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_clearScreen>
	 uint8_t speed[] ="Speed= ";
    264e:	ae 01       	movw	r20, r28
    2650:	4f 5f       	subi	r20, 0xFF	; 255
    2652:	5f 4f       	sbci	r21, 0xFF	; 255
    2654:	5a 87       	std	Y+10, r21	; 0x0a
    2656:	49 87       	std	Y+9, r20	; 0x09
    2658:	80 e6       	ldi	r24, 0x60	; 96
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9c 87       	std	Y+12, r25	; 0x0c
    265e:	8b 87       	std	Y+11, r24	; 0x0b
    2660:	98 e0       	ldi	r25, 0x08	; 8
    2662:	9d 87       	std	Y+13, r25	; 0x0d
    2664:	eb 85       	ldd	r30, Y+11	; 0x0b
    2666:	fc 85       	ldd	r31, Y+12	; 0x0c
    2668:	00 80       	ld	r0, Z
    266a:	4b 85       	ldd	r20, Y+11	; 0x0b
    266c:	5c 85       	ldd	r21, Y+12	; 0x0c
    266e:	4f 5f       	subi	r20, 0xFF	; 255
    2670:	5f 4f       	sbci	r21, 0xFF	; 255
    2672:	5c 87       	std	Y+12, r21	; 0x0c
    2674:	4b 87       	std	Y+11, r20	; 0x0b
    2676:	e9 85       	ldd	r30, Y+9	; 0x09
    2678:	fa 85       	ldd	r31, Y+10	; 0x0a
    267a:	00 82       	st	Z, r0
    267c:	49 85       	ldd	r20, Y+9	; 0x09
    267e:	5a 85       	ldd	r21, Y+10	; 0x0a
    2680:	4f 5f       	subi	r20, 0xFF	; 255
    2682:	5f 4f       	sbci	r21, 0xFF	; 255
    2684:	5a 87       	std	Y+10, r21	; 0x0a
    2686:	49 87       	std	Y+9, r20	; 0x09
    2688:	5d 85       	ldd	r21, Y+13	; 0x0d
    268a:	51 50       	subi	r21, 0x01	; 1
    268c:	5d 87       	std	Y+13, r21	; 0x0d
    268e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2690:	88 23       	and	r24, r24
    2692:	41 f7       	brne	.-48     	; 0x2664 <RX_MyISR+0x3e>
	 LCD_displayString(speed);
    2694:	ce 01       	movw	r24, r28
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <LCD_displayString>
	 LCD_goToRowColumn(1, 8);
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	68 e0       	ldi	r22, 0x08	; 8
    26a0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_goToRowColumn>
	 LCD_integerToString((Recieved_Speed*100)/255);
    26a4:	80 91 89 01 	lds	r24, 0x0189
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	84 e6       	ldi	r24, 0x64	; 100
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	fc 01       	movw	r30, r24
    26b2:	2e 9f       	mul	r18, r30
    26b4:	c0 01       	movw	r24, r0
    26b6:	2f 9f       	mul	r18, r31
    26b8:	90 0d       	add	r25, r0
    26ba:	3e 9f       	mul	r19, r30
    26bc:	90 0d       	add	r25, r0
    26be:	11 24       	eor	r1, r1
    26c0:	2f ef       	ldi	r18, 0xFF	; 255
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	b9 01       	movw	r22, r18
    26c6:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__divmodhi4>
    26ca:	cb 01       	movw	r24, r22
    26cc:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LCD_integerToString>

}
    26d0:	2d 96       	adiw	r28, 0x0d	; 13
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <main>:


int main()

{
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	6b 97       	sbiw	r28, 0x1b	; 27
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61

	PRecieved_Speed=&Recieved_Speed;
    26f6:	89 e8       	ldi	r24, 0x89	; 137
    26f8:	91 e0       	ldi	r25, 0x01	; 1
    26fa:	90 93 88 01 	sts	0x0188, r25
    26fe:	80 93 87 01 	sts	0x0187, r24

	//UART Initialization
	str_UartConfg_t *UART1,uart1;
	UART1=&uart1;
    2702:	ce 01       	movw	r24, r28
    2704:	05 96       	adiw	r24, 0x05	; 5
    2706:	9c 83       	std	Y+4, r25	; 0x04
    2708:	8b 83       	std	Y+3, r24	; 0x03
	UART1->u32_BaudRate=9600;
    270a:	eb 81       	ldd	r30, Y+3	; 0x03
    270c:	fc 81       	ldd	r31, Y+4	; 0x04
    270e:	80 e8       	ldi	r24, 0x80	; 128
    2710:	95 e2       	ldi	r25, 0x25	; 37
    2712:	a0 e0       	ldi	r26, 0x00	; 0
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	80 83       	st	Z, r24
    2718:	91 83       	std	Z+1, r25	; 0x01
    271a:	a2 83       	std	Z+2, r26	; 0x02
    271c:	b3 83       	std	Z+3, r27	; 0x03
	UART1->u8_DataBits=UART_8_BIT_MODE;
    271e:	eb 81       	ldd	r30, Y+3	; 0x03
    2720:	fc 81       	ldd	r31, Y+4	; 0x04
    2722:	83 e0       	ldi	r24, 0x03	; 3
    2724:	84 83       	std	Z+4, r24	; 0x04
	UART1->u8_FlagAction=UART_INTERRUPT;
    2726:	eb 81       	ldd	r30, Y+3	; 0x03
    2728:	fc 81       	ldd	r31, Y+4	; 0x04
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	85 83       	std	Z+5, r24	; 0x05
	UART_init(UART1);
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	9c 81       	ldd	r25, Y+4	; 0x04
    2732:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <UART_init>

	/* PWM Initialization */
	Str_TimerConfiguration_t *timer0 ,Timer0;
	timer0 = &Timer0;
    2736:	ce 01       	movw	r24, r28
    2738:	0b 96       	adiw	r24, 0x0b	; 11
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01
	Timer0.Interrupt_Mode = POLLING;
    273e:	1e 86       	std	Y+14, r1	; 0x0e
	Timer0.Timer_Channel = TIMER0;
    2740:	1b 86       	std	Y+11, r1	; 0x0b
	Timer0.Timer_Mode = TIMER_MODE;
    2742:	1d 86       	std	Y+13, r1	; 0x0d
	Timer0.Timer_Psc = F_CPU_CLOCK_1024_TIMER_0;
    2744:	85 e0       	ldi	r24, 0x05	; 5
    2746:	8c 87       	std	Y+12, r24	; 0x0c
	PWM_void_Init(timer0);
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	9a 81       	ldd	r25, Y+2	; 0x02
    274c:	0e 94 13 0c 	call	0x1826	; 0x1826 <PWM_void_Init>

	/* Enable Global Interrupt */
	sei();
    2750:	78 94       	sei
	UART_RX_SetCallBack(RX_MyISR);
    2752:	83 e1       	ldi	r24, 0x13	; 19
    2754:	93 e1       	ldi	r25, 0x13	; 19
    2756:	0e 94 8d 07 	call	0xf1a	; 0xf1a <UART_RX_SetCallBack>
   Recieved_Speed=0x80;
    275a:	80 e8       	ldi	r24, 0x80	; 128
    275c:	80 93 89 01 	sts	0x0189, r24

	/* LCD Initialization */
	LCD_init();
    2760:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCD_init>
	uint8_t speed[] ="Speed= ";
    2764:	ae 01       	movw	r20, r28
    2766:	41 5f       	subi	r20, 0xF1	; 241
    2768:	5f 4f       	sbci	r21, 0xFF	; 255
    276a:	58 8f       	std	Y+24, r21	; 0x18
    276c:	4f 8b       	std	Y+23, r20	; 0x17
    276e:	80 e6       	ldi	r24, 0x60	; 96
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9a 8f       	std	Y+26, r25	; 0x1a
    2774:	89 8f       	std	Y+25, r24	; 0x19
    2776:	98 e0       	ldi	r25, 0x08	; 8
    2778:	9b 8f       	std	Y+27, r25	; 0x1b
    277a:	e9 8d       	ldd	r30, Y+25	; 0x19
    277c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    277e:	00 80       	ld	r0, Z
    2780:	49 8d       	ldd	r20, Y+25	; 0x19
    2782:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2784:	4f 5f       	subi	r20, 0xFF	; 255
    2786:	5f 4f       	sbci	r21, 0xFF	; 255
    2788:	5a 8f       	std	Y+26, r21	; 0x1a
    278a:	49 8f       	std	Y+25, r20	; 0x19
    278c:	ef 89       	ldd	r30, Y+23	; 0x17
    278e:	f8 8d       	ldd	r31, Y+24	; 0x18
    2790:	00 82       	st	Z, r0
    2792:	4f 89       	ldd	r20, Y+23	; 0x17
    2794:	58 8d       	ldd	r21, Y+24	; 0x18
    2796:	4f 5f       	subi	r20, 0xFF	; 255
    2798:	5f 4f       	sbci	r21, 0xFF	; 255
    279a:	58 8f       	std	Y+24, r21	; 0x18
    279c:	4f 8b       	std	Y+23, r20	; 0x17
    279e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    27a0:	51 50       	subi	r21, 0x01	; 1
    27a2:	5b 8f       	std	Y+27, r21	; 0x1b
    27a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a6:	88 23       	and	r24, r24
    27a8:	41 f7       	brne	.-48     	; 0x277a <main+0x98>
	LCD_displayString(speed);
    27aa:	ce 01       	movw	r24, r28
    27ac:	0f 96       	adiw	r24, 0x0f	; 15
    27ae:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <LCD_displayString>
	LCD_goToRowColumn(1, 8);
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	68 e0       	ldi	r22, 0x08	; 8
    27b6:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_goToRowColumn>
	LCD_integerToString((Recieved_Speed*100)/255);
    27ba:	80 91 89 01 	lds	r24, 0x0189
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	84 e6       	ldi	r24, 0x64	; 100
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	fc 01       	movw	r30, r24
    27c8:	2e 9f       	mul	r18, r30
    27ca:	c0 01       	movw	r24, r0
    27cc:	2f 9f       	mul	r18, r31
    27ce:	90 0d       	add	r25, r0
    27d0:	3e 9f       	mul	r19, r30
    27d2:	90 0d       	add	r25, r0
    27d4:	11 24       	eor	r1, r1
    27d6:	2f ef       	ldi	r18, 0xFF	; 255
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	b9 01       	movw	r22, r18
    27dc:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__divmodhi4>
    27e0:	cb 01       	movw	r24, r22
    27e2:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LCD_integerToString>


while (1)
{
	PWM_void_SetDutyCycle(PRecieved_Speed);
    27e6:	80 91 87 01 	lds	r24, 0x0187
    27ea:	90 91 88 01 	lds	r25, 0x0188
    27ee:	0e 94 2c 0c 	call	0x1858	; 0x1858 <PWM_void_SetDutyCycle>
    27f2:	f9 cf       	rjmp	.-14     	; 0x27e6 <main+0x104>

000027f4 <__divmodhi4>:
    27f4:	97 fb       	bst	r25, 7
    27f6:	09 2e       	mov	r0, r25
    27f8:	07 26       	eor	r0, r23
    27fa:	0a d0       	rcall	.+20     	; 0x2810 <__divmodhi4_neg1>
    27fc:	77 fd       	sbrc	r23, 7
    27fe:	04 d0       	rcall	.+8      	; 0x2808 <__divmodhi4_neg2>
    2800:	49 d0       	rcall	.+146    	; 0x2894 <__udivmodhi4>
    2802:	06 d0       	rcall	.+12     	; 0x2810 <__divmodhi4_neg1>
    2804:	00 20       	and	r0, r0
    2806:	1a f4       	brpl	.+6      	; 0x280e <__divmodhi4_exit>

00002808 <__divmodhi4_neg2>:
    2808:	70 95       	com	r23
    280a:	61 95       	neg	r22
    280c:	7f 4f       	sbci	r23, 0xFF	; 255

0000280e <__divmodhi4_exit>:
    280e:	08 95       	ret

00002810 <__divmodhi4_neg1>:
    2810:	f6 f7       	brtc	.-4      	; 0x280e <__divmodhi4_exit>
    2812:	90 95       	com	r25
    2814:	81 95       	neg	r24
    2816:	9f 4f       	sbci	r25, 0xFF	; 255
    2818:	08 95       	ret

0000281a <__udivmodsi4>:
    281a:	a1 e2       	ldi	r26, 0x21	; 33
    281c:	1a 2e       	mov	r1, r26
    281e:	aa 1b       	sub	r26, r26
    2820:	bb 1b       	sub	r27, r27
    2822:	fd 01       	movw	r30, r26
    2824:	0d c0       	rjmp	.+26     	; 0x2840 <__udivmodsi4_ep>

00002826 <__udivmodsi4_loop>:
    2826:	aa 1f       	adc	r26, r26
    2828:	bb 1f       	adc	r27, r27
    282a:	ee 1f       	adc	r30, r30
    282c:	ff 1f       	adc	r31, r31
    282e:	a2 17       	cp	r26, r18
    2830:	b3 07       	cpc	r27, r19
    2832:	e4 07       	cpc	r30, r20
    2834:	f5 07       	cpc	r31, r21
    2836:	20 f0       	brcs	.+8      	; 0x2840 <__udivmodsi4_ep>
    2838:	a2 1b       	sub	r26, r18
    283a:	b3 0b       	sbc	r27, r19
    283c:	e4 0b       	sbc	r30, r20
    283e:	f5 0b       	sbc	r31, r21

00002840 <__udivmodsi4_ep>:
    2840:	66 1f       	adc	r22, r22
    2842:	77 1f       	adc	r23, r23
    2844:	88 1f       	adc	r24, r24
    2846:	99 1f       	adc	r25, r25
    2848:	1a 94       	dec	r1
    284a:	69 f7       	brne	.-38     	; 0x2826 <__udivmodsi4_loop>
    284c:	60 95       	com	r22
    284e:	70 95       	com	r23
    2850:	80 95       	com	r24
    2852:	90 95       	com	r25
    2854:	9b 01       	movw	r18, r22
    2856:	ac 01       	movw	r20, r24
    2858:	bd 01       	movw	r22, r26
    285a:	cf 01       	movw	r24, r30
    285c:	08 95       	ret

0000285e <__divmodsi4>:
    285e:	97 fb       	bst	r25, 7
    2860:	09 2e       	mov	r0, r25
    2862:	05 26       	eor	r0, r21
    2864:	0e d0       	rcall	.+28     	; 0x2882 <__divmodsi4_neg1>
    2866:	57 fd       	sbrc	r21, 7
    2868:	04 d0       	rcall	.+8      	; 0x2872 <__divmodsi4_neg2>
    286a:	d7 df       	rcall	.-82     	; 0x281a <__udivmodsi4>
    286c:	0a d0       	rcall	.+20     	; 0x2882 <__divmodsi4_neg1>
    286e:	00 1c       	adc	r0, r0
    2870:	38 f4       	brcc	.+14     	; 0x2880 <__divmodsi4_exit>

00002872 <__divmodsi4_neg2>:
    2872:	50 95       	com	r21
    2874:	40 95       	com	r20
    2876:	30 95       	com	r19
    2878:	21 95       	neg	r18
    287a:	3f 4f       	sbci	r19, 0xFF	; 255
    287c:	4f 4f       	sbci	r20, 0xFF	; 255
    287e:	5f 4f       	sbci	r21, 0xFF	; 255

00002880 <__divmodsi4_exit>:
    2880:	08 95       	ret

00002882 <__divmodsi4_neg1>:
    2882:	f6 f7       	brtc	.-4      	; 0x2880 <__divmodsi4_exit>
    2884:	90 95       	com	r25
    2886:	80 95       	com	r24
    2888:	70 95       	com	r23
    288a:	61 95       	neg	r22
    288c:	7f 4f       	sbci	r23, 0xFF	; 255
    288e:	8f 4f       	sbci	r24, 0xFF	; 255
    2890:	9f 4f       	sbci	r25, 0xFF	; 255
    2892:	08 95       	ret

00002894 <__udivmodhi4>:
    2894:	aa 1b       	sub	r26, r26
    2896:	bb 1b       	sub	r27, r27
    2898:	51 e1       	ldi	r21, 0x11	; 17
    289a:	07 c0       	rjmp	.+14     	; 0x28aa <__udivmodhi4_ep>

0000289c <__udivmodhi4_loop>:
    289c:	aa 1f       	adc	r26, r26
    289e:	bb 1f       	adc	r27, r27
    28a0:	a6 17       	cp	r26, r22
    28a2:	b7 07       	cpc	r27, r23
    28a4:	10 f0       	brcs	.+4      	; 0x28aa <__udivmodhi4_ep>
    28a6:	a6 1b       	sub	r26, r22
    28a8:	b7 0b       	sbc	r27, r23

000028aa <__udivmodhi4_ep>:
    28aa:	88 1f       	adc	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	5a 95       	dec	r21
    28b0:	a9 f7       	brne	.-22     	; 0x289c <__udivmodhi4_loop>
    28b2:	80 95       	com	r24
    28b4:	90 95       	com	r25
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	08 95       	ret

000028bc <__prologue_saves__>:
    28bc:	2f 92       	push	r2
    28be:	3f 92       	push	r3
    28c0:	4f 92       	push	r4
    28c2:	5f 92       	push	r5
    28c4:	6f 92       	push	r6
    28c6:	7f 92       	push	r7
    28c8:	8f 92       	push	r8
    28ca:	9f 92       	push	r9
    28cc:	af 92       	push	r10
    28ce:	bf 92       	push	r11
    28d0:	cf 92       	push	r12
    28d2:	df 92       	push	r13
    28d4:	ef 92       	push	r14
    28d6:	ff 92       	push	r15
    28d8:	0f 93       	push	r16
    28da:	1f 93       	push	r17
    28dc:	cf 93       	push	r28
    28de:	df 93       	push	r29
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	ca 1b       	sub	r28, r26
    28e6:	db 0b       	sbc	r29, r27
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	09 94       	ijmp

000028f4 <__epilogue_restores__>:
    28f4:	2a 88       	ldd	r2, Y+18	; 0x12
    28f6:	39 88       	ldd	r3, Y+17	; 0x11
    28f8:	48 88       	ldd	r4, Y+16	; 0x10
    28fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    28fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    28fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2900:	8c 84       	ldd	r8, Y+12	; 0x0c
    2902:	9b 84       	ldd	r9, Y+11	; 0x0b
    2904:	aa 84       	ldd	r10, Y+10	; 0x0a
    2906:	b9 84       	ldd	r11, Y+9	; 0x09
    2908:	c8 84       	ldd	r12, Y+8	; 0x08
    290a:	df 80       	ldd	r13, Y+7	; 0x07
    290c:	ee 80       	ldd	r14, Y+6	; 0x06
    290e:	fd 80       	ldd	r15, Y+5	; 0x05
    2910:	0c 81       	ldd	r16, Y+4	; 0x04
    2912:	1b 81       	ldd	r17, Y+3	; 0x03
    2914:	aa 81       	ldd	r26, Y+2	; 0x02
    2916:	b9 81       	ldd	r27, Y+1	; 0x01
    2918:	ce 0f       	add	r28, r30
    291a:	d1 1d       	adc	r29, r1
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	ed 01       	movw	r28, r26
    2928:	08 95       	ret

0000292a <itoa>:
    292a:	fb 01       	movw	r30, r22
    292c:	9f 01       	movw	r18, r30
    292e:	e8 94       	clt
    2930:	42 30       	cpi	r20, 0x02	; 2
    2932:	c4 f0       	brlt	.+48     	; 0x2964 <itoa+0x3a>
    2934:	45 32       	cpi	r20, 0x25	; 37
    2936:	b4 f4       	brge	.+44     	; 0x2964 <itoa+0x3a>
    2938:	4a 30       	cpi	r20, 0x0A	; 10
    293a:	29 f4       	brne	.+10     	; 0x2946 <itoa+0x1c>
    293c:	97 fb       	bst	r25, 7
    293e:	1e f4       	brtc	.+6      	; 0x2946 <itoa+0x1c>
    2940:	90 95       	com	r25
    2942:	81 95       	neg	r24
    2944:	9f 4f       	sbci	r25, 0xFF	; 255
    2946:	64 2f       	mov	r22, r20
    2948:	77 27       	eor	r23, r23
    294a:	0e 94 4a 14 	call	0x2894	; 0x2894 <__udivmodhi4>
    294e:	80 5d       	subi	r24, 0xD0	; 208
    2950:	8a 33       	cpi	r24, 0x3A	; 58
    2952:	0c f0       	brlt	.+2      	; 0x2956 <itoa+0x2c>
    2954:	89 5d       	subi	r24, 0xD9	; 217
    2956:	81 93       	st	Z+, r24
    2958:	cb 01       	movw	r24, r22
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	a1 f7       	brne	.-24     	; 0x2946 <itoa+0x1c>
    295e:	16 f4       	brtc	.+4      	; 0x2964 <itoa+0x3a>
    2960:	5d e2       	ldi	r21, 0x2D	; 45
    2962:	51 93       	st	Z+, r21
    2964:	10 82       	st	Z, r1
    2966:	c9 01       	movw	r24, r18
    2968:	0c 94 b6 14 	jmp	0x296c	; 0x296c <strrev>

0000296c <strrev>:
    296c:	dc 01       	movw	r26, r24
    296e:	fc 01       	movw	r30, r24
    2970:	67 2f       	mov	r22, r23
    2972:	71 91       	ld	r23, Z+
    2974:	77 23       	and	r23, r23
    2976:	e1 f7       	brne	.-8      	; 0x2970 <strrev+0x4>
    2978:	32 97       	sbiw	r30, 0x02	; 2
    297a:	04 c0       	rjmp	.+8      	; 0x2984 <strrev+0x18>
    297c:	7c 91       	ld	r23, X
    297e:	6d 93       	st	X+, r22
    2980:	70 83       	st	Z, r23
    2982:	62 91       	ld	r22, -Z
    2984:	ae 17       	cp	r26, r30
    2986:	bf 07       	cpc	r27, r31
    2988:	c8 f3       	brcs	.-14     	; 0x297c <strrev+0x10>
    298a:	08 95       	ret

0000298c <_exit>:
    298c:	f8 94       	cli

0000298e <__stop_program>:
    298e:	ff cf       	rjmp	.-2      	; 0x298e <__stop_program>
