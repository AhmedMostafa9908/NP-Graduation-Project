
Microcontroller2_32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002614  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002614  000026a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800074  00800074  000026bc  2**0
                  ALLOC
  3 .stab         000024cc  00000000  00000000  000026bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001461  00000000  00000000  00004b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006129  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006299  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a737  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 db 10 	jmp	0x21b6	; 0x21b6 <__vector_1>
       8:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 48 12 	call	0x2490	; 0x2490 <main>
      8a:	0c 94 08 13 	jmp	0x2610	; 0x2610 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
void (*RX_IntHandler)(void)=NULL;   /* RX pointer to function */
void (*TX_IntHandler)(void)=NULL;   /*TX  pointer to function */
uint8_t BaudRateRegisterValue;

uint8_t UART_init (str_UartConfg_t * uart_config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
	 /* Set BaudRate */
	  BaudRateRegisterValue= FOSC/(16 * (uart_config->u32_BaudRate-1));
     b56:	e9 81       	ldd	r30, Y+1	; 0x01
     b58:	fa 81       	ldd	r31, Y+2	; 0x02
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	a2 81       	ldd	r26, Z+2	; 0x02
     b60:	b3 81       	ldd	r27, Z+3	; 0x03
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	aa 1f       	adc	r26, r26
     b68:	bb 1f       	adc	r27, r27
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	aa 1f       	adc	r26, r26
     b70:	bb 1f       	adc	r27, r27
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	aa 1f       	adc	r26, r26
     b78:	bb 1f       	adc	r27, r27
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	aa 1f       	adc	r26, r26
     b80:	bb 1f       	adc	r27, r27
     b82:	9c 01       	movw	r18, r24
     b84:	ad 01       	movw	r20, r26
     b86:	20 51       	subi	r18, 0x10	; 16
     b88:	30 40       	sbci	r19, 0x00	; 0
     b8a:	40 40       	sbci	r20, 0x00	; 0
     b8c:	50 40       	sbci	r21, 0x00	; 0
     b8e:	80 e4       	ldi	r24, 0x40	; 64
     b90:	92 e4       	ldi	r25, 0x42	; 66
     b92:	af e0       	ldi	r26, 0x0F	; 15
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	bc 01       	movw	r22, r24
     b98:	cd 01       	movw	r24, r26
     b9a:	0e 94 94 12 	call	0x2528	; 0x2528 <__udivmodsi4>
     b9e:	da 01       	movw	r26, r20
     ba0:	c9 01       	movw	r24, r18
     ba2:	80 93 8a 00 	sts	0x008A, r24
	  USART_BAUD_RATE_REGISTERs_HIGH = (BaudRateRegisterValue) >>8;
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 91 8a 00 	lds	r24, 0x008A
     bae:	88 2f       	mov	r24, r24
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	89 2f       	mov	r24, r25
     bb4:	99 0f       	add	r25, r25
     bb6:	99 0b       	sbc	r25, r25
     bb8:	80 83       	st	Z, r24
	  USART_BAUD_RATE_REGISTER_LOW = BaudRateRegisterValue;
     bba:	e9 e2       	ldi	r30, 0x29	; 41
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 91 8a 00 	lds	r24, 0x008A
     bc2:	80 83       	st	Z, r24

	  SET_BIT(USART_CONTORL_STATUS_REGISTER_B , 4);     /* RX enable*/
     bc4:	aa e2       	ldi	r26, 0x2A	; 42
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	ea e2       	ldi	r30, 0x2A	; 42
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	80 61       	ori	r24, 0x10	; 16
     bd0:	8c 93       	st	X, r24
	  SET_BIT(USART_CONTORL_STATUS_REGISTER_B , 3);     /* TX enable*/
     bd2:	aa e2       	ldi	r26, 0x2A	; 42
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ea e2       	ldi	r30, 0x2A	; 42
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	88 60       	ori	r24, 0x08	; 8
     bde:	8c 93       	st	X, r24

	  /* 5 Bit Mode*/
	if(uart_config -> u8_DataBits ==UART_5_BIT_MODE)
     be0:	e9 81       	ldd	r30, Y+1	; 0x01
     be2:	fa 81       	ldd	r31, Y+2	; 0x02
     be4:	84 81       	ldd	r24, Z+4	; 0x04
     be6:	88 23       	and	r24, r24
     be8:	41 f4       	brne	.+16     	; 0xbfa <UART_init+0xb4>
	{
	  USART_CONTORL_STATUS_REGISTER_C|=(1<<URSEL)|(1<<USBS);
     bea:	a0 e4       	ldi	r26, 0x40	; 64
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e0 e4       	ldi	r30, 0x40	; 64
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	88 68       	ori	r24, 0x88	; 136
     bf6:	8c 93       	st	X, r24
     bf8:	35 c0       	rjmp	.+106    	; 0xc64 <UART_init+0x11e>
	}

	/* 6 Bit Mode*/
	else if(uart_config-> u8_DataBits == UART_6_BIT_MODE)
     bfa:	e9 81       	ldd	r30, Y+1	; 0x01
     bfc:	fa 81       	ldd	r31, Y+2	; 0x02
     bfe:	84 81       	ldd	r24, Z+4	; 0x04
     c00:	81 30       	cpi	r24, 0x01	; 1
     c02:	41 f4       	brne	.+16     	; 0xc14 <UART_init+0xce>
	{
		USART_CONTORL_STATUS_REGISTER_C|=(1<<URSEL)|(1<<USBS)|(1<<UCSZ0);
     c04:	a0 e4       	ldi	r26, 0x40	; 64
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e0 e4       	ldi	r30, 0x40	; 64
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8a 68       	ori	r24, 0x8A	; 138
     c10:	8c 93       	st	X, r24
     c12:	28 c0       	rjmp	.+80     	; 0xc64 <UART_init+0x11e>
	}

	/* 7 Bit Mode*/
	else if(uart_config -> u8_DataBits == UART_7_BIT_MODE)
     c14:	e9 81       	ldd	r30, Y+1	; 0x01
     c16:	fa 81       	ldd	r31, Y+2	; 0x02
     c18:	84 81       	ldd	r24, Z+4	; 0x04
     c1a:	82 30       	cpi	r24, 0x02	; 2
     c1c:	41 f4       	brne	.+16     	; 0xc2e <UART_init+0xe8>
	{
		USART_CONTORL_STATUS_REGISTER_C|=(1<<URSEL)|(1<<USBS)|(1<<UCSZ1);
     c1e:	a0 e4       	ldi	r26, 0x40	; 64
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e0 e4       	ldi	r30, 0x40	; 64
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	8c 68       	ori	r24, 0x8C	; 140
     c2a:	8c 93       	st	X, r24
     c2c:	1b c0       	rjmp	.+54     	; 0xc64 <UART_init+0x11e>
	}

	/* 8 Bit Mode*/
	else if(uart_config -> u8_DataBits == UART_8_BIT_MODE)
     c2e:	e9 81       	ldd	r30, Y+1	; 0x01
     c30:	fa 81       	ldd	r31, Y+2	; 0x02
     c32:	84 81       	ldd	r24, Z+4	; 0x04
     c34:	83 30       	cpi	r24, 0x03	; 3
     c36:	41 f4       	brne	.+16     	; 0xc48 <UART_init+0x102>
	{
		USART_CONTORL_STATUS_REGISTER_C|=(1<<URSEL)|(1<<USBS)|(1<<UCSZ0)|(1<<UCSZ1);
     c38:	a0 e4       	ldi	r26, 0x40	; 64
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e0 e4       	ldi	r30, 0x40	; 64
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	8e 68       	ori	r24, 0x8E	; 142
     c44:	8c 93       	st	X, r24
     c46:	0e c0       	rjmp	.+28     	; 0xc64 <UART_init+0x11e>
	}

	/* 9 Bit Mode*/
	else
	{
        USART_CONTORL_STATUS_REGISTER_C |=(1<<URSEL)|(1<<USBS)|(1<<UCSZ0)|(1<<UCSZ1);
     c48:	a0 e4       	ldi	r26, 0x40	; 64
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e0 e4       	ldi	r30, 0x40	; 64
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8e 68       	ori	r24, 0x8E	; 142
     c54:	8c 93       	st	X, r24
        USART_CONTORL_STATUS_REGISTER_B |= (1<<UCSZ2);
     c56:	aa e2       	ldi	r26, 0x2A	; 42
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	ea e2       	ldi	r30, 0x2A	; 42
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	84 60       	ori	r24, 0x04	; 4
     c62:	8c 93       	st	X, r24
	}

	/* Interrupt Mode */
	if(uart_config->u8_FlagAction == UART_INTERRUPT)
     c64:	e9 81       	ldd	r30, Y+1	; 0x01
     c66:	fa 81       	ldd	r31, Y+2	; 0x02
     c68:	85 81       	ldd	r24, Z+5	; 0x05
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	49 f4       	brne	.+18     	; 0xc80 <UART_init+0x13a>
	{
		/*RX INT Enable & TX INT Enable */
		USART_CONTORL_STATUS_REGISTER_B |= (1<<TXCIE) |(1<<RXCIE);
     c6e:	aa e2       	ldi	r26, 0x2A	; 42
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ea e2       	ldi	r30, 0x2A	; 42
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	80 6c       	ori	r24, 0xC0	; 192
     c7a:	8c 93       	st	X, r24
		return NO_ERROR;
     c7c:	1b 82       	std	Y+3, r1	; 0x03
     c7e:	09 c0       	rjmp	.+18     	; 0xc92 <UART_init+0x14c>

	}
	/* Polling Mode*/
	else if(uart_config ->u8_FlagAction == UART_POLLING)
     c80:	e9 81       	ldd	r30, Y+1	; 0x01
     c82:	fa 81       	ldd	r31, Y+2	; 0x02
     c84:	85 81       	ldd	r24, Z+5	; 0x05
     c86:	88 23       	and	r24, r24
     c88:	11 f4       	brne	.+4      	; 0xc8e <UART_init+0x148>
	{
		return NO_ERROR;
     c8a:	1b 82       	std	Y+3, r1	; 0x03
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <UART_init+0x14c>
	}
	else
	{
		return ERROR;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	8b 83       	std	Y+3, r24	; 0x03
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
	}



 }
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <UART_recieveByte>:
* Input     : pointer to u8Data int
* Output    : Error Status
*/
//_________________________________________________________________________________________________________________________________
uint8_t UART_recieveByte(uint8_t *u8_Data)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <UART_recieveByte+0x6>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
	if(u8_Data != NULL)
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	69 f0       	breq	.+26     	; 0xcd2 <UART_recieveByte+0x32>
	{
		/* This is to check that all of the data is received*/
		while(BIT_IS_CLEAR(USART_CONTORL_STATUS_REGISTER_A,RXC));
     cb8:	eb e2       	ldi	r30, 0x2B	; 43
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	88 23       	and	r24, r24
     cc0:	dc f7       	brge	.-10     	; 0xcb8 <UART_recieveByte+0x18>

		/*Get the Received Data */
		*u8_Data = USART_DATA_REGISTER_READ;
     cc2:	ec e2       	ldi	r30, 0x2C	; 44
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	e9 81       	ldd	r30, Y+1	; 0x01
     cca:	fa 81       	ldd	r31, Y+2	; 0x02
     ccc:	80 83       	st	Z, r24

		return NO_ERROR;
     cce:	1b 82       	std	Y+3, r1	; 0x03
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <UART_recieveByte+0x36>
	}
	else
	{
		return ERROR;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	8b 83       	std	Y+3, r24	; 0x03
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <UART_GetPollingFlag>:
*Description: Receiving Flag used in Case of Polling
* Input     : pointer to u8Data
* Output    : No Return
* */
uint8_t UART_GetPollingFlag(uint8_t *u8_Data)
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	00 d0       	rcall	.+0      	; 0xcea <UART_GetPollingFlag+0x6>
     cea:	00 d0       	rcall	.+0      	; 0xcec <UART_GetPollingFlag+0x8>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	9b 83       	std	Y+3, r25	; 0x03
     cf2:	8a 83       	std	Y+2, r24	; 0x02
    if(u8_Data == NULL)
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	9b 81       	ldd	r25, Y+3	; 0x03
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	19 f4       	brne	.+6      	; 0xd02 <UART_GetPollingFlag+0x1e>
    {
       return ERROR;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	8c 83       	std	Y+4, r24	; 0x04
     d00:	11 c0       	rjmp	.+34     	; 0xd24 <UART_GetPollingFlag+0x40>
    }
    else
    {
     uint8_t holder;
        /* holder gets the value 128 if RXC bit is set or 0 if RXC bit is cleared*/
     holder = USART_CONTORL_STATUS_REGISTER_A & (1 << RXC);
     d02:	eb e2       	ldi	r30, 0x2B	; 43
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	80 78       	andi	r24, 0x80	; 128
     d0a:	89 83       	std	Y+1, r24	; 0x01
     if(holder == 128)   /* there are an Unread Data in the  Receive Buffer */
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	80 38       	cpi	r24, 0x80	; 128
     d10:	19 f4       	brne	.+6      	; 0xd18 <UART_GetPollingFlag+0x34>
     {
        holder = 1;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <UART_GetPollingFlag+0x36>
     }
     else  /* The Receive Buffer is Empty */
     {
        holder = 0;
     d18:	19 82       	std	Y+1, r1	; 0x01
     }
     *u8_Data = holder;  /* Read Data Received */
     d1a:	ea 81       	ldd	r30, Y+2	; 0x02
     d1c:	fb 81       	ldd	r31, Y+3	; 0x03
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	80 83       	st	Z, r24

       return NO_ERROR;
     d22:	1c 82       	std	Y+4, r1	; 0x04
     d24:	8c 81       	ldd	r24, Y+4	; 0x04
    }
}
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <UART_sendByte>:
*Description: Sending byte of data
* Input     : u16Data to send
* Output    : Error Status
* */
uint8_t UART_sendByte( uint8_t u8_Data)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	0f 92       	push	r0
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	89 83       	std	Y+1, r24	; 0x01
 //wait for the transmission buffer to be empty
 while(BIT_IS_CLEAR(USART_CONTORL_STATUS_REGISTER_A,UDRE));
     d40:	eb e2       	ldi	r30, 0x2B	; 43
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	80 72       	andi	r24, 0x20	; 32
     d4c:	90 70       	andi	r25, 0x00	; 0
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	b9 f3       	breq	.-18     	; 0xd40 <UART_sendByte+0xc>
 USART_DATA_REGISTER_READ = u8_Data; //put data in buffer, send data
     d52:	ec e2       	ldi	r30, 0x2C	; 44
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	80 83       	st	Z, r24
 return NO_ERROR;
     d5a:	80 e0       	ldi	r24, 0x00	; 0

}
     d5c:	0f 90       	pop	r0
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <UART_TX_SetCallBack>:
*Description: Call Back for function to send to ISR
* Input     : pointer to function
* Output    : ERROR Status
* */
 uint8_t UART_TX_SetCallBack(void (*Copy_FunctionAddress)(void))
 {
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	00 d0       	rcall	.+0      	; 0xd6a <UART_TX_SetCallBack+0x6>
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
	 TX_IntHandler= Copy_FunctionAddress;
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	90 93 77 00 	sts	0x0077, r25
     d7a:	80 93 76 00 	sts	0x0076, r24
      return NO_ERROR;
     d7e:	80 e0       	ldi	r24, 0x00	; 0
 }
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <UART_RX_SetCallBack>:
*Description: Call Back for function to Receive Data
* Input     : pointer to function
* Output    : ERROR Status
* */
 uint8_t UART_RX_SetCallBack(void (*Copy_FunctionAddress)(void))
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <UART_RX_SetCallBack+0x6>
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
	 RX_IntHandler = Copy_FunctionAddress;
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	90 93 75 00 	sts	0x0075, r25
     da0:	80 93 74 00 	sts	0x0074, r24
       return NO_ERROR;
     da4:	80 e0       	ldi	r24, 0x00	; 0
}
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <__vector_15>:
 /* TX Complete ISR */
ISR(USART_TXC_vect)
{
     db0:	1f 92       	push	r1
     db2:	0f 92       	push	r0
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	0f 92       	push	r0
     db8:	11 24       	eor	r1, r1
     dba:	2f 93       	push	r18
     dbc:	3f 93       	push	r19
     dbe:	4f 93       	push	r20
     dc0:	5f 93       	push	r21
     dc2:	6f 93       	push	r22
     dc4:	7f 93       	push	r23
     dc6:	8f 93       	push	r24
     dc8:	9f 93       	push	r25
     dca:	af 93       	push	r26
     dcc:	bf 93       	push	r27
     dce:	ef 93       	push	r30
     dd0:	ff 93       	push	r31
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
  TX_IntHandler();
     dda:	e0 91 76 00 	lds	r30, 0x0076
     dde:	f0 91 77 00 	lds	r31, 0x0077
     de2:	09 95       	icall
}
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <__vector_13>:

/* RX Complete ISR */
ISR(USART_RXC_vect)
{
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62

 RX_IntHandler();
     e34:	e0 91 74 00 	lds	r30, 0x0074
     e38:	f0 91 75 00 	lds	r31, 0x0075
     e3c:	09 95       	icall

}
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	ff 91       	pop	r31
     e44:	ef 91       	pop	r30
     e46:	bf 91       	pop	r27
     e48:	af 91       	pop	r26
     e4a:	9f 91       	pop	r25
     e4c:	8f 91       	pop	r24
     e4e:	7f 91       	pop	r23
     e50:	6f 91       	pop	r22
     e52:	5f 91       	pop	r21
     e54:	4f 91       	pop	r20
     e56:	3f 91       	pop	r19
     e58:	2f 91       	pop	r18
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0
     e60:	1f 90       	pop	r1
     e62:	18 95       	reti

00000e64 <Timer_Init>:
/*Description: Timer/Counter Initialization
 * Input     : Timer_Configuration_S* Confg_S (Struct contain : Timer Channel, Prescaler , Mode as described in Struct)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Init(Str_TimerConfiguration_t* Confg_S)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <Timer_Init+0x6>
     e6a:	0f 92       	push	r0
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9a 83       	std	Y+2, r25	; 0x02
     e72:	89 83       	std	Y+1, r24	; 0x01
/************************************** Initialization for Timer0 ******************************************************/
	if (Confg_S->Timer_Channel == TIMER0)
     e74:	e9 81       	ldd	r30, Y+1	; 0x01
     e76:	fa 81       	ldd	r31, Y+2	; 0x02
     e78:	80 81       	ld	r24, Z
     e7a:	88 23       	and	r24, r24
     e7c:	09 f0       	breq	.+2      	; 0xe80 <Timer_Init+0x1c>
     e7e:	6f c0       	rjmp	.+222    	; 0xf5e <Timer_Init+0xfa>
	{  /*Configuration for TIMER0 */
		Timers[TIMER0].Timer_Channel = TIMER0;
     e80:	10 92 78 00 	sts	0x0078, r1
		if (Confg_S->Interrupt_Mode == POLLING)
     e84:	e9 81       	ldd	r30, Y+1	; 0x01
     e86:	fa 81       	ldd	r31, Y+2	; 0x02
     e88:	83 81       	ldd	r24, Z+3	; 0x03
     e8a:	88 23       	and	r24, r24
     e8c:	49 f5       	brne	.+82     	; 0xee0 <Timer_Init+0x7c>
		{  /*Initialization for polling*/
			Timers[TIMER0].Interrupt_Mode = POLLING;
     e8e:	10 92 7b 00 	sts	0x007B, r1
			if (Confg_S->Timer_Mode == TIMER_MODE)
     e92:	e9 81       	ldd	r30, Y+1	; 0x01
     e94:	fa 81       	ldd	r31, Y+2	; 0x02
     e96:	82 81       	ldd	r24, Z+2	; 0x02
     e98:	88 23       	and	r24, r24
     e9a:	b1 f4       	brne	.+44     	; 0xec8 <Timer_Init+0x64>
			{
				Timers[TIMER0].Timer_Mode = TIMER_MODE;
     e9c:	10 92 7a 00 	sts	0x007A, r1
				Timers[TIMER0].Timer_Psc = Confg_S->Timer_Psc;
     ea0:	e9 81       	ldd	r30, Y+1	; 0x01
     ea2:	fa 81       	ldd	r31, Y+2	; 0x02
     ea4:	81 81       	ldd	r24, Z+1	; 0x01
     ea6:	80 93 79 00 	sts	0x0079, r24
				/* CTC Mode */
				SET_BIT(TIMER0_CONTROL_REGISTER, TIMER0_CONTROL_WAVEGENERATION_01);
     eaa:	a3 e5       	ldi	r26, 0x53	; 83
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e3 e5       	ldi	r30, 0x53	; 83
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	88 60       	ori	r24, 0x08	; 8
     eb6:	8c 93       	st	X, r24
				CLEAR_BIT(TIMER0_CONTROL_REGISTER, TIMER0_CONTROL_WAVEGENERATION_00);
     eb8:	a3 e5       	ldi	r26, 0x53	; 83
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e3 e5       	ldi	r30, 0x53	; 83
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 7b       	andi	r24, 0xBF	; 191
     ec4:	8c 93       	st	X, r24
     ec6:	56 c1       	rjmp	.+684    	; 0x1174 <Timer_Init+0x310>



			}
			else if (Confg_S->Timer_Mode == COUNTER_MODE)
     ec8:	e9 81       	ldd	r30, Y+1	; 0x01
     eca:	fa 81       	ldd	r31, Y+2	; 0x02
     ecc:	82 81       	ldd	r24, Z+2	; 0x02
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	29 f4       	brne	.+10     	; 0xedc <Timer_Init+0x78>
			{
				Timers[TIMER0].Timer_Mode = COUNTER_MODE;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	80 93 7a 00 	sts	0x007A, r24
				/* Write your counter initialization here*/
			   /* As we don't support counter mode*/
				return ERROR_OK;
     ed8:	1b 82       	std	Y+3, r1	; 0x03
     eda:	4e c1       	rjmp	.+668    	; 0x1178 <Timer_Init+0x314>
			}

			else
			{

				return ERROR_OK;
     edc:	1b 82       	std	Y+3, r1	; 0x03
     ede:	4c c1       	rjmp	.+664    	; 0x1178 <Timer_Init+0x314>
			}
		}
		/* Interrupt Mode */
		else if (Confg_S->Interrupt_Mode == INTERRUPT)
     ee0:	e9 81       	ldd	r30, Y+1	; 0x01
     ee2:	fa 81       	ldd	r31, Y+2	; 0x02
     ee4:	83 81       	ldd	r24, Z+3	; 0x03
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	c1 f5       	brne	.+112    	; 0xf5a <Timer_Init+0xf6>
		{
			Timers[TIMER0].Interrupt_Mode = INTERRUPT;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	80 93 7b 00 	sts	0x007B, r24
			/*Initialization for Interrupt */
			if (Confg_S->Timer_Mode == TIMER_MODE)
     ef0:	e9 81       	ldd	r30, Y+1	; 0x01
     ef2:	fa 81       	ldd	r31, Y+2	; 0x02
     ef4:	82 81       	ldd	r24, Z+2	; 0x02
     ef6:	88 23       	and	r24, r24
     ef8:	21 f5       	brne	.+72     	; 0xf42 <Timer_Init+0xde>
			{
				Timers[TIMER0].Timer_Mode = TIMER_MODE;
     efa:	10 92 7a 00 	sts	0x007A, r1
				/* Write your timer initialization here*/
				Timers[TIMER0].Timer_Psc = Confg_S->Timer_Psc;
     efe:	e9 81       	ldd	r30, Y+1	; 0x01
     f00:	fa 81       	ldd	r31, Y+2	; 0x02
     f02:	81 81       	ldd	r24, Z+1	; 0x01
     f04:	80 93 79 00 	sts	0x0079, r24

				/*CTC mode*/
				SET_BIT(TIMER0_CONTROL_REGISTER, TIMER0_CONTROL_WAVEGENERATION_01);
     f08:	a3 e5       	ldi	r26, 0x53	; 83
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e3 e5       	ldi	r30, 0x53	; 83
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	88 60       	ori	r24, 0x08	; 8
     f14:	8c 93       	st	X, r24
				CLEAR_BIT(TIMER0_CONTROL_REGISTER, TIMER0_CONTROL_WAVEGENERATION_00);
     f16:	a3 e5       	ldi	r26, 0x53	; 83
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e3 e5       	ldi	r30, 0x53	; 83
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8f 7b       	andi	r24, 0xBF	; 191
     f22:	8c 93       	st	X, r24

				/*Enable Timer0 Compare Match Interrupt */
				SET_BIT(TIMER_INTERRUPT_MASK_REGISTER, TIMER0_INTERRUPT_COMPARE_MATCH_ENABLE_BIT);
     f24:	a9 e5       	ldi	r26, 0x59	; 89
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e9 e5       	ldi	r30, 0x59	; 89
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	82 60       	ori	r24, 0x02	; 2
     f30:	8c 93       	st	X, r24

				/*Enable Global Interrupt */
				SET_BIT(STATUS_REGISTER, GLOBAL_INTERRUPT_BIT);
     f32:	af e5       	ldi	r26, 0x5F	; 95
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ef e5       	ldi	r30, 0x5F	; 95
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 68       	ori	r24, 0x80	; 128
     f3e:	8c 93       	st	X, r24
     f40:	19 c1       	rjmp	.+562    	; 0x1174 <Timer_Init+0x310>
			}
			else if (Confg_S->Timer_Mode == COUNTER_MODE)
     f42:	e9 81       	ldd	r30, Y+1	; 0x01
     f44:	fa 81       	ldd	r31, Y+2	; 0x02
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	29 f4       	brne	.+10     	; 0xf56 <Timer_Init+0xf2>
			{
				Timers[TIMER0].Timer_Mode = COUNTER_MODE;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	80 93 7a 00 	sts	0x007A, r24
				/* Write your counter initialization here*/
			   /* As we don't support counter mode*/
				return ERROR_OK;
     f52:	1b 82       	std	Y+3, r1	; 0x03
     f54:	11 c1       	rjmp	.+546    	; 0x1178 <Timer_Init+0x314>
			}
			else
			{
				return ERROR_OK;
     f56:	1b 82       	std	Y+3, r1	; 0x03
     f58:	0f c1       	rjmp	.+542    	; 0x1178 <Timer_Init+0x314>
			}
		}
		else {
			return ERROR_OK;
     f5a:	1b 82       	std	Y+3, r1	; 0x03
     f5c:	0d c1       	rjmp	.+538    	; 0x1178 <Timer_Init+0x314>
		}
	}

/******************************	 Initialization for Timer1  ******************************************************/

	else if (Confg_S->Timer_Channel == TIMER1)
     f5e:	e9 81       	ldd	r30, Y+1	; 0x01
     f60:	fa 81       	ldd	r31, Y+2	; 0x02
     f62:	80 81       	ld	r24, Z
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	09 f0       	breq	.+2      	; 0xf6a <Timer_Init+0x106>
     f68:	8d c0       	rjmp	.+282    	; 0x1084 <Timer_Init+0x220>
	{
		/*Configuration for TIMER1 */
		Timers[TIMER1].Timer_Channel = TIMER1;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	80 93 7c 00 	sts	0x007C, r24
		if (Confg_S->Interrupt_Mode == POLLING)
     f70:	e9 81       	ldd	r30, Y+1	; 0x01
     f72:	fa 81       	ldd	r31, Y+2	; 0x02
     f74:	83 81       	ldd	r24, Z+3	; 0x03
     f76:	88 23       	and	r24, r24
     f78:	b9 f5       	brne	.+110    	; 0xfe8 <Timer_Init+0x184>
		{
			Timers[TIMER1].Interrupt_Mode = POLLING;
     f7a:	10 92 7f 00 	sts	0x007F, r1
			/*Initialization for polling */
			if (Confg_S->Timer_Mode == TIMER_MODE)
     f7e:	e9 81       	ldd	r30, Y+1	; 0x01
     f80:	fa 81       	ldd	r31, Y+2	; 0x02
     f82:	82 81       	ldd	r24, Z+2	; 0x02
     f84:	88 23       	and	r24, r24
     f86:	21 f5       	brne	.+72     	; 0xfd0 <Timer_Init+0x16c>
			{
				Timers[TIMER1].Timer_Mode = TIMER_MODE;
     f88:	10 92 7e 00 	sts	0x007E, r1
				Timers[TIMER1].Timer_Psc = Confg_S->Timer_Psc;
     f8c:	e9 81       	ldd	r30, Y+1	; 0x01
     f8e:	fa 81       	ldd	r31, Y+2	; 0x02
     f90:	81 81       	ldd	r24, Z+1	; 0x01
     f92:	80 93 7d 00 	sts	0x007D, r24

				/*CTC Mode*/
				CLEAR_BIT(TIMER1_CONTROL_REGISTER_A, TIMER0_CONTROL_WAVEGENERATION_10);
     f96:	af e4       	ldi	r26, 0x4F	; 79
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ef e4       	ldi	r30, 0x4F	; 79
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8e 7f       	andi	r24, 0xFE	; 254
     fa2:	8c 93       	st	X, r24
				CLEAR_BIT(TIMER1_CONTROL_REGISTER_A, TIMER0_CONTROL_WAVEGENERATION_11);
     fa4:	af e4       	ldi	r26, 0x4F	; 79
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	ef e4       	ldi	r30, 0x4F	; 79
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	8d 7f       	andi	r24, 0xFD	; 253
     fb0:	8c 93       	st	X, r24
				SET_BIT  (TIMER1_CONTROL_REGISTER_B, TIMER0_CONTROL_WAVEGENERATION_12);
     fb2:	ae e4       	ldi	r26, 0x4E	; 78
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ee e4       	ldi	r30, 0x4E	; 78
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	88 60       	ori	r24, 0x08	; 8
     fbe:	8c 93       	st	X, r24
				CLEAR_BIT(TIMER1_CONTROL_REGISTER_B, TIMER0_CONTROL_WAVEGENERATION_13);
     fc0:	ae e4       	ldi	r26, 0x4E	; 78
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	ee e4       	ldi	r30, 0x4E	; 78
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8f 7e       	andi	r24, 0xEF	; 239
     fcc:	8c 93       	st	X, r24
     fce:	d2 c0       	rjmp	.+420    	; 0x1174 <Timer_Init+0x310>
			}

			else if (Confg_S->Timer_Mode == COUNTER_MODE)
     fd0:	e9 81       	ldd	r30, Y+1	; 0x01
     fd2:	fa 81       	ldd	r31, Y+2	; 0x02
     fd4:	82 81       	ldd	r24, Z+2	; 0x02
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	29 f4       	brne	.+10     	; 0xfe4 <Timer_Init+0x180>
			{
				Timers[TIMER1].Timer_Mode = COUNTER_MODE;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 7e 00 	sts	0x007E, r24
				return ERROR_OK;
     fe0:	1b 82       	std	Y+3, r1	; 0x03
     fe2:	ca c0       	rjmp	.+404    	; 0x1178 <Timer_Init+0x314>
			}
			else
			{
				return ERROR_OK;
     fe4:	1b 82       	std	Y+3, r1	; 0x03
     fe6:	c8 c0       	rjmp	.+400    	; 0x1178 <Timer_Init+0x314>
			}
		}
		else if (Confg_S->Interrupt_Mode == INTERRUPT) {
     fe8:	e9 81       	ldd	r30, Y+1	; 0x01
     fea:	fa 81       	ldd	r31, Y+2	; 0x02
     fec:	83 81       	ldd	r24, Z+3	; 0x03
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	09 f0       	breq	.+2      	; 0xff4 <Timer_Init+0x190>
     ff2:	46 c0       	rjmp	.+140    	; 0x1080 <Timer_Init+0x21c>
			/*Initialization for Interrupt */
			Timers[TIMER1].Interrupt_Mode = INTERRUPT;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	80 93 7f 00 	sts	0x007F, r24
			if (Confg_S->Timer_Mode == TIMER_MODE)
     ffa:	e9 81       	ldd	r30, Y+1	; 0x01
     ffc:	fa 81       	ldd	r31, Y+2	; 0x02
     ffe:	82 81       	ldd	r24, Z+2	; 0x02
    1000:	88 23       	and	r24, r24
    1002:	91 f5       	brne	.+100    	; 0x1068 <Timer_Init+0x204>
			{
				Timers[TIMER1].Timer_Mode = TIMER_MODE;
    1004:	10 92 7e 00 	sts	0x007E, r1

				/*CTC Mode*/
				CLEAR_BIT(TIMER1_CONTROL_REGISTER_A, TIMER0_CONTROL_WAVEGENERATION_10);
    1008:	af e4       	ldi	r26, 0x4F	; 79
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	ef e4       	ldi	r30, 0x4F	; 79
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	8e 7f       	andi	r24, 0xFE	; 254
    1014:	8c 93       	st	X, r24
				CLEAR_BIT(TIMER1_CONTROL_REGISTER_A, TIMER0_CONTROL_WAVEGENERATION_11);
    1016:	af e4       	ldi	r26, 0x4F	; 79
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	ef e4       	ldi	r30, 0x4F	; 79
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8d 7f       	andi	r24, 0xFD	; 253
    1022:	8c 93       	st	X, r24
				SET_BIT  (TIMER1_CONTROL_REGISTER_B, TIMER0_CONTROL_WAVEGENERATION_12);
    1024:	ae e4       	ldi	r26, 0x4E	; 78
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	ee e4       	ldi	r30, 0x4E	; 78
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	88 60       	ori	r24, 0x08	; 8
    1030:	8c 93       	st	X, r24
				SET_BIT  (TIMER1_CONTROL_REGISTER_B, TIMER0_CONTROL_WAVEGENERATION_13);
    1032:	ae e4       	ldi	r26, 0x4E	; 78
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ee e4       	ldi	r30, 0x4E	; 78
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	80 61       	ori	r24, 0x10	; 16
    103e:	8c 93       	st	X, r24

				/*Enable Global Interrupt*/
				SET_BIT(STATUS_REGISTER, GLOBAL_INTERRUPT_BIT);
    1040:	af e5       	ldi	r26, 0x5F	; 95
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ef e5       	ldi	r30, 0x5F	; 95
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	80 68       	ori	r24, 0x80	; 128
    104c:	8c 93       	st	X, r24

				/*Enable Timer1 Compare Match Interrupt*/
				SET_BIT(TIMER_INTERRUPT_MASK_REGISTER, TIMER1_INTERRUPT_COMPARE_MATCH_ENABLE_BIT);
    104e:	a9 e5       	ldi	r26, 0x59	; 89
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e9 e5       	ldi	r30, 0x59	; 89
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	80 62       	ori	r24, 0x20	; 32
    105a:	8c 93       	st	X, r24
				Timers[TIMER1].Timer_Psc = Confg_S->Timer_Psc;
    105c:	e9 81       	ldd	r30, Y+1	; 0x01
    105e:	fa 81       	ldd	r31, Y+2	; 0x02
    1060:	81 81       	ldd	r24, Z+1	; 0x01
    1062:	80 93 7d 00 	sts	0x007D, r24
    1066:	86 c0       	rjmp	.+268    	; 0x1174 <Timer_Init+0x310>
			}
			else if (Confg_S->Timer_Mode == COUNTER_MODE)
    1068:	e9 81       	ldd	r30, Y+1	; 0x01
    106a:	fa 81       	ldd	r31, Y+2	; 0x02
    106c:	82 81       	ldd	r24, Z+2	; 0x02
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	29 f4       	brne	.+10     	; 0x107c <Timer_Init+0x218>
			{
				Timers[TIMER1].Timer_Mode = COUNTER_MODE;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	80 93 7e 00 	sts	0x007E, r24
				return ERROR_OK;
    1078:	1b 82       	std	Y+3, r1	; 0x03
    107a:	7e c0       	rjmp	.+252    	; 0x1178 <Timer_Init+0x314>
			}
			else
			{
				return ERROR_OK;
    107c:	1b 82       	std	Y+3, r1	; 0x03
    107e:	7c c0       	rjmp	.+248    	; 0x1178 <Timer_Init+0x314>
			}
		}
		else
		{
			return ERROR_OK;
    1080:	1b 82       	std	Y+3, r1	; 0x03
    1082:	7a c0       	rjmp	.+244    	; 0x1178 <Timer_Init+0x314>

	}

/************************************  Initialization for Timer2  **********************************************/

	else if (Confg_S->Timer_Channel == TIMER2)
    1084:	e9 81       	ldd	r30, Y+1	; 0x01
    1086:	fa 81       	ldd	r31, Y+2	; 0x02
    1088:	80 81       	ld	r24, Z
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	09 f0       	breq	.+2      	; 0x1090 <Timer_Init+0x22c>
    108e:	70 c0       	rjmp	.+224    	; 0x1170 <Timer_Init+0x30c>
	{
		/*Configuration for TIMER2*/
		Timers[TIMER2].Timer_Channel = TIMER2;
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	80 93 80 00 	sts	0x0080, r24
		if (Confg_S->Interrupt_Mode == POLLING)
    1096:	e9 81       	ldd	r30, Y+1	; 0x01
    1098:	fa 81       	ldd	r31, Y+2	; 0x02
    109a:	83 81       	ldd	r24, Z+3	; 0x03
    109c:	88 23       	and	r24, r24
    109e:	49 f5       	brne	.+82     	; 0x10f2 <Timer_Init+0x28e>
		{
			Timers[TIMER2].Interrupt_Mode = POLLING;
    10a0:	10 92 83 00 	sts	0x0083, r1
			/*Initialization for Polling */
			if (Confg_S->Timer_Mode == TIMER_MODE)
    10a4:	e9 81       	ldd	r30, Y+1	; 0x01
    10a6:	fa 81       	ldd	r31, Y+2	; 0x02
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	88 23       	and	r24, r24
    10ac:	b1 f4       	brne	.+44     	; 0x10da <Timer_Init+0x276>
			{
				Timers[TIMER2].Timer_Mode = TIMER_MODE;
    10ae:	10 92 82 00 	sts	0x0082, r1
				Timers[TIMER2].Timer_Psc = Confg_S->Timer_Psc;
    10b2:	e9 81       	ldd	r30, Y+1	; 0x01
    10b4:	fa 81       	ldd	r31, Y+2	; 0x02
    10b6:	81 81       	ldd	r24, Z+1	; 0x01
    10b8:	80 93 81 00 	sts	0x0081, r24

				/*CTC Mode */
				SET_BIT  (TCCR2, TIMER0_CONTROL_WAVEGENERATION_21);
    10bc:	a5 e4       	ldi	r26, 0x45	; 69
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e5 e4       	ldi	r30, 0x45	; 69
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	88 60       	ori	r24, 0x08	; 8
    10c8:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2	,TIMER0_CONTROL_WAVEGENERATION_20);
    10ca:	a5 e4       	ldi	r26, 0x45	; 69
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e5 e4       	ldi	r30, 0x45	; 69
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8f 7b       	andi	r24, 0xBF	; 191
    10d6:	8c 93       	st	X, r24
    10d8:	4d c0       	rjmp	.+154    	; 0x1174 <Timer_Init+0x310>
			}
			else if (Confg_S->Timer_Mode == COUNTER_MODE)
    10da:	e9 81       	ldd	r30, Y+1	; 0x01
    10dc:	fa 81       	ldd	r31, Y+2	; 0x02
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	29 f4       	brne	.+10     	; 0x10ee <Timer_Init+0x28a>
			{
				Timers[TIMER2].Timer_Mode = COUNTER_MODE;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	80 93 82 00 	sts	0x0082, r24
				return ERROR_OK;
    10ea:	1b 82       	std	Y+3, r1	; 0x03
    10ec:	45 c0       	rjmp	.+138    	; 0x1178 <Timer_Init+0x314>
			}
			else
			{
				return ERROR_OK;
    10ee:	1b 82       	std	Y+3, r1	; 0x03
    10f0:	43 c0       	rjmp	.+134    	; 0x1178 <Timer_Init+0x314>
			}
		}
		else if (Confg_S->Interrupt_Mode == INTERRUPT)
    10f2:	e9 81       	ldd	r30, Y+1	; 0x01
    10f4:	fa 81       	ldd	r31, Y+2	; 0x02
    10f6:	83 81       	ldd	r24, Z+3	; 0x03
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	c1 f5       	brne	.+112    	; 0x116c <Timer_Init+0x308>
		{  /* Initialization for interrupt */
			Timers[TIMER2].Interrupt_Mode = INTERRUPT;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	80 93 83 00 	sts	0x0083, r24
			if (Confg_S->Timer_Mode == TIMER_MODE)
    1102:	e9 81       	ldd	r30, Y+1	; 0x01
    1104:	fa 81       	ldd	r31, Y+2	; 0x02
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	88 23       	and	r24, r24
    110a:	21 f5       	brne	.+72     	; 0x1154 <Timer_Init+0x2f0>
			{
				Timers[TIMER2].Timer_Mode = TIMER_MODE;
    110c:	10 92 82 00 	sts	0x0082, r1

				/* CTC Mode */
				SET_BIT(TCCR2, TIMER0_CONTROL_WAVEGENERATION_21);
    1110:	a5 e4       	ldi	r26, 0x45	; 69
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e5 e4       	ldi	r30, 0x45	; 69
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	88 60       	ori	r24, 0x08	; 8
    111c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR2, TIMER0_CONTROL_WAVEGENERATION_20);
    111e:	a5 e4       	ldi	r26, 0x45	; 69
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e5 e4       	ldi	r30, 0x45	; 69
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	8f 7b       	andi	r24, 0xBF	; 191
    112a:	8c 93       	st	X, r24
				/*Enable Global Interrupt */
				SET_BIT(STATUS_REGISTER, GLOBAL_INTERRUPT_BIT);
    112c:	af e5       	ldi	r26, 0x5F	; 95
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	ef e5       	ldi	r30, 0x5F	; 95
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	80 68       	ori	r24, 0x80	; 128
    1138:	8c 93       	st	X, r24

				/*Enable Timer2 Compare Match Interrupt */
				SET_BIT(TIMER_INTERRUPT_MASK_REGISTER, TIMER2_INTERRUPT_COMPARE_MATCH_ENABLE_BIT);
    113a:	a9 e5       	ldi	r26, 0x59	; 89
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e9 e5       	ldi	r30, 0x59	; 89
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 64       	ori	r24, 0x40	; 64
    1146:	8c 93       	st	X, r24
				Timers[TIMER2].Timer_Psc = Confg_S->Timer_Psc;
    1148:	e9 81       	ldd	r30, Y+1	; 0x01
    114a:	fa 81       	ldd	r31, Y+2	; 0x02
    114c:	81 81       	ldd	r24, Z+1	; 0x01
    114e:	80 93 81 00 	sts	0x0081, r24
    1152:	10 c0       	rjmp	.+32     	; 0x1174 <Timer_Init+0x310>
			}
			else if (Confg_S->Timer_Mode == COUNTER_MODE)
    1154:	e9 81       	ldd	r30, Y+1	; 0x01
    1156:	fa 81       	ldd	r31, Y+2	; 0x02
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	29 f4       	brne	.+10     	; 0x1168 <Timer_Init+0x304>
			{
				Timers[TIMER2].Timer_Mode = COUNTER_MODE;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	80 93 82 00 	sts	0x0082, r24
				return ERROR_OK;
    1164:	1b 82       	std	Y+3, r1	; 0x03
    1166:	08 c0       	rjmp	.+16     	; 0x1178 <Timer_Init+0x314>
			}
			else
			{
				return ERROR_OK;
    1168:	1b 82       	std	Y+3, r1	; 0x03
    116a:	06 c0       	rjmp	.+12     	; 0x1178 <Timer_Init+0x314>
			}

		}
		else
		{
			return ERROR_OK;
    116c:	1b 82       	std	Y+3, r1	; 0x03
    116e:	04 c0       	rjmp	.+8      	; 0x1178 <Timer_Init+0x314>

	}

	else
	{
		return ERROR_OK;
    1170:	1b 82       	std	Y+3, r1	; 0x03
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <Timer_Init+0x314>
	}
	return ERROR_NOK;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	8b 83       	std	Y+3, r24	; 0x03
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
}
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <Timer_Start>:
 * Input     :  Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2), Tick Counting (Counts given by user)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/

uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel, uint16_t Copy_uint16_TickCounts)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <Timer_Start+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <Timer_Start+0x8>
    118e:	00 d0       	rcall	.+0      	; 0x1190 <Timer_Start+0xa>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	7b 83       	std	Y+3, r23	; 0x03
    1198:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_uint8_TimerChannel)
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	3e 83       	std	Y+6, r19	; 0x06
    11a2:	2d 83       	std	Y+5, r18	; 0x05
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	9e 81       	ldd	r25, Y+6	; 0x06
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	91 05       	cpc	r25, r1
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <Timer_Start+0x2a>
    11ae:	7c c0       	rjmp	.+248    	; 0x12a8 <Timer_Start+0x122>
    11b0:	2d 81       	ldd	r18, Y+5	; 0x05
    11b2:	3e 81       	ldd	r19, Y+6	; 0x06
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	31 05       	cpc	r19, r1
    11b8:	09 f4       	brne	.+2      	; 0x11bc <Timer_Start+0x36>
    11ba:	ea c0       	rjmp	.+468    	; 0x1390 <Timer_Start+0x20a>
    11bc:	8d 81       	ldd	r24, Y+5	; 0x05
    11be:	9e 81       	ldd	r25, Y+6	; 0x06
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <Timer_Start+0x40>
    11c4:	56 c1       	rjmp	.+684    	; 0x1472 <Timer_Start+0x2ec>
	{
/**************************************     TIMER0  **************************************************************/
		case TIMER0:
		{
			TIMER0_COUNTER_REGISTER = 0x00; /* to Start from Zero */
    11c6:	e2 e5       	ldi	r30, 0x52	; 82
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	10 82       	st	Z, r1
			TickCounts[TIMER0] = Copy_uint16_TickCounts;
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	9b 81       	ldd	r25, Y+3	; 0x03
    11d0:	90 93 85 00 	sts	0x0085, r25
    11d4:	80 93 84 00 	sts	0x0084, r24
			TIMER0_OUTPUT_COMPARE_MATCH = Copy_uint16_TickCounts;
    11d8:	ec e5       	ldi	r30, 0x5C	; 92
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	80 83       	st	Z, r24
			if (Timers[TIMER0].Timer_Psc == F_CPU_CLOCK_TIMER_0)
    11e0:	80 91 79 00 	lds	r24, 0x0079
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	51 f4       	brne	.+20     	; 0x11fc <Timer_Start+0x76>
			{ /*  No Prescaler */
				TIMER0_CONTROL_REGISTER |= (1<<CS00);
    11e8:	a3 e5       	ldi	r26, 0x53	; 83
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e3 e5       	ldi	r30, 0x53	; 83
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	81 60       	ori	r24, 0x01	; 1
    11f4:	8c 93       	st	X, r24
				return ERROR_NOK;
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	9c 83       	std	Y+4, r25	; 0x04
    11fa:	3c c1       	rjmp	.+632    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER0].Timer_Psc == F_CPU_CLOCK_8_TIMER_0)
    11fc:	80 91 79 00 	lds	r24, 0x0079
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	51 f4       	brne	.+20     	; 0x1218 <Timer_Start+0x92>
			{	/* clkI/O /8 */
				TIMER0_CONTROL_REGISTER |= (1<<CS01);
    1204:	a3 e5       	ldi	r26, 0x53	; 83
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e3 e5       	ldi	r30, 0x53	; 83
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	82 60       	ori	r24, 0x02	; 2
    1210:	8c 93       	st	X, r24
				return ERROR_NOK;
    1212:	21 e0       	ldi	r18, 0x01	; 1
    1214:	2c 83       	std	Y+4, r18	; 0x04
    1216:	2e c1       	rjmp	.+604    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER0].Timer_Psc == F_CPU_CLOCK_64_TIMER_0)
    1218:	80 91 79 00 	lds	r24, 0x0079
    121c:	83 30       	cpi	r24, 0x03	; 3
    121e:	51 f4       	brne	.+20     	; 0x1234 <Timer_Start+0xae>
			{  /*  clkI/O /64 */
				TIMER0_CONTROL_REGISTER |= (1<<CS00) |(1<<CS01);
    1220:	a3 e5       	ldi	r26, 0x53	; 83
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e3 e5       	ldi	r30, 0x53	; 83
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	83 60       	ori	r24, 0x03	; 3
    122c:	8c 93       	st	X, r24
				return ERROR_NOK;
    122e:	31 e0       	ldi	r19, 0x01	; 1
    1230:	3c 83       	std	Y+4, r19	; 0x04
    1232:	20 c1       	rjmp	.+576    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER0].Timer_Psc == F_CPU_CLOCK_256_TIMER_0)
    1234:	80 91 79 00 	lds	r24, 0x0079
    1238:	84 30       	cpi	r24, 0x04	; 4
    123a:	51 f4       	brne	.+20     	; 0x1250 <Timer_Start+0xca>
			{   /*  clkI/O /256 */
				TIMER0_CONTROL_REGISTER |= (1<<CS02);
    123c:	a3 e5       	ldi	r26, 0x53	; 83
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e3 e5       	ldi	r30, 0x53	; 83
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	84 60       	ori	r24, 0x04	; 4
    1248:	8c 93       	st	X, r24
				return ERROR_NOK;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	8c 83       	std	Y+4, r24	; 0x04
    124e:	12 c1       	rjmp	.+548    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER0].Timer_Psc == F_CPU_CLOCK_1024_TIMER_0)
    1250:	80 91 79 00 	lds	r24, 0x0079
    1254:	85 30       	cpi	r24, 0x05	; 5
    1256:	51 f4       	brne	.+20     	; 0x126c <Timer_Start+0xe6>
			{   /*  clkI/O /1024 */
				TIMER0_CONTROL_REGISTER |= (1<<CS00) |(1<<CS02);
    1258:	a3 e5       	ldi	r26, 0x53	; 83
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e3 e5       	ldi	r30, 0x53	; 83
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	85 60       	ori	r24, 0x05	; 5
    1264:	8c 93       	st	X, r24
				return ERROR_NOK;
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	9c 83       	std	Y+4, r25	; 0x04
    126a:	04 c1       	rjmp	.+520    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER0].Timer_Psc == F_EXTERNAL_CLOCK_FALLING_TIMER_0)
    126c:	80 91 79 00 	lds	r24, 0x0079
    1270:	86 30       	cpi	r24, 0x06	; 6
    1272:	51 f4       	brne	.+20     	; 0x1288 <Timer_Start+0x102>
			{
				TIMER0_CONTROL_REGISTER |=(1<<CS01) |(1<<CS02);
    1274:	a3 e5       	ldi	r26, 0x53	; 83
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e3 e5       	ldi	r30, 0x53	; 83
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	86 60       	ori	r24, 0x06	; 6
    1280:	8c 93       	st	X, r24
				return ERROR_NOK;
    1282:	21 e0       	ldi	r18, 0x01	; 1
    1284:	2c 83       	std	Y+4, r18	; 0x04
    1286:	f6 c0       	rjmp	.+492    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER0].Timer_Psc == F_EXTERNAL_CLOCK_RISING_TIMER_0)
    1288:	80 91 79 00 	lds	r24, 0x0079
    128c:	87 30       	cpi	r24, 0x07	; 7
    128e:	51 f4       	brne	.+20     	; 0x12a4 <Timer_Start+0x11e>
			{
				TIMER0_CONTROL_REGISTER |=(1<<CS00) |(1<<CS01) |(1<<CS02);
    1290:	a3 e5       	ldi	r26, 0x53	; 83
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e3 e5       	ldi	r30, 0x53	; 83
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	87 60       	ori	r24, 0x07	; 7
    129c:	8c 93       	st	X, r24
				return ERROR_NOK;
    129e:	31 e0       	ldi	r19, 0x01	; 1
    12a0:	3c 83       	std	Y+4, r19	; 0x04
    12a2:	e8 c0       	rjmp	.+464    	; 0x1474 <Timer_Start+0x2ee>
			}
			else
			{
				return ERROR_OK;
    12a4:	1c 82       	std	Y+4, r1	; 0x04
    12a6:	e6 c0       	rjmp	.+460    	; 0x1474 <Timer_Start+0x2ee>
		break;

/***************************************** TIMER1  ***************************************************************/
		case TIMER1:
		{
			TIMER1_COUNTER_REGISTER = 0x00; /* to start from zero */
    12a8:	ec e4       	ldi	r30, 0x4C	; 76
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	11 82       	std	Z+1, r1	; 0x01
    12ae:	10 82       	st	Z, r1
			TickCounts[TIMER1] = Copy_uint16_TickCounts;
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	9b 81       	ldd	r25, Y+3	; 0x03
    12b4:	90 93 87 00 	sts	0x0087, r25
    12b8:	80 93 86 00 	sts	0x0086, r24
			TIMER1A_OUTPUT_COMPARE_MATCH = Copy_uint16_TickCounts;
    12bc:	ea e4       	ldi	r30, 0x4A	; 74
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	9b 81       	ldd	r25, Y+3	; 0x03
    12c4:	91 83       	std	Z+1, r25	; 0x01
    12c6:	80 83       	st	Z, r24
			if (Timers[TIMER1].Timer_Psc == F_CPU_CLOCK_TIMER_1)
    12c8:	80 91 7d 00 	lds	r24, 0x007D
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	51 f4       	brne	.+20     	; 0x12e4 <Timer_Start+0x15e>
			{ /*  No Prescaler */
				TIMER1_CONTROL_REGISTER_B |=(1<<CS10);
    12d0:	ae e4       	ldi	r26, 0x4E	; 78
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ee e4       	ldi	r30, 0x4E	; 78
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	81 60       	ori	r24, 0x01	; 1
    12dc:	8c 93       	st	X, r24
				return ERROR_NOK;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	8c 83       	std	Y+4, r24	; 0x04
    12e2:	c8 c0       	rjmp	.+400    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER1].Timer_Psc == F_CPU_CLOCK_8_TIMER_1)
    12e4:	80 91 7d 00 	lds	r24, 0x007D
    12e8:	82 30       	cpi	r24, 0x02	; 2
    12ea:	51 f4       	brne	.+20     	; 0x1300 <Timer_Start+0x17a>
			{
				TIMER1_CONTROL_REGISTER_B |= (1<<CS11);
    12ec:	ae e4       	ldi	r26, 0x4E	; 78
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ee e4       	ldi	r30, 0x4E	; 78
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	82 60       	ori	r24, 0x02	; 2
    12f8:	8c 93       	st	X, r24
				return ERROR_NOK;
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	9c 83       	std	Y+4, r25	; 0x04
    12fe:	ba c0       	rjmp	.+372    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER1].Timer_Psc == F_CPU_CLOCK_64_TIMER_1)
    1300:	80 91 7d 00 	lds	r24, 0x007D
    1304:	83 30       	cpi	r24, 0x03	; 3
    1306:	51 f4       	brne	.+20     	; 0x131c <Timer_Start+0x196>
			{
				TIMER1_CONTROL_REGISTER_B |=(1<<CS10) |(1<<CS11);
    1308:	ae e4       	ldi	r26, 0x4E	; 78
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	ee e4       	ldi	r30, 0x4E	; 78
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	83 60       	ori	r24, 0x03	; 3
    1314:	8c 93       	st	X, r24
				return ERROR_NOK;
    1316:	21 e0       	ldi	r18, 0x01	; 1
    1318:	2c 83       	std	Y+4, r18	; 0x04
    131a:	ac c0       	rjmp	.+344    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER1].Timer_Psc == F_CPU_CLOCK_256_TIMER_1)
    131c:	80 91 7d 00 	lds	r24, 0x007D
    1320:	84 30       	cpi	r24, 0x04	; 4
    1322:	51 f4       	brne	.+20     	; 0x1338 <Timer_Start+0x1b2>
			{
				TIMER1_CONTROL_REGISTER_B |= (1<<CS12);
    1324:	ae e4       	ldi	r26, 0x4E	; 78
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	ee e4       	ldi	r30, 0x4E	; 78
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	84 60       	ori	r24, 0x04	; 4
    1330:	8c 93       	st	X, r24
				return ERROR_NOK;
    1332:	31 e0       	ldi	r19, 0x01	; 1
    1334:	3c 83       	std	Y+4, r19	; 0x04
    1336:	9e c0       	rjmp	.+316    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER1].Timer_Psc == F_CPU_CLOCK_1024_TIMER_1)
    1338:	80 91 7d 00 	lds	r24, 0x007D
    133c:	85 30       	cpi	r24, 0x05	; 5
    133e:	51 f4       	brne	.+20     	; 0x1354 <Timer_Start+0x1ce>
			{
				TIMER1_CONTROL_REGISTER_B |= (1<<CS10)|(1<<CS12);
    1340:	ae e4       	ldi	r26, 0x4E	; 78
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	ee e4       	ldi	r30, 0x4E	; 78
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	85 60       	ori	r24, 0x05	; 5
    134c:	8c 93       	st	X, r24
				return ERROR_NOK;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	8c 83       	std	Y+4, r24	; 0x04
    1352:	90 c0       	rjmp	.+288    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER1].Timer_Psc == F_EXTERNAL_CLOCK_FALLING_TIMER_1)
    1354:	80 91 7d 00 	lds	r24, 0x007D
    1358:	86 30       	cpi	r24, 0x06	; 6
    135a:	51 f4       	brne	.+20     	; 0x1370 <Timer_Start+0x1ea>
			{
				TIMER1_CONTROL_REGISTER_B |= (1<<CS11)|(1<<CS12);
    135c:	ae e4       	ldi	r26, 0x4E	; 78
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	ee e4       	ldi	r30, 0x4E	; 78
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	86 60       	ori	r24, 0x06	; 6
    1368:	8c 93       	st	X, r24
				return ERROR_NOK;
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	9c 83       	std	Y+4, r25	; 0x04
    136e:	82 c0       	rjmp	.+260    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER1].Timer_Psc == F_EXTERNAL_CLOCK_RISING_TIMER_1)
    1370:	80 91 7d 00 	lds	r24, 0x007D
    1374:	87 30       	cpi	r24, 0x07	; 7
    1376:	51 f4       	brne	.+20     	; 0x138c <Timer_Start+0x206>
			{
				TIMER1_CONTROL_REGISTER_B |= (1<<CS10)|(1<<CS11)|(1<<CS12);
    1378:	ae e4       	ldi	r26, 0x4E	; 78
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ee e4       	ldi	r30, 0x4E	; 78
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	87 60       	ori	r24, 0x07	; 7
    1384:	8c 93       	st	X, r24
				return ERROR_NOK;
    1386:	21 e0       	ldi	r18, 0x01	; 1
    1388:	2c 83       	std	Y+4, r18	; 0x04
    138a:	74 c0       	rjmp	.+232    	; 0x1474 <Timer_Start+0x2ee>
			}
			else
			{
				return ERROR_OK;
    138c:	1c 82       	std	Y+4, r1	; 0x04
    138e:	72 c0       	rjmp	.+228    	; 0x1474 <Timer_Start+0x2ee>

/*********************************    TIMER2     ******************************************************************/

		case TIMER2:
		{
			TIMER2_COUNTER_REGISTER = 0x00; /* to start from zero */
    1390:	e4 e4       	ldi	r30, 0x44	; 68
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	10 82       	st	Z, r1
			TickCounts[TIMER2] = Copy_uint16_TickCounts;
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	9b 81       	ldd	r25, Y+3	; 0x03
    139a:	90 93 89 00 	sts	0x0089, r25
    139e:	80 93 88 00 	sts	0x0088, r24
			TIMER2_OUTPUT_COMPARE_MATCH = Copy_uint16_TickCounts;
    13a2:	e3 e4       	ldi	r30, 0x43	; 67
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	80 83       	st	Z, r24
			if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_TIMER_2)
    13aa:	80 91 81 00 	lds	r24, 0x0081
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	51 f4       	brne	.+20     	; 0x13c6 <Timer_Start+0x240>
			{ /*  No Prescaler  */
				TIMER2_CONTROL_REGISTER |=(1<<CS20);
    13b2:	a5 e4       	ldi	r26, 0x45	; 69
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e5 e4       	ldi	r30, 0x45	; 69
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	81 60       	ori	r24, 0x01	; 1
    13be:	8c 93       	st	X, r24
				return ERROR_NOK;
    13c0:	31 e0       	ldi	r19, 0x01	; 1
    13c2:	3c 83       	std	Y+4, r19	; 0x04
    13c4:	57 c0       	rjmp	.+174    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_8_TIMER_2)
    13c6:	80 91 81 00 	lds	r24, 0x0081
    13ca:	82 30       	cpi	r24, 0x02	; 2
    13cc:	51 f4       	brne	.+20     	; 0x13e2 <Timer_Start+0x25c>
			{
				TIMER2_CONTROL_REGISTER |= (1<<CS21);
    13ce:	a5 e4       	ldi	r26, 0x45	; 69
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e5 e4       	ldi	r30, 0x45	; 69
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	82 60       	ori	r24, 0x02	; 2
    13da:	8c 93       	st	X, r24
				return ERROR_NOK;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	8c 83       	std	Y+4, r24	; 0x04
    13e0:	49 c0       	rjmp	.+146    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_32_TIMER_2)
    13e2:	80 91 81 00 	lds	r24, 0x0081
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	51 f4       	brne	.+20     	; 0x13fe <Timer_Start+0x278>
			{
				TIMER2_CONTROL_REGISTER |=(1<<CS20)|(1<<CS21);
    13ea:	a5 e4       	ldi	r26, 0x45	; 69
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e5 e4       	ldi	r30, 0x45	; 69
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	83 60       	ori	r24, 0x03	; 3
    13f6:	8c 93       	st	X, r24
				return ERROR_NOK;
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	9c 83       	std	Y+4, r25	; 0x04
    13fc:	3b c0       	rjmp	.+118    	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_64_TIMER_2)
    13fe:	80 91 81 00 	lds	r24, 0x0081
    1402:	84 30       	cpi	r24, 0x04	; 4
    1404:	51 f4       	brne	.+20     	; 0x141a <Timer_Start+0x294>
			{
				TIMER2_CONTROL_REGISTER |= (1<<CS22);
    1406:	a5 e4       	ldi	r26, 0x45	; 69
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e5 e4       	ldi	r30, 0x45	; 69
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	84 60       	ori	r24, 0x04	; 4
    1412:	8c 93       	st	X, r24
				return ERROR_NOK;
    1414:	21 e0       	ldi	r18, 0x01	; 1
    1416:	2c 83       	std	Y+4, r18	; 0x04
    1418:	2d c0       	rjmp	.+90     	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_128_TIMER_2)
    141a:	80 91 81 00 	lds	r24, 0x0081
    141e:	85 30       	cpi	r24, 0x05	; 5
    1420:	51 f4       	brne	.+20     	; 0x1436 <Timer_Start+0x2b0>
			{
				TIMER2_CONTROL_REGISTER |=(1<<CS20)|(1<<CS22);
    1422:	a5 e4       	ldi	r26, 0x45	; 69
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e5 e4       	ldi	r30, 0x45	; 69
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	85 60       	ori	r24, 0x05	; 5
    142e:	8c 93       	st	X, r24
				return ERROR_NOK;
    1430:	31 e0       	ldi	r19, 0x01	; 1
    1432:	3c 83       	std	Y+4, r19	; 0x04
    1434:	1f c0       	rjmp	.+62     	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_256_TIMER_2)
    1436:	80 91 81 00 	lds	r24, 0x0081
    143a:	86 30       	cpi	r24, 0x06	; 6
    143c:	51 f4       	brne	.+20     	; 0x1452 <Timer_Start+0x2cc>
			{
				TIMER2_CONTROL_REGISTER |=(1<<CS21)|(1<<CS22);
    143e:	a5 e4       	ldi	r26, 0x45	; 69
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e5 e4       	ldi	r30, 0x45	; 69
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	86 60       	ori	r24, 0x06	; 6
    144a:	8c 93       	st	X, r24
				return ERROR_NOK;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	8c 83       	std	Y+4, r24	; 0x04
    1450:	11 c0       	rjmp	.+34     	; 0x1474 <Timer_Start+0x2ee>
			}
			else if (Timers[TIMER2].Timer_Psc == F_CPU_CLOCK_1024_TIMER_2)
    1452:	80 91 81 00 	lds	r24, 0x0081
    1456:	87 30       	cpi	r24, 0x07	; 7
    1458:	51 f4       	brne	.+20     	; 0x146e <Timer_Start+0x2e8>
			{
				TIMER2_CONTROL_REGISTER |=(1<<CS20)|(1<<CS21)|(1<<CS22);
    145a:	a5 e4       	ldi	r26, 0x45	; 69
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e5 e4       	ldi	r30, 0x45	; 69
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	87 60       	ori	r24, 0x07	; 7
    1466:	8c 93       	st	X, r24
				return ERROR_NOK;
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	9c 83       	std	Y+4, r25	; 0x04
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <Timer_Start+0x2ee>
			}
			else
			{
				return ERROR_OK;
    146e:	1c 82       	std	Y+4, r1	; 0x04
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <Timer_Start+0x2ee>
			}
		}

		break;
		default:
			return ERROR_OK;
    1472:	1c 82       	std	Y+4, r1	; 0x04
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
		break;

  }
return ERROR_NOK;
}
    1476:	26 96       	adiw	r28, 0x06	; 6
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <Timer_Stop>:
/*Description: Timer/Counter Stop
 * Input     :  Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Stop(uint8_t Copy_uint8_TimerChannel)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	00 d0       	rcall	.+0      	; 0x148e <Timer_Stop+0x6>
    148e:	00 d0       	rcall	.+0      	; 0x1490 <Timer_Stop+0x8>
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_uint8_TimerChannel)
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	3c 83       	std	Y+4, r19	; 0x04
    149e:	2b 83       	std	Y+3, r18	; 0x03
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	91 05       	cpc	r25, r1
    14a8:	09 f1       	breq	.+66     	; 0x14ec <Timer_Stop+0x64>
    14aa:	2b 81       	ldd	r18, Y+3	; 0x03
    14ac:	3c 81       	ldd	r19, Y+4	; 0x04
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	99 f1       	breq	.+102    	; 0x151a <Timer_Stop+0x92>
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	09 f0       	breq	.+2      	; 0x14be <Timer_Stop+0x36>
    14bc:	45 c0       	rjmp	.+138    	; 0x1548 <Timer_Stop+0xc0>
	{
	case TIMER0:
	{
		CLEAR_BIT(TIMER0_CONTROL_REGISTER, CS00);
    14be:	a3 e5       	ldi	r26, 0x53	; 83
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e3 e5       	ldi	r30, 0x53	; 83
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	8e 7f       	andi	r24, 0xFE	; 254
    14ca:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER0_CONTROL_REGISTER, CS01);
    14cc:	a3 e5       	ldi	r26, 0x53	; 83
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e3 e5       	ldi	r30, 0x53	; 83
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	8d 7f       	andi	r24, 0xFD	; 253
    14d8:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER0_CONTROL_REGISTER, CS02);
    14da:	a3 e5       	ldi	r26, 0x53	; 83
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e3 e5       	ldi	r30, 0x53	; 83
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	8b 7f       	andi	r24, 0xFB	; 251
    14e6:	8c 93       	st	X, r24
		return ERROR_OK;
    14e8:	1a 82       	std	Y+2, r1	; 0x02
    14ea:	30 c0       	rjmp	.+96     	; 0x154c <Timer_Stop+0xc4>
	}
		break;

	case TIMER1:
	{
		CLEAR_BIT(TIMER1_CONTROL_REGISTER_B, CS10);
    14ec:	ae e4       	ldi	r26, 0x4E	; 78
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ee e4       	ldi	r30, 0x4E	; 78
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	8e 7f       	andi	r24, 0xFE	; 254
    14f8:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_CONTROL_REGISTER_B, CS11);
    14fa:	ae e4       	ldi	r26, 0x4E	; 78
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ee e4       	ldi	r30, 0x4E	; 78
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8d 7f       	andi	r24, 0xFD	; 253
    1506:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER1_CONTROL_REGISTER_B, CS12);
    1508:	ae e4       	ldi	r26, 0x4E	; 78
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	ee e4       	ldi	r30, 0x4E	; 78
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8b 7f       	andi	r24, 0xFB	; 251
    1514:	8c 93       	st	X, r24
		return ERROR_OK;
    1516:	1a 82       	std	Y+2, r1	; 0x02
    1518:	19 c0       	rjmp	.+50     	; 0x154c <Timer_Stop+0xc4>
	}
	break;
	case TIMER2:
	{
		CLEAR_BIT(TIMER2_CONTROL_REGISTER, CS20);
    151a:	a5 e4       	ldi	r26, 0x45	; 69
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e5 e4       	ldi	r30, 0x45	; 69
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8e 7f       	andi	r24, 0xFE	; 254
    1526:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER2_CONTROL_REGISTER, CS21);
    1528:	a5 e4       	ldi	r26, 0x45	; 69
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e5 e4       	ldi	r30, 0x45	; 69
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	8d 7f       	andi	r24, 0xFD	; 253
    1534:	8c 93       	st	X, r24
		CLEAR_BIT(TIMER2_CONTROL_REGISTER, CS22);
    1536:	a5 e4       	ldi	r26, 0x45	; 69
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e5 e4       	ldi	r30, 0x45	; 69
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8b 7f       	andi	r24, 0xFB	; 251
    1542:	8c 93       	st	X, r24
		return ERROR_OK;
    1544:	1a 82       	std	Y+2, r1	; 0x02
    1546:	02 c0       	rjmp	.+4      	; 0x154c <Timer_Stop+0xc4>
	}
	break;

	default:
		return ERROR_NOK;
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	9a 83       	std	Y+2, r25	; 0x02
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
	break;
	}
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <Timer_Reset>:
/*Description: Timer Reset
 * Input     :  Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Reset(uint8_t Copy_uint8_TimerChannel)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <Timer_Reset+0x6>
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	89 83       	std	Y+1, r24	; 0x01
	//checker if the inputs are correct or not
	if (Copy_uint8_TimerChannel == TIMER0 || Copy_uint8_TimerChannel == TIMER1 || Copy_uint8_TimerChannel == TIMER2)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	88 23       	and	r24, r24
    156c:	31 f0       	breq	.+12     	; 0x157a <Timer_Reset+0x1e>
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	19 f0       	breq	.+6      	; 0x157a <Timer_Reset+0x1e>
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	82 30       	cpi	r24, 0x02	; 2
    1578:	a9 f4       	brne	.+42     	; 0x15a4 <Timer_Reset+0x48>
	{
		if (Copy_uint8_TimerChannel == TIMER0)
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	88 23       	and	r24, r24
    157e:	21 f4       	brne	.+8      	; 0x1588 <Timer_Reset+0x2c>
		{

			TIMER0_COUNTER_REGISTER =0x00;
    1580:	e2 e5       	ldi	r30, 0x52	; 82
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	10 82       	st	Z, r1
    1586:	0b c0       	rjmp	.+22     	; 0x159e <Timer_Reset+0x42>
		}
		else if (Copy_uint8_TimerChannel == TIMER1)
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	29 f4       	brne	.+10     	; 0x1598 <Timer_Reset+0x3c>
		{

			TIMER1_COUNTER_REGISTER=0x00;
    158e:	ec e4       	ldi	r30, 0x4C	; 76
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	11 82       	std	Z+1, r1	; 0x01
    1594:	10 82       	st	Z, r1
    1596:	03 c0       	rjmp	.+6      	; 0x159e <Timer_Reset+0x42>
		}
		else
		{
			TIMER2_COUNTER_REGISTER=0x00;
    1598:	e4 e4       	ldi	r30, 0x44	; 68
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	10 82       	st	Z, r1
		}

		return ERROR_NOK;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	8a 83       	std	Y+2, r24	; 0x02
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <Timer_Reset+0x4a>
	}
	else
	{
		return ERROR_OK;
    15a4:	1a 82       	std	Y+2, r1	; 0x02
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <Timer_Get_TickTime>:
/*Description: Get Timer Tick Time value to use it by user
 * Input     : Timer Channel(Timer Channel (Timer0 or Timer1 or Timer2), *Timer_Time (Pointer to return Value)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Get_TickTime(uint8_t Copy_uint8_TimerChannel, uint32_t* Copy_uint8Ptr_TimerTickTime)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <Timer_Get_TickTime+0x6>
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <Timer_Get_TickTime+0x8>
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	7b 83       	std	Y+3, r23	; 0x03
    15c2:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_uint8Ptr_TimerTickTime == NULL)
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	9b 81       	ldd	r25, Y+3	; 0x03
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	11 f4       	brne	.+4      	; 0x15d0 <Timer_Get_TickTime+0x1e>
	{
		return ERROR_OK; /* error occurred as the pointer points to null */
    15cc:	1c 82       	std	Y+4, r1	; 0x04
    15ce:	5b c0       	rjmp	.+182    	; 0x1686 <Timer_Get_TickTime+0xd4>
	}
	else
	{
		if (Copy_uint8_TimerChannel == TIMER0 || Copy_uint8_TimerChannel == TIMER1 || Copy_uint8_TimerChannel == TIMER2)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	88 23       	and	r24, r24
    15d4:	39 f0       	breq	.+14     	; 0x15e4 <Timer_Get_TickTime+0x32>
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	21 f0       	breq	.+8      	; 0x15e4 <Timer_Get_TickTime+0x32>
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <Timer_Get_TickTime+0x32>
    15e2:	50 c0       	rjmp	.+160    	; 0x1684 <Timer_Get_TickTime+0xd2>
		{
			if (Copy_uint8_TimerChannel == TIMER0)
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	88 23       	and	r24, r24
    15e8:	b9 f4       	brne	.+46     	; 0x1618 <Timer_Get_TickTime+0x66>
			{
				*Copy_uint8Ptr_TimerTickTime = Timers[0].Timer_Psc / CPU_FREQ;   // CPU_Frequency is defined in this file.
    15ea:	80 91 79 00 	lds	r24, 0x0079
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a0 e0       	ldi	r26, 0x00	; 0
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	20 e4       	ldi	r18, 0x40	; 64
    15f8:	32 e4       	ldi	r19, 0x42	; 66
    15fa:	4f e0       	ldi	r20, 0x0F	; 15
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 b6 12 	call	0x256c	; 0x256c <__divmodsi4>
    1606:	da 01       	movw	r26, r20
    1608:	c9 01       	movw	r24, r18
    160a:	ea 81       	ldd	r30, Y+2	; 0x02
    160c:	fb 81       	ldd	r31, Y+3	; 0x03
    160e:	80 83       	st	Z, r24
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	a2 83       	std	Z+2, r26	; 0x02
    1614:	b3 83       	std	Z+3, r27	; 0x03
    1616:	33 c0       	rjmp	.+102    	; 0x167e <Timer_Get_TickTime+0xcc>
			}
			else if (Copy_uint8_TimerChannel == TIMER1)
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	b9 f4       	brne	.+46     	; 0x164c <Timer_Get_TickTime+0x9a>
			{
				*Copy_uint8Ptr_TimerTickTime = Timers[1].Timer_Psc / CPU_FREQ;
    161e:	80 91 7d 00 	lds	r24, 0x007D
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a0 e0       	ldi	r26, 0x00	; 0
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	20 e4       	ldi	r18, 0x40	; 64
    162c:	32 e4       	ldi	r19, 0x42	; 66
    162e:	4f e0       	ldi	r20, 0x0F	; 15
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	0e 94 b6 12 	call	0x256c	; 0x256c <__divmodsi4>
    163a:	da 01       	movw	r26, r20
    163c:	c9 01       	movw	r24, r18
    163e:	ea 81       	ldd	r30, Y+2	; 0x02
    1640:	fb 81       	ldd	r31, Y+3	; 0x03
    1642:	80 83       	st	Z, r24
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	a2 83       	std	Z+2, r26	; 0x02
    1648:	b3 83       	std	Z+3, r27	; 0x03
    164a:	19 c0       	rjmp	.+50     	; 0x167e <Timer_Get_TickTime+0xcc>
			}
			else if (Copy_uint8_TimerChannel == TIMER2)
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	82 30       	cpi	r24, 0x02	; 2
    1650:	b1 f4       	brne	.+44     	; 0x167e <Timer_Get_TickTime+0xcc>
			{
				*Copy_uint8Ptr_TimerTickTime = Timers[2].Timer_Psc / CPU_FREQ;
    1652:	80 91 81 00 	lds	r24, 0x0081
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e0       	ldi	r26, 0x00	; 0
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	20 e4       	ldi	r18, 0x40	; 64
    1660:	32 e4       	ldi	r19, 0x42	; 66
    1662:	4f e0       	ldi	r20, 0x0F	; 15
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	0e 94 b6 12 	call	0x256c	; 0x256c <__divmodsi4>
    166e:	da 01       	movw	r26, r20
    1670:	c9 01       	movw	r24, r18
    1672:	ea 81       	ldd	r30, Y+2	; 0x02
    1674:	fb 81       	ldd	r31, Y+3	; 0x03
    1676:	80 83       	st	Z, r24
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	a2 83       	std	Z+2, r26	; 0x02
    167c:	b3 83       	std	Z+3, r27	; 0x03
		}
		else
		{
			return ERROR_OK; /*error occurred as Timer channel is not supported */
		}
	}return ERROR_NOK;  /* no error occurred*/
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	8c 83       	std	Y+4, r24	; 0x04
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <Timer_Get_TickTime+0xd4>
			}

		}
		else
		{
			return ERROR_OK; /*error occurred as Timer channel is not supported */
    1684:	1c 82       	std	Y+4, r1	; 0x04
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}return ERROR_NOK;  /* no error occurred*/
}
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <SwitchInit>:
#include "Switch.h"


//////////////////////////////////////////////////////////////////////////////
uint8_t SwitchInit(Switch_t* My_Switch)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	00 d0       	rcall	.+0      	; 0x169c <SwitchInit+0x6>
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
    // Checking if the input pin number is within the acceptable pin numbers (0-31).
    if (My_Switch->PIN >= MINIMUM_PIN_NO && My_Switch->PIN <= MAX_PIN_NO)
    16a6:	e9 81       	ldd	r30, Y+1	; 0x01
    16a8:	fa 81       	ldd	r31, Y+2	; 0x02
    16aa:	80 81       	ld	r24, Z
    16ac:	80 32       	cpi	r24, 0x20	; 32
    16ae:	60 f4       	brcc	.+24     	; 0x16c8 <SwitchInit+0x32>
    {
        // Setting the switch pin direction to being input.
        DIO_u8Init_PIN(My_Switch->PIN, DIO_INPUT);
    16b0:	e9 81       	ldd	r30, Y+1	; 0x01
    16b2:	fa 81       	ldd	r31, Y+2	; 0x02
    16b4:	80 81       	ld	r24, Z
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_u8Init_PIN>
    {
        return ERROR;
    }

    // Checking switch's status for being set to pull up or floating.
    if (My_Switch->Status == PULL_UP || My_Switch->Status == FLOATING)
    16bc:	e9 81       	ldd	r30, Y+1	; 0x01
    16be:	fa 81       	ldd	r31, Y+2	; 0x02
    16c0:	81 81       	ldd	r24, Z+1	; 0x01
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	49 f0       	breq	.+18     	; 0x16d8 <SwitchInit+0x42>
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <SwitchInit+0x38>
        DIO_u8Init_PIN(My_Switch->PIN, DIO_INPUT);

    }
    else
    {
        return ERROR;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	8b 83       	std	Y+3, r24	; 0x03
    16cc:	74 c0       	rjmp	.+232    	; 0x17b6 <SwitchInit+0x120>
    }

    // Checking switch's status for being set to pull up or floating.
    if (My_Switch->Status == PULL_UP || My_Switch->Status == FLOATING)
    16ce:	e9 81       	ldd	r30, Y+1	; 0x01
    16d0:	fa 81       	ldd	r31, Y+2	; 0x02
    16d2:	81 81       	ldd	r24, Z+1	; 0x01
    16d4:	88 23       	and	r24, r24
    16d6:	79 f4       	brne	.+30     	; 0x16f6 <SwitchInit+0x60>
    {
        // Setting the switch's pin input type to either pull up (1) or floating (0).
        DIO_u8SetPinInputType(My_Switch->PIN, My_Switch->Status);
    16d8:	e9 81       	ldd	r30, Y+1	; 0x01
    16da:	fa 81       	ldd	r31, Y+2	; 0x02
    16dc:	80 81       	ld	r24, Z
    16de:	e9 81       	ldd	r30, Y+1	; 0x01
    16e0:	fa 81       	ldd	r31, Y+2	; 0x02
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	69 2f       	mov	r22, r25
    16e6:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <DIO_u8SetPinInputType>
    {
        return ERROR;
    }

    // Checking if the switch's mode is a valid value.
    if (My_Switch->Mode == INT0_MODE || My_Switch->Mode == INT1_MODE || My_Switch->Mode == INT2_MODE || My_Switch->Mode == POLLING_MODE)
    16ea:	e9 81       	ldd	r30, Y+1	; 0x01
    16ec:	fa 81       	ldd	r31, Y+2	; 0x02
    16ee:	82 81       	ldd	r24, Z+2	; 0x02
    16f0:	88 23       	and	r24, r24
    16f2:	a1 f0       	breq	.+40     	; 0x171c <SwitchInit+0x86>
    16f4:	03 c0       	rjmp	.+6      	; 0x16fc <SwitchInit+0x66>
        DIO_u8SetPinInputType(My_Switch->PIN, My_Switch->Status);

    }
    else
    {
        return ERROR;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	8b 83       	std	Y+3, r24	; 0x03
    16fa:	5d c0       	rjmp	.+186    	; 0x17b6 <SwitchInit+0x120>
    }

    // Checking if the switch's mode is a valid value.
    if (My_Switch->Mode == INT0_MODE || My_Switch->Mode == INT1_MODE || My_Switch->Mode == INT2_MODE || My_Switch->Mode == POLLING_MODE)
    16fc:	e9 81       	ldd	r30, Y+1	; 0x01
    16fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1700:	82 81       	ldd	r24, Z+2	; 0x02
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	59 f0       	breq	.+22     	; 0x171c <SwitchInit+0x86>
    1706:	e9 81       	ldd	r30, Y+1	; 0x01
    1708:	fa 81       	ldd	r31, Y+2	; 0x02
    170a:	82 81       	ldd	r24, Z+2	; 0x02
    170c:	82 30       	cpi	r24, 0x02	; 2
    170e:	31 f0       	breq	.+12     	; 0x171c <SwitchInit+0x86>
    1710:	e9 81       	ldd	r30, Y+1	; 0x01
    1712:	fa 81       	ldd	r31, Y+2	; 0x02
    1714:	82 81       	ldd	r24, Z+2	; 0x02
    1716:	83 30       	cpi	r24, 0x03	; 3
    1718:	09 f0       	breq	.+2      	; 0x171c <SwitchInit+0x86>
    171a:	4b c0       	rjmp	.+150    	; 0x17b2 <SwitchInit+0x11c>
    {
        // Activating interrupt 0 (INT0).
        if (My_Switch->Mode == INT0_MODE)
    171c:	e9 81       	ldd	r30, Y+1	; 0x01
    171e:	fa 81       	ldd	r31, Y+2	; 0x02
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	88 23       	and	r24, r24
    1724:	b1 f4       	brne	.+44     	; 0x1752 <SwitchInit+0xbc>
        {
            // Setting GICR register's bit 6 to 1 to activate INT0.
            SET_BIT(General_Interrupt_CR, 6);
    1726:	ab e5       	ldi	r26, 0x5B	; 91
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	eb e5       	ldi	r30, 0x5B	; 91
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	80 64       	ori	r24, 0x40	; 64
    1732:	8c 93       	st	X, r24
            // Setting INT0 occurrence condition (on a logical change).
            SET_BIT(MCU_control_register, 0);
    1734:	a5 e5       	ldi	r26, 0x55	; 85
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e5 e5       	ldi	r30, 0x55	; 85
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	81 60       	ori	r24, 0x01	; 1
    1740:	8c 93       	st	X, r24
            SET_BIT(MCU_control_register, 1);
    1742:	a5 e5       	ldi	r26, 0x55	; 85
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e5 e5       	ldi	r30, 0x55	; 85
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	82 60       	ori	r24, 0x02	; 2
    174e:	8c 93       	st	X, r24
    1750:	2e c0       	rjmp	.+92     	; 0x17ae <SwitchInit+0x118>
        }
        // Activating interrupt 1 (INT1).
        else if (My_Switch->Mode == INT1_MODE)
    1752:	e9 81       	ldd	r30, Y+1	; 0x01
    1754:	fa 81       	ldd	r31, Y+2	; 0x02
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	b1 f4       	brne	.+44     	; 0x1788 <SwitchInit+0xf2>
        {
            // Setting GICR register's bit 7 to 1 to activate INT1.
            SET_BIT(General_Interrupt_CR, 7);
    175c:	ab e5       	ldi	r26, 0x5B	; 91
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	eb e5       	ldi	r30, 0x5B	; 91
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	80 68       	ori	r24, 0x80	; 128
    1768:	8c 93       	st	X, r24
            // Setting INT1 occurrence condition (on a logical change).
            SET_BIT(MCU_control_register, 2);
    176a:	a5 e5       	ldi	r26, 0x55	; 85
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e5 e5       	ldi	r30, 0x55	; 85
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	84 60       	ori	r24, 0x04	; 4
    1776:	8c 93       	st	X, r24
            SET_BIT(MCU_control_register, 3);
    1778:	a5 e5       	ldi	r26, 0x55	; 85
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e5 e5       	ldi	r30, 0x55	; 85
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	88 60       	ori	r24, 0x08	; 8
    1784:	8c 93       	st	X, r24
    1786:	13 c0       	rjmp	.+38     	; 0x17ae <SwitchInit+0x118>
        }
        // Activating interrupt 2 (INT2).
        else if (My_Switch->Mode == INT2_MODE)
    1788:	e9 81       	ldd	r30, Y+1	; 0x01
    178a:	fa 81       	ldd	r31, Y+2	; 0x02
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	82 30       	cpi	r24, 0x02	; 2
    1790:	71 f4       	brne	.+28     	; 0x17ae <SwitchInit+0x118>
        {
            // Setting GICR register's bit 5 to 1 to activate INT2.
            SET_BIT(General_Interrupt_CR, 5);
    1792:	ab e5       	ldi	r26, 0x5B	; 91
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	eb e5       	ldi	r30, 0x5B	; 91
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	80 62       	ori	r24, 0x20	; 32
    179e:	8c 93       	st	X, r24
            // Setting INT2 occurrence condition (on a rising edge).
            SET_BIT(MCU_control_and_status_register, 6);
    17a0:	a4 e5       	ldi	r26, 0x54	; 84
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e4 e5       	ldi	r30, 0x54	; 84
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 64       	ori	r24, 0x40	; 64
    17ac:	8c 93       	st	X, r24
        }
        // There is nothing to do when the mode is set to polling.
        return NO_ERROR;
    17ae:	1b 82       	std	Y+3, r1	; 0x03
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <SwitchInit+0x120>
    }
    else
    {
        return ERROR;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	8b 83       	std	Y+3, r24	; 0x03
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <Enable_Global_Interrupt>:
//////////////////////////////////////////////////////////////////////////////////////////
void Enable_Global_Interrupt(void) {
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62

	// Enable global interrupt for SREG register

	SET_BIT(status_Register, pin7);
    17cc:	af e5       	ldi	r26, 0x5F	; 95
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ef e5       	ldi	r30, 0x5F	; 95
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	80 68       	ori	r24, 0x80	; 128
    17d8:	8c 93       	st	X, r24


}
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <IsPressed>:
/////////////////////////////////////////////////////////////////////////////////////////
uint8_t IsPressed(Switch_t* My_Switch, uint8_t* Status) {
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <IsPressed+0x6>
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <IsPressed+0x8>
    17e8:	0f 92       	push	r0
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	7c 83       	std	Y+4, r23	; 0x04
    17f4:	6b 83       	std	Y+3, r22	; 0x03

	// Check if th button pressed by using Get_PinValue'
	if(My_Switch->PIN >= MINIMUM_PIN_NO && My_Switch->PIN <= MAX_PIN_NO){
    17f6:	e9 81       	ldd	r30, Y+1	; 0x01
    17f8:	fa 81       	ldd	r31, Y+2	; 0x02
    17fa:	80 81       	ld	r24, Z
    17fc:	80 32       	cpi	r24, 0x20	; 32
    17fe:	50 f4       	brcc	.+20     	; 0x1814 <IsPressed+0x34>

		DIO_u8GetPinValue(My_Switch->PIN,Status);
    1800:	e9 81       	ldd	r30, Y+1	; 0x01
    1802:	fa 81       	ldd	r31, Y+2	; 0x02
    1804:	80 81       	ld	r24, Z
    1806:	2b 81       	ldd	r18, Y+3	; 0x03
    1808:	3c 81       	ldd	r19, Y+4	; 0x04
    180a:	b9 01       	movw	r22, r18
    180c:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <DIO_u8GetPinValue>

		return NO_ERROR;
    1810:	1d 82       	std	Y+5, r1	; 0x05
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <IsPressed+0x38>
	}
	return ERROR;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	8d 83       	std	Y+5, r24	; 0x05
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <DIO_u8Init_PORT>:
/*Description: Set PORT Direction (INPUT or OUTPUT)
 * Input     : Copy_u8PortNB (PORT Number) ,  Copy_u8Dir (PORT Direction)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8Init_PORT(uint8_t Copy_u8PortNB,uint8_t Copy_u8Dir)
{   //KHALED
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <DIO_u8Init_PORT+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <DIO_u8Init_PORT+0x8>
    1832:	0f 92       	push	r0
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */

	if( (Copy_u8PortNB == DIOA)|| (Copy_u8PortNB == DIOB) ||  (Copy_u8PortNB == DIOC) || (Copy_u8PortNB == DIOD))
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	88 23       	and	r24, r24
    1840:	49 f0       	breq	.+18     	; 0x1854 <DIO_u8Init_PORT+0x2a>
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	31 f0       	breq	.+12     	; 0x1854 <DIO_u8Init_PORT+0x2a>
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	82 30       	cpi	r24, 0x02	; 2
    184c:	19 f0       	breq	.+6      	; 0x1854 <DIO_u8Init_PORT+0x2a>
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	83 30       	cpi	r24, 0x03	; 3
    1852:	a1 f5       	brne	.+104    	; 0x18bc <DIO_u8Init_PORT+0x92>
	{
		switch (Copy_u8PortNB)
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	3d 83       	std	Y+5, r19	; 0x05
    185c:	2c 83       	std	Y+4, r18	; 0x04
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	9d 81       	ldd	r25, Y+5	; 0x05
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	91 05       	cpc	r25, r1
    1866:	d1 f0       	breq	.+52     	; 0x189c <DIO_u8Init_PORT+0x72>
    1868:	2c 81       	ldd	r18, Y+4	; 0x04
    186a:	3d 81       	ldd	r19, Y+5	; 0x05
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	2c f4       	brge	.+10     	; 0x187c <DIO_u8Init_PORT+0x52>
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	9d 81       	ldd	r25, Y+5	; 0x05
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	61 f0       	breq	.+24     	; 0x1892 <DIO_u8Init_PORT+0x68>
    187a:	1e c0       	rjmp	.+60     	; 0x18b8 <DIO_u8Init_PORT+0x8e>
    187c:	2c 81       	ldd	r18, Y+4	; 0x04
    187e:	3d 81       	ldd	r19, Y+5	; 0x05
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	81 f0       	breq	.+32     	; 0x18a6 <DIO_u8Init_PORT+0x7c>
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	9d 81       	ldd	r25, Y+5	; 0x05
    188a:	83 30       	cpi	r24, 0x03	; 3
    188c:	91 05       	cpc	r25, r1
    188e:	81 f0       	breq	.+32     	; 0x18b0 <DIO_u8Init_PORT+0x86>
    1890:	13 c0       	rjmp	.+38     	; 0x18b8 <DIO_u8Init_PORT+0x8e>
		{
		case DIOA:
			DIRECTION_PORT0=Copy_u8Dir; //setting whole port A direction
    1892:	ea e3       	ldi	r30, 0x3A	; 58
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	80 83       	st	Z, r24
    189a:	0e c0       	rjmp	.+28     	; 0x18b8 <DIO_u8Init_PORT+0x8e>
			break;
		case DIOB:
			DIRECTION_PORT1=Copy_u8Dir; //setting whole port B direction
    189c:	e7 e3       	ldi	r30, 0x37	; 55
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	80 83       	st	Z, r24
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <DIO_u8Init_PORT+0x8e>
			break;
		case DIOC:
			DIRECTION_PORT2=Copy_u8Dir; //setting whole port C direction
    18a6:	e4 e3       	ldi	r30, 0x34	; 52
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	80 83       	st	Z, r24
    18ae:	04 c0       	rjmp	.+8      	; 0x18b8 <DIO_u8Init_PORT+0x8e>
			break;
		case DIOD:
			DIRECTION_PORT3=Copy_u8Dir; //setting whole port D direction
    18b0:	e1 e3       	ldi	r30, 0x31	; 49
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	80 83       	st	Z, r24
			break;


		}
		return NO_ERROR;
    18b8:	1b 82       	std	Y+3, r1	; 0x03
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <DIO_u8Init_PORT+0x96>
	}
	else
	{
		return ERROR;
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	9b 83       	std	Y+3, r25	; 0x03
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <DIO_u8Init_PIN>:
/*Description: Set PIN Direction (INPUT or OUTPUT)
 * Input     :Copy_u8PinNB (PIN Number) ,  Copy_u8Dir (PIN Direction)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8Init_PIN(uint8_t Copy_u8PinN,uint8_t Copy_u8Dir)
{ // YOUSSEF
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <DIO_u8Init_PIN+0x6>
    18d8:	0f 92       	push	r0
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	6a 83       	std	Y+2, r22	; 0x02

	/* Implement Your Code */
	if(Copy_u8PinN >= MINIMUM_PIN_NO && Copy_u8PinN <= MAX_PIN_NO)
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	80 32       	cpi	r24, 0x20	; 32
    18e6:	08 f0       	brcs	.+2      	; 0x18ea <DIO_u8Init_PIN+0x18>
    18e8:	e8 c0       	rjmp	.+464    	; 0x1aba <DIO_u8Init_PIN+0x1e8>
	    {
	        // Copy_u8Dir should be either having the value input or output.

	        if(Copy_u8Dir == DIO_INPUT || Copy_u8Dir == DIO_OUTPUT)
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	88 23       	and	r24, r24
    18ee:	21 f0       	breq	.+8      	; 0x18f8 <DIO_u8Init_PIN+0x26>
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <DIO_u8Init_PIN+0x26>
    18f6:	de c0       	rjmp	.+444    	; 0x1ab4 <DIO_u8Init_PIN+0x1e2>
	        {
	            if(Copy_u8PinN >= DIO_PIN_NO_0 && Copy_u8PinN <= DIO_PIN_NO_7)  // PORT A
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	88 30       	cpi	r24, 0x08	; 8
    18fc:	90 f5       	brcc	.+100    	; 0x1962 <DIO_u8Init_PIN+0x90>
	            {
	                if(Copy_u8Dir == DIO_OUTPUT)
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	b9 f4       	brne	.+46     	; 0x1932 <DIO_u8Init_PIN+0x60>
	                {
	                    // Setting the required bit in the DDRA register to 1 (output).
	                    SET_BIT(DIRECTION_PORT0, (Copy_u8PinN % 8));
    1904:	aa e3       	ldi	r26, 0x3A	; 58
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	ea e3       	ldi	r30, 0x3A	; 58
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9c 01       	movw	r18, r24
    1918:	27 70       	andi	r18, 0x07	; 7
    191a:	30 70       	andi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <DIO_u8Init_PIN+0x56>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <DIO_u8Init_PIN+0x52>
    192c:	84 2b       	or	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	bf c0       	rjmp	.+382    	; 0x1ab0 <DIO_u8Init_PIN+0x1de>
	                }
	                else
	                {
	                    // Clearing the required bit in the DDRA register (input).
	                    CLEAR_BIT(DIRECTION_PORT0, (Copy_u8PinN % 8));
    1932:	aa e3       	ldi	r26, 0x3A	; 58
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	ea e3       	ldi	r30, 0x3A	; 58
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9c 01       	movw	r18, r24
    1946:	27 70       	andi	r18, 0x07	; 7
    1948:	30 70       	andi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_u8Init_PIN+0x84>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <DIO_u8Init_PIN+0x80>
    195a:	80 95       	com	r24
    195c:	84 23       	and	r24, r20
    195e:	8c 93       	st	X, r24
    1960:	a7 c0       	rjmp	.+334    	; 0x1ab0 <DIO_u8Init_PIN+0x1de>
	                }
	                // %8 is used to return a number between 0 and 7.

	            }
	            else if(Copy_u8PinN >= DIO_PIN_NO_8 && Copy_u8PinN <= DIO_PIN_NO_15)  // PORT B
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	88 30       	cpi	r24, 0x08	; 8
    1966:	a8 f1       	brcs	.+106    	; 0x19d2 <DIO_u8Init_PIN+0x100>
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	80 31       	cpi	r24, 0x10	; 16
    196c:	90 f5       	brcc	.+100    	; 0x19d2 <DIO_u8Init_PIN+0x100>
	            {
	                if(Copy_u8Dir == DIO_OUTPUT)
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	b9 f4       	brne	.+46     	; 0x19a2 <DIO_u8Init_PIN+0xd0>
	                {
	                    // Setting the required bit in the DDRB register to 1 (output).
	                    SET_BIT(DIRECTION_PORT1, (Copy_u8PinN % 8));
    1974:	a7 e3       	ldi	r26, 0x37	; 55
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e7 e3       	ldi	r30, 0x37	; 55
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	48 2f       	mov	r20, r24
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9c 01       	movw	r18, r24
    1988:	27 70       	andi	r18, 0x07	; 7
    198a:	30 70       	andi	r19, 0x00	; 0
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 2e       	mov	r0, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <DIO_u8Init_PIN+0xc6>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	0a 94       	dec	r0
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <DIO_u8Init_PIN+0xc2>
    199c:	84 2b       	or	r24, r20
    199e:	8c 93       	st	X, r24
    19a0:	87 c0       	rjmp	.+270    	; 0x1ab0 <DIO_u8Init_PIN+0x1de>
	                }
	                else
	                {
	                    // Clearing the required bit in the DDRB register (input).
	                    CLEAR_BIT(DIRECTION_PORT1, (Copy_u8PinN % 8));
    19a2:	a7 e3       	ldi	r26, 0x37	; 55
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e7 e3       	ldi	r30, 0x37	; 55
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	88 2f       	mov	r24, r24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	9c 01       	movw	r18, r24
    19b6:	27 70       	andi	r18, 0x07	; 7
    19b8:	30 70       	andi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_u8Init_PIN+0xf4>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <DIO_u8Init_PIN+0xf0>
    19ca:	80 95       	com	r24
    19cc:	84 23       	and	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	6f c0       	rjmp	.+222    	; 0x1ab0 <DIO_u8Init_PIN+0x1de>
	                }
	                // %8 is used to return a number between 0 and 7.
	            }
	            else if(Copy_u8PinN >= DIO_PIN_NO_16 && Copy_u8PinN <= DIO_PIN_NO_23)  // PORT C
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	80 31       	cpi	r24, 0x10	; 16
    19d6:	a8 f1       	brcs	.+106    	; 0x1a42 <DIO_u8Init_PIN+0x170>
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	88 31       	cpi	r24, 0x18	; 24
    19dc:	90 f5       	brcc	.+100    	; 0x1a42 <DIO_u8Init_PIN+0x170>
	            {
	                if(Copy_u8Dir == DIO_OUTPUT)
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	b9 f4       	brne	.+46     	; 0x1a12 <DIO_u8Init_PIN+0x140>
	                {
	                    // Setting the required bit in the DDRC register to 1 (output).
	                    SET_BIT(DIRECTION_PORT2, (Copy_u8PinN % 8));
    19e4:	a4 e3       	ldi	r26, 0x34	; 52
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e4 e3       	ldi	r30, 0x34	; 52
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	48 2f       	mov	r20, r24
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9c 01       	movw	r18, r24
    19f8:	27 70       	andi	r18, 0x07	; 7
    19fa:	30 70       	andi	r19, 0x00	; 0
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 2e       	mov	r0, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <DIO_u8Init_PIN+0x136>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <DIO_u8Init_PIN+0x132>
    1a0c:	84 2b       	or	r24, r20
    1a0e:	8c 93       	st	X, r24
    1a10:	4f c0       	rjmp	.+158    	; 0x1ab0 <DIO_u8Init_PIN+0x1de>
	                }
	                else
	                {
	                    // Clearing the required bit in the DDRC register (input).
	                    CLEAR_BIT(DIRECTION_PORT2, (Copy_u8PinN % 8));
    1a12:	a4 e3       	ldi	r26, 0x34	; 52
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e4 e3       	ldi	r30, 0x34	; 52
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	88 2f       	mov	r24, r24
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9c 01       	movw	r18, r24
    1a26:	27 70       	andi	r18, 0x07	; 7
    1a28:	30 70       	andi	r19, 0x00	; 0
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	02 2e       	mov	r0, r18
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <DIO_u8Init_PIN+0x164>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	0a 94       	dec	r0
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <DIO_u8Init_PIN+0x160>
    1a3a:	80 95       	com	r24
    1a3c:	84 23       	and	r24, r20
    1a3e:	8c 93       	st	X, r24
    1a40:	37 c0       	rjmp	.+110    	; 0x1ab0 <DIO_u8Init_PIN+0x1de>
	                }
	                // %8 is used to return a number between 0 and 7.
	            }
	            else if(Copy_u8PinN >= DIO_PIN_NO_24 && Copy_u8PinN <= DIO_PIN_NO_31)  // PORT D
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	88 31       	cpi	r24, 0x18	; 24
    1a46:	a0 f1       	brcs	.+104    	; 0x1ab0 <DIO_u8Init_PIN+0x1de>
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	80 32       	cpi	r24, 0x20	; 32
    1a4c:	88 f5       	brcc	.+98     	; 0x1ab0 <DIO_u8Init_PIN+0x1de>
	            {
	                if(Copy_u8Dir == DIO_OUTPUT)
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	b9 f4       	brne	.+46     	; 0x1a82 <DIO_u8Init_PIN+0x1b0>
	                {
	                    // Setting the required bit in the DDRD register to 1 (output).
	                    SET_BIT(DIRECTION_PORT3, (Copy_u8PinN % 8));
    1a54:	a1 e3       	ldi	r26, 0x31	; 49
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e1 e3       	ldi	r30, 0x31	; 49
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	48 2f       	mov	r20, r24
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9c 01       	movw	r18, r24
    1a68:	27 70       	andi	r18, 0x07	; 7
    1a6a:	30 70       	andi	r19, 0x00	; 0
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 2e       	mov	r0, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <DIO_u8Init_PIN+0x1a6>
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	0a 94       	dec	r0
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <DIO_u8Init_PIN+0x1a2>
    1a7c:	84 2b       	or	r24, r20
    1a7e:	8c 93       	st	X, r24
    1a80:	17 c0       	rjmp	.+46     	; 0x1ab0 <DIO_u8Init_PIN+0x1de>
	                }
	                else
	                {
	                    // Clearing the required bit in the DDRD register (input).
	                    CLEAR_BIT(DIRECTION_PORT3, (Copy_u8PinN % 8));
    1a82:	a1 e3       	ldi	r26, 0x31	; 49
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e1 e3       	ldi	r30, 0x31	; 49
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	88 2f       	mov	r24, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9c 01       	movw	r18, r24
    1a96:	27 70       	andi	r18, 0x07	; 7
    1a98:	30 70       	andi	r19, 0x00	; 0
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	02 2e       	mov	r0, r18
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <DIO_u8Init_PIN+0x1d4>
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	0a 94       	dec	r0
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <DIO_u8Init_PIN+0x1d0>
    1aaa:	80 95       	com	r24
    1aac:	84 23       	and	r24, r20
    1aae:	8c 93       	st	X, r24
	                }
	                // %8 is used to return a number between 0 and 7.
	            }

	            return NO_ERROR;
    1ab0:	1b 82       	std	Y+3, r1	; 0x03
    1ab2:	05 c0       	rjmp	.+10     	; 0x1abe <DIO_u8Init_PIN+0x1ec>
	        }
	        else
	        {
	            return ERROR;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	8b 83       	std	Y+3, r24	; 0x03
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <DIO_u8Init_PIN+0x1ec>
	        }
	    }
	    else
	    {
	        return ERROR;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	8b 83       	std	Y+3, r24	; 0x03
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
	    }



}
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <DIO_u8SetPortValue>:
/*Description: Set PORT Value (from 0 to 255)
 * Input     : Copy_u8PortNB (PORT Number) , Copy_u8Value (Value)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPortValue(uint8_t Copy_u8PortNB,uint8_t Copy_u8Value)
{ //  yasmeen
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <DIO_u8SetPortValue+0x6>
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <DIO_u8SetPortValue+0x8>
    1ad4:	0f 92       	push	r0
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	switch(Copy_u8PortNB)
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	3d 83       	std	Y+5, r19	; 0x05
    1ae6:	2c 83       	std	Y+4, r18	; 0x04
    1ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aea:	9d 81       	ldd	r25, Y+5	; 0x05
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	91 05       	cpc	r25, r1
    1af0:	d9 f0       	breq	.+54     	; 0x1b28 <DIO_u8SetPortValue+0x5c>
    1af2:	2c 81       	ldd	r18, Y+4	; 0x04
    1af4:	3d 81       	ldd	r19, Y+5	; 0x05
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <DIO_u8SetPortValue+0x3a>
    1afc:	8c 81       	ldd	r24, Y+4	; 0x04
    1afe:	9d 81       	ldd	r25, Y+5	; 0x05
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	61 f0       	breq	.+24     	; 0x1b1c <DIO_u8SetPortValue+0x50>
    1b04:	23 c0       	rjmp	.+70     	; 0x1b4c <DIO_u8SetPortValue+0x80>
    1b06:	2c 81       	ldd	r18, Y+4	; 0x04
    1b08:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	91 f0       	breq	.+36     	; 0x1b34 <DIO_u8SetPortValue+0x68>
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	9d 81       	ldd	r25, Y+5	; 0x05
    1b14:	83 30       	cpi	r24, 0x03	; 3
    1b16:	91 05       	cpc	r25, r1
    1b18:	99 f0       	breq	.+38     	; 0x1b40 <DIO_u8SetPortValue+0x74>
    1b1a:	18 c0       	rjmp	.+48     	; 0x1b4c <DIO_u8SetPortValue+0x80>
		{
			case DIOA:
			{
				VALUE_PORT0 = Copy_u8Value;
    1b1c:	eb e3       	ldi	r30, 0x3B	; 59
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	80 83       	st	Z, r24
				return NO_ERROR;
    1b24:	1b 82       	std	Y+3, r1	; 0x03
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <DIO_u8SetPortValue+0x84>
			}
			break;
			case DIOB:
			{
				VALUE_PORT1 = Copy_u8Value;
    1b28:	e8 e3       	ldi	r30, 0x38	; 56
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	80 83       	st	Z, r24
				return NO_ERROR;
    1b30:	1b 82       	std	Y+3, r1	; 0x03
    1b32:	0e c0       	rjmp	.+28     	; 0x1b50 <DIO_u8SetPortValue+0x84>
			}
			break;
			case DIOC:
			{
				VALUE_PORT2 = Copy_u8Value;
    1b34:	e5 e3       	ldi	r30, 0x35	; 53
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	80 83       	st	Z, r24
				return NO_ERROR;
    1b3c:	1b 82       	std	Y+3, r1	; 0x03
    1b3e:	08 c0       	rjmp	.+16     	; 0x1b50 <DIO_u8SetPortValue+0x84>
			}
			break;
			case DIOD:
			{
				VALUE_PORT3 = Copy_u8Value;
    1b40:	e2 e3       	ldi	r30, 0x32	; 50
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	80 83       	st	Z, r24
				return NO_ERROR;
    1b48:	1b 82       	std	Y+3, r1	; 0x03
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <DIO_u8SetPortValue+0x84>
			}
			break;
			default:
			 return ERROR;
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	9b 83       	std	Y+3, r25	; 0x03
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03


		}


}
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <DIO_u8SetPinValue>:
/*Description: Set PIN Value (HIGH or LOW)
 * Input     : Copy_u8PinNB (PIN Number) , Copy_u8Value (Value)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPinValue(uint8_t Copy_u8PinN,uint8_t Copy_u8Value)
{    // Ahmed Mohamed
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <DIO_u8SetPinValue+0x6>
    1b68:	0f 92       	push	r0
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */

	if(Copy_u8PinN>=MINIMUM_PIN_NO && Copy_u8PinN<=MAX_PIN_NO && (Copy_u8Value==DIO_HIGH || Copy_u8Value==DIO_LOW))
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	80 32       	cpi	r24, 0x20	; 32
    1b76:	08 f0       	brcs	.+2      	; 0x1b7a <DIO_u8SetPinValue+0x18>
    1b78:	d9 c0       	rjmp	.+434    	; 0x1d2c <DIO_u8SetPinValue+0x1ca>
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	21 f0       	breq	.+8      	; 0x1b88 <DIO_u8SetPinValue+0x26>
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	88 23       	and	r24, r24
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <DIO_u8SetPinValue+0x26>
    1b86:	d2 c0       	rjmp	.+420    	; 0x1d2c <DIO_u8SetPinValue+0x1ca>
		{
			//incase no error occurred
			if(Copy_u8PinN >= DIO_PIN_NO_0 && Copy_u8PinN <= DIO_PIN_NO_7)
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	88 30       	cpi	r24, 0x08	; 8
    1b8c:	60 f5       	brcc	.+88     	; 0x1be6 <DIO_u8SetPinValue+0x84>
			{
				//port A
				if(Copy_u8Value==DIO_HIGH)
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	a1 f4       	brne	.+40     	; 0x1bbc <DIO_u8SetPinValue+0x5a>
				{
					SET_BIT(VALUE_PORT0,Copy_u8PinN);
    1b94:	ab e3       	ldi	r26, 0x3B	; 59
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	eb e3       	ldi	r30, 0x3B	; 59
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	48 2f       	mov	r20, r24
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	02 2e       	mov	r0, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <DIO_u8SetPinValue+0x50>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	0a 94       	dec	r0
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <DIO_u8SetPinValue+0x4c>
    1bb6:	84 2b       	or	r24, r20
    1bb8:	8c 93       	st	X, r24
    1bba:	b6 c0       	rjmp	.+364    	; 0x1d28 <DIO_u8SetPinValue+0x1c6>

				}
				else
				{
					CLEAR_BIT(VALUE_PORT0,Copy_u8PinN);
    1bbc:	ab e3       	ldi	r26, 0x3B	; 59
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	eb e3       	ldi	r30, 0x3B	; 59
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	48 2f       	mov	r20, r24
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	02 2e       	mov	r0, r18
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <DIO_u8SetPinValue+0x78>
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	0a 94       	dec	r0
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <DIO_u8SetPinValue+0x74>
    1bde:	80 95       	com	r24
    1be0:	84 23       	and	r24, r20
    1be2:	8c 93       	st	X, r24
    1be4:	a1 c0       	rjmp	.+322    	; 0x1d28 <DIO_u8SetPinValue+0x1c6>

				}

			}
			else if(Copy_u8PinN>=DIO_PIN_NO_8 && Copy_u8PinN<=DIO_PIN_NO_15)
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	88 30       	cpi	r24, 0x08	; 8
    1bea:	a8 f1       	brcs	.+106    	; 0x1c56 <DIO_u8SetPinValue+0xf4>
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	80 31       	cpi	r24, 0x10	; 16
    1bf0:	90 f5       	brcc	.+100    	; 0x1c56 <DIO_u8SetPinValue+0xf4>
			{
				//port B
				if(Copy_u8Value==DIO_HIGH)
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	b9 f4       	brne	.+46     	; 0x1c26 <DIO_u8SetPinValue+0xc4>
				{
					SET_BIT(VALUE_PORT1,(Copy_u8PinN-DIO_PIN_NO_8));
    1bf8:	a8 e3       	ldi	r26, 0x38	; 56
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e8 e3       	ldi	r30, 0x38	; 56
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	48 2f       	mov	r20, r24
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	88 2f       	mov	r24, r24
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	9c 01       	movw	r18, r24
    1c0c:	28 50       	subi	r18, 0x08	; 8
    1c0e:	30 40       	sbci	r19, 0x00	; 0
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	02 2e       	mov	r0, r18
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <DIO_u8SetPinValue+0xba>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	0a 94       	dec	r0
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <DIO_u8SetPinValue+0xb6>
    1c20:	84 2b       	or	r24, r20
    1c22:	8c 93       	st	X, r24
    1c24:	81 c0       	rjmp	.+258    	; 0x1d28 <DIO_u8SetPinValue+0x1c6>

				}
				else
				{
					CLEAR_BIT(VALUE_PORT1,(Copy_u8PinN-DIO_PIN_NO_8));
    1c26:	a8 e3       	ldi	r26, 0x38	; 56
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e8 e3       	ldi	r30, 0x38	; 56
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	48 2f       	mov	r20, r24
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c 01       	movw	r18, r24
    1c3a:	28 50       	subi	r18, 0x08	; 8
    1c3c:	30 40       	sbci	r19, 0x00	; 0
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	02 2e       	mov	r0, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <DIO_u8SetPinValue+0xe8>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	0a 94       	dec	r0
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <DIO_u8SetPinValue+0xe4>
    1c4e:	80 95       	com	r24
    1c50:	84 23       	and	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	69 c0       	rjmp	.+210    	; 0x1d28 <DIO_u8SetPinValue+0x1c6>

				}
			}
			else if(Copy_u8PinN>=DIO_PIN_NO_16 && Copy_u8PinN<=DIO_PIN_NO_23)
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	80 31       	cpi	r24, 0x10	; 16
    1c5a:	a8 f1       	brcs	.+106    	; 0x1cc6 <DIO_u8SetPinValue+0x164>
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	88 31       	cpi	r24, 0x18	; 24
    1c60:	90 f5       	brcc	.+100    	; 0x1cc6 <DIO_u8SetPinValue+0x164>
			{
				//port C
				if(Copy_u8Value==DIO_HIGH)
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	81 30       	cpi	r24, 0x01	; 1
    1c66:	b9 f4       	brne	.+46     	; 0x1c96 <DIO_u8SetPinValue+0x134>
				{
					SET_BIT(VALUE_PORT2,(Copy_u8PinN-DIO_PIN_NO_16));
    1c68:	a5 e3       	ldi	r26, 0x35	; 53
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e5 e3       	ldi	r30, 0x35	; 53
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	48 2f       	mov	r20, r24
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	88 2f       	mov	r24, r24
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9c 01       	movw	r18, r24
    1c7c:	20 51       	subi	r18, 0x10	; 16
    1c7e:	30 40       	sbci	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <DIO_u8SetPinValue+0x12a>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <DIO_u8SetPinValue+0x126>
    1c90:	84 2b       	or	r24, r20
    1c92:	8c 93       	st	X, r24
    1c94:	49 c0       	rjmp	.+146    	; 0x1d28 <DIO_u8SetPinValue+0x1c6>

				}
				else
				{
					CLEAR_BIT(VALUE_PORT2,(Copy_u8PinN-DIO_PIN_NO_16));
    1c96:	a5 e3       	ldi	r26, 0x35	; 53
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e5 e3       	ldi	r30, 0x35	; 53
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9c 01       	movw	r18, r24
    1caa:	20 51       	subi	r18, 0x10	; 16
    1cac:	30 40       	sbci	r19, 0x00	; 0
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	02 2e       	mov	r0, r18
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <DIO_u8SetPinValue+0x158>
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	0a 94       	dec	r0
    1cbc:	e2 f7       	brpl	.-8      	; 0x1cb6 <DIO_u8SetPinValue+0x154>
    1cbe:	80 95       	com	r24
    1cc0:	84 23       	and	r24, r20
    1cc2:	8c 93       	st	X, r24
    1cc4:	31 c0       	rjmp	.+98     	; 0x1d28 <DIO_u8SetPinValue+0x1c6>
				}
			}
			else
			{
				//port D
				if(Copy_u8Value==DIO_HIGH)
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	b9 f4       	brne	.+46     	; 0x1cfa <DIO_u8SetPinValue+0x198>
				{
					SET_BIT(VALUE_PORT3,(Copy_u8PinN-DIO_PIN_NO_24));
    1ccc:	a2 e3       	ldi	r26, 0x32	; 50
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e2 e3       	ldi	r30, 0x32	; 50
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	48 2f       	mov	r20, r24
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	9c 01       	movw	r18, r24
    1ce0:	28 51       	subi	r18, 0x18	; 24
    1ce2:	30 40       	sbci	r19, 0x00	; 0
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	02 2e       	mov	r0, r18
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <DIO_u8SetPinValue+0x18e>
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	0a 94       	dec	r0
    1cf2:	e2 f7       	brpl	.-8      	; 0x1cec <DIO_u8SetPinValue+0x18a>
    1cf4:	84 2b       	or	r24, r20
    1cf6:	8c 93       	st	X, r24
    1cf8:	17 c0       	rjmp	.+46     	; 0x1d28 <DIO_u8SetPinValue+0x1c6>

				}
				else
				{
					CLEAR_BIT(VALUE_PORT3,(Copy_u8PinN-DIO_PIN_NO_24));
    1cfa:	a2 e3       	ldi	r26, 0x32	; 50
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e2 e3       	ldi	r30, 0x32	; 50
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	48 2f       	mov	r20, r24
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9c 01       	movw	r18, r24
    1d0e:	28 51       	subi	r18, 0x18	; 24
    1d10:	30 40       	sbci	r19, 0x00	; 0
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	02 2e       	mov	r0, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <DIO_u8SetPinValue+0x1bc>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	0a 94       	dec	r0
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <DIO_u8SetPinValue+0x1b8>
    1d22:	80 95       	com	r24
    1d24:	84 23       	and	r24, r20
    1d26:	8c 93       	st	X, r24

				}
			}

			return NO_ERROR;
    1d28:	1b 82       	std	Y+3, r1	; 0x03
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <DIO_u8SetPinValue+0x1ce>
		}
		else
		{
			//incase an error occurred
			return ERROR;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	8b 83       	std	Y+3, r24	; 0x03
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
		}

}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <DIO_u8GetPortValue>:
/*Description: Get PORT Value
 * Input     :  Copy_u8PortNB (PORT Number),*Copy_u8Value (Pointer to send value to it)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8GetPortValue(uint8_t Copy_u8PortNB,uint8_t *Copy_u8Value)
{  // HANA
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <DIO_u8GetPortValue+0x6>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <DIO_u8GetPortValue+0x8>
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <DIO_u8GetPortValue+0xa>
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	7b 83       	std	Y+3, r23	; 0x03
    1d50:	6a 83       	std	Y+2, r22	; 0x02

	/* Implement Your Code */
	if ( (Copy_u8Value == NULL) ||	(Copy_u8PortNB > 3) ||	(Copy_u8PortNB < 0))
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	9b 81       	ldd	r25, Y+3	; 0x03
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	19 f0       	breq	.+6      	; 0x1d60 <DIO_u8GetPortValue+0x22>
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	84 30       	cpi	r24, 0x04	; 4
    1d5e:	18 f0       	brcs	.+6      	; 0x1d66 <DIO_u8GetPortValue+0x28>
	  {
	   return ERROR;
    1d60:	21 e0       	ldi	r18, 0x01	; 1
    1d62:	2e 83       	std	Y+6, r18	; 0x06
    1d64:	41 c0       	rjmp	.+130    	; 0x1de8 <DIO_u8GetPortValue+0xaa>
	  }
	  else
	  {
	    switch(Copy_u8PortNB)
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	3d 83       	std	Y+5, r19	; 0x05
    1d6e:	2c 83       	std	Y+4, r18	; 0x04
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	9d 81       	ldd	r25, Y+5	; 0x05
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	91 05       	cpc	r25, r1
    1d78:	e9 f0       	breq	.+58     	; 0x1db4 <DIO_u8GetPortValue+0x76>
    1d7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7e:	22 30       	cpi	r18, 0x02	; 2
    1d80:	31 05       	cpc	r19, r1
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <DIO_u8GetPortValue+0x50>
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	9d 81       	ldd	r25, Y+5	; 0x05
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	61 f0       	breq	.+24     	; 0x1da4 <DIO_u8GetPortValue+0x66>
    1d8c:	2b c0       	rjmp	.+86     	; 0x1de4 <DIO_u8GetPortValue+0xa6>
    1d8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d90:	3d 81       	ldd	r19, Y+5	; 0x05
    1d92:	22 30       	cpi	r18, 0x02	; 2
    1d94:	31 05       	cpc	r19, r1
    1d96:	b1 f0       	breq	.+44     	; 0x1dc4 <DIO_u8GetPortValue+0x86>
    1d98:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9c:	83 30       	cpi	r24, 0x03	; 3
    1d9e:	91 05       	cpc	r25, r1
    1da0:	c9 f0       	breq	.+50     	; 0x1dd4 <DIO_u8GetPortValue+0x96>
    1da2:	20 c0       	rjmp	.+64     	; 0x1de4 <DIO_u8GetPortValue+0xa6>
	    {
	     case DIOA:
		 {
			 *Copy_u8Value=READ_PORT0;   //*PORTA is assigned the number 0
    1da4:	e9 e3       	ldi	r30, 0x39	; 57
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dac:	fb 81       	ldd	r31, Y+3	; 0x03
    1dae:	80 83       	st	Z, r24
	          return NO_ERROR;
    1db0:	1e 82       	std	Y+6, r1	; 0x06
    1db2:	1a c0       	rjmp	.+52     	; 0x1de8 <DIO_u8GetPortValue+0xaa>
		 }
		 break;

	     case DIOB:
		 {
			 *Copy_u8Value=READ_PORT1;   //*PORTB is assigned the number 1
    1db4:	e6 e3       	ldi	r30, 0x36	; 54
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	ea 81       	ldd	r30, Y+2	; 0x02
    1dbc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dbe:	80 83       	st	Z, r24
			 return NO_ERROR;
    1dc0:	1e 82       	std	Y+6, r1	; 0x06
    1dc2:	12 c0       	rjmp	.+36     	; 0x1de8 <DIO_u8GetPortValue+0xaa>

		 }
		 break;

	     case DIOC:
		 {        *Copy_u8Value=READ_PORT2;   //*PORTC is assigned the number 2
    1dc4:	e3 e3       	ldi	r30, 0x33	; 51
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	ea 81       	ldd	r30, Y+2	; 0x02
    1dcc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dce:	80 83       	st	Z, r24
	              return NO_ERROR;
    1dd0:	1e 82       	std	Y+6, r1	; 0x06
    1dd2:	0a c0       	rjmp	.+20     	; 0x1de8 <DIO_u8GetPortValue+0xaa>
		 }
		 break;

	     case DIOD:
		 {
				*Copy_u8Value=READ_PORT3;   //*PORTD is assigned the number 3
    1dd4:	e0 e3       	ldi	r30, 0x30	; 48
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	ea 81       	ldd	r30, Y+2	; 0x02
    1ddc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dde:	80 83       	st	Z, r24
	              return NO_ERROR;
    1de0:	1e 82       	std	Y+6, r1	; 0x06
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_u8GetPortValue+0xaa>
		 }
		 break;
		 default:  return ERROR;  break;
    1de4:	91 e0       	ldi	r25, 0x01	; 1
    1de6:	9e 83       	std	Y+6, r25	; 0x06
    1de8:	8e 81       	ldd	r24, Y+6	; 0x06
	    }
	  }


}
    1dea:	26 96       	adiw	r28, 0x06	; 6
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <DIO_u8GetPinValue>:
/*Description: Get PIN Value (HIGH or LOW)
 * Input     : Copy_u8PinN (PIN Number) ,*Copy_u8Value (Pointer to send value to it)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8GetPinValue(uint8_t Copy_u8PinN,uint8_t *Copy_u8Value)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <DIO_u8GetPinValue+0x6>
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <DIO_u8GetPinValue+0x8>
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	7b 83       	std	Y+3, r23	; 0x03
    1e0c:	6a 83       	std	Y+2, r22	; 0x02
	// AHMED MOSTAFA



	/* Implement Your Code */
	if((Copy_u8PinN>= MINIMUM_PIN_NO) && (Copy_u8PinN< TOTAL_NO_OF_PINS)){
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	80 32       	cpi	r24, 0x20	; 32
    1e12:	08 f0       	brcs	.+2      	; 0x1e16 <DIO_u8GetPinValue+0x1a>
    1e14:	74 c0       	rjmp	.+232    	; 0x1efe <DIO_u8GetPinValue+0x102>
		//port A
		if((Copy_u8PinN>=DIO_PIN_NO_0) && (Copy_u8PinN<=DIO_PIN_NO_7)){
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	88 30       	cpi	r24, 0x08	; 8
    1e1a:	b8 f4       	brcc	.+46     	; 0x1e4a <DIO_u8GetPinValue+0x4e>

				*Copy_u8Value=GET_BIT(READ_PORT0,(Copy_u8PinN%8));
    1e1c:	e9 e3       	ldi	r30, 0x39	; 57
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	88 2f       	mov	r24, r24
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	87 70       	andi	r24, 0x07	; 7
    1e2e:	90 70       	andi	r25, 0x00	; 0
    1e30:	a9 01       	movw	r20, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <DIO_u8GetPinValue+0x3c>
    1e34:	55 95       	asr	r21
    1e36:	47 95       	ror	r20
    1e38:	8a 95       	dec	r24
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <DIO_u8GetPinValue+0x38>
    1e3c:	ca 01       	movw	r24, r20
    1e3e:	81 70       	andi	r24, 0x01	; 1
    1e40:	ea 81       	ldd	r30, Y+2	; 0x02
    1e42:	fb 81       	ldd	r31, Y+3	; 0x03
    1e44:	80 83       	st	Z, r24

			return  NO_ERROR;
    1e46:	1c 82       	std	Y+4, r1	; 0x04
    1e48:	5c c0       	rjmp	.+184    	; 0x1f02 <DIO_u8GetPinValue+0x106>
		}

		//port B
		else if((Copy_u8PinN>=DIO_PIN_NO_8) && (Copy_u8PinN<=DIO_PIN_NO_15)){
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	88 30       	cpi	r24, 0x08	; 8
    1e4e:	d0 f0       	brcs	.+52     	; 0x1e84 <DIO_u8GetPinValue+0x88>
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	80 31       	cpi	r24, 0x10	; 16
    1e54:	b8 f4       	brcc	.+46     	; 0x1e84 <DIO_u8GetPinValue+0x88>

			*Copy_u8Value=GET_BIT(READ_PORT1,(Copy_u8PinN%8));
    1e56:	e6 e3       	ldi	r30, 0x36	; 54
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	87 70       	andi	r24, 0x07	; 7
    1e68:	90 70       	andi	r25, 0x00	; 0
    1e6a:	a9 01       	movw	r20, r18
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <DIO_u8GetPinValue+0x76>
    1e6e:	55 95       	asr	r21
    1e70:	47 95       	ror	r20
    1e72:	8a 95       	dec	r24
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <DIO_u8GetPinValue+0x72>
    1e76:	ca 01       	movw	r24, r20
    1e78:	81 70       	andi	r24, 0x01	; 1
    1e7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e7e:	80 83       	st	Z, r24

			return  NO_ERROR;
    1e80:	1c 82       	std	Y+4, r1	; 0x04
    1e82:	3f c0       	rjmp	.+126    	; 0x1f02 <DIO_u8GetPinValue+0x106>
				}

		//port C
		else if((Copy_u8PinN>=DIO_PIN_NO_16) && (Copy_u8PinN<=DIO_PIN_NO_23)){
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	80 31       	cpi	r24, 0x10	; 16
    1e88:	d0 f0       	brcs	.+52     	; 0x1ebe <DIO_u8GetPinValue+0xc2>
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	88 31       	cpi	r24, 0x18	; 24
    1e8e:	b8 f4       	brcc	.+46     	; 0x1ebe <DIO_u8GetPinValue+0xc2>

			*Copy_u8Value=GET_BIT(READ_PORT2,(Copy_u8PinN%8));
    1e90:	e3 e3       	ldi	r30, 0x33	; 51
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	87 70       	andi	r24, 0x07	; 7
    1ea2:	90 70       	andi	r25, 0x00	; 0
    1ea4:	a9 01       	movw	r20, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <DIO_u8GetPinValue+0xb0>
    1ea8:	55 95       	asr	r21
    1eaa:	47 95       	ror	r20
    1eac:	8a 95       	dec	r24
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <DIO_u8GetPinValue+0xac>
    1eb0:	ca 01       	movw	r24, r20
    1eb2:	81 70       	andi	r24, 0x01	; 1
    1eb4:	ea 81       	ldd	r30, Y+2	; 0x02
    1eb6:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb8:	80 83       	st	Z, r24

			return  NO_ERROR;
    1eba:	1c 82       	std	Y+4, r1	; 0x04
    1ebc:	22 c0       	rjmp	.+68     	; 0x1f02 <DIO_u8GetPinValue+0x106>
			}

		//port D
		else if((Copy_u8PinN>=DIO_PIN_NO_24) && (Copy_u8PinN<=DIO_PIN_NO_31)){
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	88 31       	cpi	r24, 0x18	; 24
    1ec2:	d0 f0       	brcs	.+52     	; 0x1ef8 <DIO_u8GetPinValue+0xfc>
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	80 32       	cpi	r24, 0x20	; 32
    1ec8:	b8 f4       	brcc	.+46     	; 0x1ef8 <DIO_u8GetPinValue+0xfc>

			*Copy_u8Value=GET_BIT(READ_PORT3,(Copy_u8PinN%8));
    1eca:	e0 e3       	ldi	r30, 0x30	; 48
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	87 70       	andi	r24, 0x07	; 7
    1edc:	90 70       	andi	r25, 0x00	; 0
    1ede:	a9 01       	movw	r20, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <DIO_u8GetPinValue+0xea>
    1ee2:	55 95       	asr	r21
    1ee4:	47 95       	ror	r20
    1ee6:	8a 95       	dec	r24
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <DIO_u8GetPinValue+0xe6>
    1eea:	ca 01       	movw	r24, r20
    1eec:	81 70       	andi	r24, 0x01	; 1
    1eee:	ea 81       	ldd	r30, Y+2	; 0x02
    1ef0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ef2:	80 83       	st	Z, r24
			return  NO_ERROR;
    1ef4:	1c 82       	std	Y+4, r1	; 0x04
    1ef6:	05 c0       	rjmp	.+10     	; 0x1f02 <DIO_u8GetPinValue+0x106>
				}
		else{
			return ERROR;
    1ef8:	51 e0       	ldi	r21, 0x01	; 1
    1efa:	5c 83       	std	Y+4, r21	; 0x04
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <DIO_u8GetPinValue+0x106>
		}

	}
	else{

		return ERROR;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	8c 83       	std	Y+4, r24	; 0x04
    1f02:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <DIO_u8SetPortInputType>:
/*Description: Set PORT Type in case of INPUT Direction (PULL UP or FLOATING)
 * Input     :  Copy_u8PortNB (PORT Number),Copy_u8InputType(1 for PULL UP and 0 for FLOATING)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPortInputType(uint8_t Copy_u8PortNB,uint8_t Copy_u8InputType)
{  // AHMED MOSTAFA
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <DIO_u8SetPortInputType+0x6>
    1f18:	0f 92       	push	r0
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	if(Copy_u8PortNB==DIOA){
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	88 23       	and	r24, r24
    1f26:	79 f4       	brne	.+30     	; 0x1f46 <DIO_u8SetPortInputType+0x34>
		//PORT A
		if(Copy_u8InputType>=1){
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	88 23       	and	r24, r24
    1f2c:	49 f0       	breq	.+18     	; 0x1f40 <DIO_u8SetPortInputType+0x2e>

			DIRECTION_PORT0= DIO_INPUT;
    1f2e:	ea e3       	ldi	r30, 0x3A	; 58
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	10 82       	st	Z, r1
			VALUE_PORT0=Copy_u8InputType;
    1f34:	eb e3       	ldi	r30, 0x3B	; 59
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	80 83       	st	Z, r24
			return NO_ERROR;
    1f3c:	1b 82       	std	Y+3, r1	; 0x03
    1f3e:	3b c0       	rjmp	.+118    	; 0x1fb6 <DIO_u8SetPortInputType+0xa4>
		}
		else{
			return ERROR;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	8b 83       	std	Y+3, r24	; 0x03
    1f44:	38 c0       	rjmp	.+112    	; 0x1fb6 <DIO_u8SetPortInputType+0xa4>
		}}

	//PORT B
	else if(Copy_u8PortNB==DIOB){
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	79 f4       	brne	.+30     	; 0x1f6a <DIO_u8SetPortInputType+0x58>
		if(Copy_u8InputType>=1){
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	88 23       	and	r24, r24
    1f50:	49 f0       	breq	.+18     	; 0x1f64 <DIO_u8SetPortInputType+0x52>

			DIRECTION_PORT1= DIO_INPUT;
    1f52:	e7 e3       	ldi	r30, 0x37	; 55
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	10 82       	st	Z, r1
			VALUE_PORT1=Copy_u8InputType;
    1f58:	e8 e3       	ldi	r30, 0x38	; 56
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	80 83       	st	Z, r24
			return NO_ERROR;
    1f60:	1b 82       	std	Y+3, r1	; 0x03
    1f62:	29 c0       	rjmp	.+82     	; 0x1fb6 <DIO_u8SetPortInputType+0xa4>
			}
			else{
				return ERROR;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	8b 83       	std	Y+3, r24	; 0x03
    1f68:	26 c0       	rjmp	.+76     	; 0x1fb6 <DIO_u8SetPortInputType+0xa4>
				}}
	//PORT C
	else if(Copy_u8PortNB==DIOC){
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	82 30       	cpi	r24, 0x02	; 2
    1f6e:	79 f4       	brne	.+30     	; 0x1f8e <DIO_u8SetPortInputType+0x7c>
		if(Copy_u8InputType>=1){
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	88 23       	and	r24, r24
    1f74:	49 f0       	breq	.+18     	; 0x1f88 <DIO_u8SetPortInputType+0x76>

			DIRECTION_PORT2= DIO_INPUT;
    1f76:	e4 e3       	ldi	r30, 0x34	; 52
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	10 82       	st	Z, r1
			VALUE_PORT2=Copy_u8InputType;
    1f7c:	e5 e3       	ldi	r30, 0x35	; 53
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	80 83       	st	Z, r24
			return NO_ERROR;
    1f84:	1b 82       	std	Y+3, r1	; 0x03
    1f86:	17 c0       	rjmp	.+46     	; 0x1fb6 <DIO_u8SetPortInputType+0xa4>
			}
			else{
			return ERROR;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <DIO_u8SetPortInputType+0xa4>
				}}
	//PORT D
	else if(Copy_u8PortNB==DIOD){
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	83 30       	cpi	r24, 0x03	; 3
    1f92:	79 f4       	brne	.+30     	; 0x1fb2 <DIO_u8SetPortInputType+0xa0>
		if(Copy_u8InputType>=1){
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	88 23       	and	r24, r24
    1f98:	49 f0       	breq	.+18     	; 0x1fac <DIO_u8SetPortInputType+0x9a>

			DIRECTION_PORT3= DIO_INPUT;
    1f9a:	e1 e3       	ldi	r30, 0x31	; 49
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	10 82       	st	Z, r1
			VALUE_PORT3=Copy_u8InputType;
    1fa0:	e2 e3       	ldi	r30, 0x32	; 50
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	80 83       	st	Z, r24
			return NO_ERROR;
    1fa8:	1b 82       	std	Y+3, r1	; 0x03
    1faa:	05 c0       	rjmp	.+10     	; 0x1fb6 <DIO_u8SetPortInputType+0xa4>
				}
			else{
			return ERROR;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	8b 83       	std	Y+3, r24	; 0x03
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <DIO_u8SetPortInputType+0xa4>
				}

		}
	 else{
		return ERROR;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03

	}
}
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <DIO_u8SetPinInputType>:
/*Description: Set PORT Type in case of INPUT Direction (PULL UP or FLOATING)
 * Input     : Copy_u8PinN(PIN NO) ,Copy_u8InputType(1 for PULL UP and 0 for FLOATING)
 * Output    : Return Error Status (Error or NO Error)
 * */
uint8_t DIO_u8SetPinInputType(uint8_t Copy_u8PinN,uint8_t Copy_u8InputType)
{           // YASMEEN
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <DIO_u8SetPinInputType+0x6>
    1fca:	0f 92       	push	r0
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	6a 83       	std	Y+2, r22	; 0x02
	/* Implement Your Code */
	if(Copy_u8PinN <= MAX_PIN_NO)
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	80 32       	cpi	r24, 0x20	; 32
    1fd8:	08 f0       	brcs	.+2      	; 0x1fdc <DIO_u8SetPinInputType+0x18>
    1fda:	e4 c0       	rjmp	.+456    	; 0x21a4 <DIO_u8SetPinInputType+0x1e0>
		{
			if(Copy_u8PinN / 8 == 0)  // in PORTA
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	88 30       	cpi	r24, 0x08	; 8
    1fe0:	a0 f5       	brcc	.+104    	; 0x204a <DIO_u8SetPinInputType+0x86>
			{
				if( Copy_u8InputType == PULL_UP)
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	a9 f4       	brne	.+42     	; 0x2012 <DIO_u8SetPinInputType+0x4e>
				{
					SET_BIT(VALUE_PORT0,Copy_u8PinN);    //Enable PULL_UP
    1fe8:	ab e3       	ldi	r26, 0x3B	; 59
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	eb e3       	ldi	r30, 0x3B	; 59
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	48 2f       	mov	r20, r24
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	02 2e       	mov	r0, r18
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <DIO_u8SetPinInputType+0x42>
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	0a 94       	dec	r0
    2008:	e2 f7       	brpl	.-8      	; 0x2002 <DIO_u8SetPinInputType+0x3e>
    200a:	84 2b       	or	r24, r20
    200c:	8c 93       	st	X, r24
					return NO_ERROR;
    200e:	1b 82       	std	Y+3, r1	; 0x03
    2010:	cb c0       	rjmp	.+406    	; 0x21a8 <DIO_u8SetPinInputType+0x1e4>
				}
				else if( Copy_u8InputType == FLOATING)
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	88 23       	and	r24, r24
    2016:	b1 f4       	brne	.+44     	; 0x2044 <DIO_u8SetPinInputType+0x80>
				{
					CLEAR_BIT(VALUE_PORT0 ,Copy_u8PinN);     //Disable PULL_UP
    2018:	ab e3       	ldi	r26, 0x3B	; 59
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	eb e3       	ldi	r30, 0x3B	; 59
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	48 2f       	mov	r20, r24
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	02 2e       	mov	r0, r18
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <DIO_u8SetPinInputType+0x72>
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	0a 94       	dec	r0
    2038:	e2 f7       	brpl	.-8      	; 0x2032 <DIO_u8SetPinInputType+0x6e>
    203a:	80 95       	com	r24
    203c:	84 23       	and	r24, r20
    203e:	8c 93       	st	X, r24
					return NO_ERROR;
    2040:	1b 82       	std	Y+3, r1	; 0x03
    2042:	b2 c0       	rjmp	.+356    	; 0x21a8 <DIO_u8SetPinInputType+0x1e4>
				}
				else
				{
					return ERROR;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	8b 83       	std	Y+3, r24	; 0x03
    2048:	af c0       	rjmp	.+350    	; 0x21a8 <DIO_u8SetPinInputType+0x1e4>
				}
			}
			else if(Copy_u8PinN / 8 == 1)  // PORTB
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	88 50       	subi	r24, 0x08	; 8
    204e:	88 30       	cpi	r24, 0x08	; 8
    2050:	b8 f5       	brcc	.+110    	; 0x20c0 <DIO_u8SetPinInputType+0xfc>
			{
			     Copy_u8PinN-=8;
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	88 50       	subi	r24, 0x08	; 8
    2056:	89 83       	std	Y+1, r24	; 0x01
				if( Copy_u8InputType == PULL_UP)
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	81 30       	cpi	r24, 0x01	; 1
    205c:	a9 f4       	brne	.+42     	; 0x2088 <DIO_u8SetPinInputType+0xc4>
				{
					SET_BIT(VALUE_PORT1,Copy_u8PinN);		//Enable PULL_UP
    205e:	a8 e3       	ldi	r26, 0x38	; 56
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e8 e3       	ldi	r30, 0x38	; 56
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	48 2f       	mov	r20, r24
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	02 2e       	mov	r0, r18
    2076:	02 c0       	rjmp	.+4      	; 0x207c <DIO_u8SetPinInputType+0xb8>
    2078:	88 0f       	add	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	0a 94       	dec	r0
    207e:	e2 f7       	brpl	.-8      	; 0x2078 <DIO_u8SetPinInputType+0xb4>
    2080:	84 2b       	or	r24, r20
    2082:	8c 93       	st	X, r24
					return NO_ERROR;
    2084:	1b 82       	std	Y+3, r1	; 0x03
    2086:	90 c0       	rjmp	.+288    	; 0x21a8 <DIO_u8SetPinInputType+0x1e4>
				}
				else if( Copy_u8InputType == FLOATING)
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	88 23       	and	r24, r24
    208c:	b1 f4       	brne	.+44     	; 0x20ba <DIO_u8SetPinInputType+0xf6>
				{
					CLEAR_BIT(VALUE_PORT1 ,Copy_u8PinN);		//Disable PULL_UP
    208e:	a8 e3       	ldi	r26, 0x38	; 56
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e8 e3       	ldi	r30, 0x38	; 56
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	48 2f       	mov	r20, r24
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	28 2f       	mov	r18, r24
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	02 2e       	mov	r0, r18
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <DIO_u8SetPinInputType+0xe8>
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	0a 94       	dec	r0
    20ae:	e2 f7       	brpl	.-8      	; 0x20a8 <DIO_u8SetPinInputType+0xe4>
    20b0:	80 95       	com	r24
    20b2:	84 23       	and	r24, r20
    20b4:	8c 93       	st	X, r24
					return NO_ERROR;
    20b6:	1b 82       	std	Y+3, r1	; 0x03
    20b8:	77 c0       	rjmp	.+238    	; 0x21a8 <DIO_u8SetPinInputType+0x1e4>
				}
				else
				{
					return ERROR;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	8b 83       	std	Y+3, r24	; 0x03
    20be:	74 c0       	rjmp	.+232    	; 0x21a8 <DIO_u8SetPinInputType+0x1e4>
				}
			}
			else if(Copy_u8PinN / 8 == 2)  // PORTC
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	80 51       	subi	r24, 0x10	; 16
    20c4:	88 30       	cpi	r24, 0x08	; 8
    20c6:	b8 f5       	brcc	.+110    	; 0x2136 <DIO_u8SetPinInputType+0x172>
			{
			     Copy_u8PinN -=16;
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	80 51       	subi	r24, 0x10	; 16
    20cc:	89 83       	std	Y+1, r24	; 0x01
				if( Copy_u8InputType == PULL_UP)
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	81 30       	cpi	r24, 0x01	; 1
    20d2:	a9 f4       	brne	.+42     	; 0x20fe <DIO_u8SetPinInputType+0x13a>
				{
					SET_BIT(VALUE_PORT2,Copy_u8PinN);		//Enable PULL_UP
    20d4:	a5 e3       	ldi	r26, 0x35	; 53
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e5 e3       	ldi	r30, 0x35	; 53
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	48 2f       	mov	r20, r24
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	02 2e       	mov	r0, r18
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <DIO_u8SetPinInputType+0x12e>
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	0a 94       	dec	r0
    20f4:	e2 f7       	brpl	.-8      	; 0x20ee <DIO_u8SetPinInputType+0x12a>
    20f6:	84 2b       	or	r24, r20
    20f8:	8c 93       	st	X, r24
					return NO_ERROR;
    20fa:	1b 82       	std	Y+3, r1	; 0x03
    20fc:	55 c0       	rjmp	.+170    	; 0x21a8 <DIO_u8SetPinInputType+0x1e4>
				}
				else if( Copy_u8InputType == FLOATING)
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	88 23       	and	r24, r24
    2102:	b1 f4       	brne	.+44     	; 0x2130 <DIO_u8SetPinInputType+0x16c>
				{
					CLEAR_BIT(VALUE_PORT2 ,Copy_u8PinN);		//Disable PULL_UP
    2104:	a5 e3       	ldi	r26, 0x35	; 53
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e5 e3       	ldi	r30, 0x35	; 53
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	48 2f       	mov	r20, r24
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	02 2e       	mov	r0, r18
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <DIO_u8SetPinInputType+0x15e>
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	0a 94       	dec	r0
    2124:	e2 f7       	brpl	.-8      	; 0x211e <DIO_u8SetPinInputType+0x15a>
    2126:	80 95       	com	r24
    2128:	84 23       	and	r24, r20
    212a:	8c 93       	st	X, r24
					return NO_ERROR;
    212c:	1b 82       	std	Y+3, r1	; 0x03
    212e:	3c c0       	rjmp	.+120    	; 0x21a8 <DIO_u8SetPinInputType+0x1e4>
				}
				else
				{
					return ERROR;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	8b 83       	std	Y+3, r24	; 0x03
    2134:	39 c0       	rjmp	.+114    	; 0x21a8 <DIO_u8SetPinInputType+0x1e4>
				}
			}
			else  // PORTD
			{
				Copy_u8PinN -=24;
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	88 51       	subi	r24, 0x18	; 24
    213a:	89 83       	std	Y+1, r24	; 0x01
				if( Copy_u8InputType == PULL_UP)
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	a9 f4       	brne	.+42     	; 0x216c <DIO_u8SetPinInputType+0x1a8>
				{
					SET_BIT(VALUE_PORT3,Copy_u8PinN);      //Enable PULL_UP
    2142:	a2 e3       	ldi	r26, 0x32	; 50
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e2 e3       	ldi	r30, 0x32	; 50
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	48 2f       	mov	r20, r24
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	28 2f       	mov	r18, r24
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	02 2e       	mov	r0, r18
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <DIO_u8SetPinInputType+0x19c>
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	0a 94       	dec	r0
    2162:	e2 f7       	brpl	.-8      	; 0x215c <DIO_u8SetPinInputType+0x198>
    2164:	84 2b       	or	r24, r20
    2166:	8c 93       	st	X, r24
					return NO_ERROR;
    2168:	1b 82       	std	Y+3, r1	; 0x03
    216a:	1e c0       	rjmp	.+60     	; 0x21a8 <DIO_u8SetPinInputType+0x1e4>
				}
				else if( Copy_u8InputType == FLOATING)
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	88 23       	and	r24, r24
    2170:	b1 f4       	brne	.+44     	; 0x219e <DIO_u8SetPinInputType+0x1da>
				{
					CLEAR_BIT(VALUE_PORT3 ,Copy_u8PinN);   //Disable PULL_UP
    2172:	a2 e3       	ldi	r26, 0x32	; 50
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e2 e3       	ldi	r30, 0x32	; 50
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	48 2f       	mov	r20, r24
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	02 2e       	mov	r0, r18
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <DIO_u8SetPinInputType+0x1cc>
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	0a 94       	dec	r0
    2192:	e2 f7       	brpl	.-8      	; 0x218c <DIO_u8SetPinInputType+0x1c8>
    2194:	80 95       	com	r24
    2196:	84 23       	and	r24, r20
    2198:	8c 93       	st	X, r24
					return NO_ERROR;
    219a:	1b 82       	std	Y+3, r1	; 0x03
    219c:	05 c0       	rjmp	.+10     	; 0x21a8 <DIO_u8SetPinInputType+0x1e4>
				}
				else
				{
					return ERROR;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	8b 83       	std	Y+3, r24	; 0x03
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <DIO_u8SetPinInputType+0x1e4>
			}

		}
		else
		{
			return ERROR;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	8b 83       	std	Y+3, r24	; 0x03
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
		}
}
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <__vector_1>:
uint8_t SpeedIndex=5; /*that represnt index of 50 */


/* Interrupt0 ISR */
ISR(INT0_vect)
{
    21b6:	1f 92       	push	r1
    21b8:	0f 92       	push	r0
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	0f 92       	push	r0
    21be:	11 24       	eor	r1, r1
    21c0:	2f 93       	push	r18
    21c2:	3f 93       	push	r19
    21c4:	4f 93       	push	r20
    21c6:	5f 93       	push	r21
    21c8:	6f 93       	push	r22
    21ca:	7f 93       	push	r23
    21cc:	8f 93       	push	r24
    21ce:	9f 93       	push	r25
    21d0:	af 93       	push	r26
    21d2:	bf 93       	push	r27
    21d4:	ef 93       	push	r30
    21d6:	ff 93       	push	r31
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	2e 97       	sbiw	r28, 0x0e	; 14
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	a8 e4       	ldi	r26, 0x48	; 72
    21ec:	b3 e4       	ldi	r27, 0x43	; 67
    21ee:	8b 87       	std	Y+11, r24	; 0x0b
    21f0:	9c 87       	std	Y+12, r25	; 0x0c
    21f2:	ad 87       	std	Y+13, r26	; 0x0d
    21f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	4a e7       	ldi	r20, 0x7A	; 122
    2204:	53 e4       	ldi	r21, 0x43	; 67
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	8f 83       	std	Y+7, r24	; 0x07
    2210:	98 87       	std	Y+8, r25	; 0x08
    2212:	a9 87       	std	Y+9, r26	; 0x09
    2214:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    222a:	88 23       	and	r24, r24
    222c:	2c f4       	brge	.+10     	; 0x2238 <__vector_1+0x82>
		__ticks = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9e 83       	std	Y+6, r25	; 0x06
    2234:	8d 83       	std	Y+5, r24	; 0x05
    2236:	3f c0       	rjmp	.+126    	; 0x22b6 <__vector_1+0x100>
	else if (__tmp > 65535)
    2238:	6f 81       	ldd	r22, Y+7	; 0x07
    223a:	78 85       	ldd	r23, Y+8	; 0x08
    223c:	89 85       	ldd	r24, Y+9	; 0x09
    223e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	3f ef       	ldi	r19, 0xFF	; 255
    2244:	4f e7       	ldi	r20, 0x7F	; 127
    2246:	57 e4       	ldi	r21, 0x47	; 71
    2248:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    224c:	18 16       	cp	r1, r24
    224e:	4c f5       	brge	.+82     	; 0x22a2 <__vector_1+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2250:	6b 85       	ldd	r22, Y+11	; 0x0b
    2252:	7c 85       	ldd	r23, Y+12	; 0x0c
    2254:	8d 85       	ldd	r24, Y+13	; 0x0d
    2256:	9e 85       	ldd	r25, Y+14	; 0x0e
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e2       	ldi	r20, 0x20	; 32
    225e:	51 e4       	ldi	r21, 0x41	; 65
    2260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	9e 83       	std	Y+6, r25	; 0x06
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	0f c0       	rjmp	.+30     	; 0x2298 <__vector_1+0xe2>
    227a:	89 e1       	ldi	r24, 0x19	; 25
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	9c 83       	std	Y+4, r25	; 0x04
    2280:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	9c 81       	ldd	r25, Y+4	; 0x04
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <__vector_1+0xd0>
    228a:	9c 83       	std	Y+4, r25	; 0x04
    228c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	9e 83       	std	Y+6, r25	; 0x06
    2296:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2298:	8d 81       	ldd	r24, Y+5	; 0x05
    229a:	9e 81       	ldd	r25, Y+6	; 0x06
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	69 f7       	brne	.-38     	; 0x227a <__vector_1+0xc4>
    22a0:	14 c0       	rjmp	.+40     	; 0x22ca <__vector_1+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a2:	6f 81       	ldd	r22, Y+7	; 0x07
    22a4:	78 85       	ldd	r23, Y+8	; 0x08
    22a6:	89 85       	ldd	r24, Y+9	; 0x09
    22a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	9e 83       	std	Y+6, r25	; 0x06
    22b4:	8d 83       	std	Y+5, r24	; 0x05
    22b6:	8d 81       	ldd	r24, Y+5	; 0x05
    22b8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ba:	9a 83       	std	Y+2, r25	; 0x02
    22bc:	89 83       	std	Y+1, r24	; 0x01
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	9a 81       	ldd	r25, Y+2	; 0x02
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <__vector_1+0x10c>
    22c6:	9a 83       	std	Y+2, r25	; 0x02
    22c8:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(200);

/* Increase speed */
 if(SpeedIndex<10)
    22ca:	80 91 68 00 	lds	r24, 0x0068
    22ce:	8a 30       	cpi	r24, 0x0A	; 10
    22d0:	30 f4       	brcc	.+12     	; 0x22de <__vector_1+0x128>
   {
    SpeedIndex++;
    22d2:	80 91 68 00 	lds	r24, 0x0068
    22d6:	8f 5f       	subi	r24, 0xFF	; 255
    22d8:	80 93 68 00 	sts	0x0068, r24
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <__vector_1+0x12e>
   }
 else
   {
    SpeedIndex=10;
    22de:	8a e0       	ldi	r24, 0x0A	; 10
    22e0:	80 93 68 00 	sts	0x0068, r24
   }
  UART_sendByte(Speed_Array[SpeedIndex]);
    22e4:	80 91 68 00 	lds	r24, 0x0068
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	fc 01       	movw	r30, r24
    22ee:	e7 59       	subi	r30, 0x97	; 151
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 81       	ld	r24, Z
    22f4:	0e 94 9a 06 	call	0xd34	; 0xd34 <UART_sendByte>
}
    22f8:	2e 96       	adiw	r28, 0x0e	; 14
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	cd bf       	out	0x3d, r28	; 61
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	ff 91       	pop	r31
    2304:	ef 91       	pop	r30
    2306:	bf 91       	pop	r27
    2308:	af 91       	pop	r26
    230a:	9f 91       	pop	r25
    230c:	8f 91       	pop	r24
    230e:	7f 91       	pop	r23
    2310:	6f 91       	pop	r22
    2312:	5f 91       	pop	r21
    2314:	4f 91       	pop	r20
    2316:	3f 91       	pop	r19
    2318:	2f 91       	pop	r18
    231a:	0f 90       	pop	r0
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	0f 90       	pop	r0
    2320:	1f 90       	pop	r1
    2322:	18 95       	reti

00002324 <__vector_2>:

/* Interrupt1 ISR */
ISR(INT1_vect){
    2324:	1f 92       	push	r1
    2326:	0f 92       	push	r0
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	0f 92       	push	r0
    232c:	11 24       	eor	r1, r1
    232e:	2f 93       	push	r18
    2330:	3f 93       	push	r19
    2332:	4f 93       	push	r20
    2334:	5f 93       	push	r21
    2336:	6f 93       	push	r22
    2338:	7f 93       	push	r23
    233a:	8f 93       	push	r24
    233c:	9f 93       	push	r25
    233e:	af 93       	push	r26
    2340:	bf 93       	push	r27
    2342:	ef 93       	push	r30
    2344:	ff 93       	push	r31
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	2e 97       	sbiw	r28, 0x0e	; 14
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a8 e4       	ldi	r26, 0x48	; 72
    235a:	b3 e4       	ldi	r27, 0x43	; 67
    235c:	8b 87       	std	Y+11, r24	; 0x0b
    235e:	9c 87       	std	Y+12, r25	; 0x0c
    2360:	ad 87       	std	Y+13, r26	; 0x0d
    2362:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2364:	6b 85       	ldd	r22, Y+11	; 0x0b
    2366:	7c 85       	ldd	r23, Y+12	; 0x0c
    2368:	8d 85       	ldd	r24, Y+13	; 0x0d
    236a:	9e 85       	ldd	r25, Y+14	; 0x0e
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	4a e7       	ldi	r20, 0x7A	; 122
    2372:	53 e4       	ldi	r21, 0x43	; 67
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	8f 83       	std	Y+7, r24	; 0x07
    237e:	98 87       	std	Y+8, r25	; 0x08
    2380:	a9 87       	std	Y+9, r26	; 0x09
    2382:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2384:	6f 81       	ldd	r22, Y+7	; 0x07
    2386:	78 85       	ldd	r23, Y+8	; 0x08
    2388:	89 85       	ldd	r24, Y+9	; 0x09
    238a:	9a 85       	ldd	r25, Y+10	; 0x0a
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e8       	ldi	r20, 0x80	; 128
    2392:	5f e3       	ldi	r21, 0x3F	; 63
    2394:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2398:	88 23       	and	r24, r24
    239a:	2c f4       	brge	.+10     	; 0x23a6 <__vector_2+0x82>
		__ticks = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    23a4:	3f c0       	rjmp	.+126    	; 0x2424 <__vector_2+0x100>
	else if (__tmp > 65535)
    23a6:	6f 81       	ldd	r22, Y+7	; 0x07
    23a8:	78 85       	ldd	r23, Y+8	; 0x08
    23aa:	89 85       	ldd	r24, Y+9	; 0x09
    23ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	3f ef       	ldi	r19, 0xFF	; 255
    23b2:	4f e7       	ldi	r20, 0x7F	; 127
    23b4:	57 e4       	ldi	r21, 0x47	; 71
    23b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ba:	18 16       	cp	r1, r24
    23bc:	4c f5       	brge	.+82     	; 0x2410 <__vector_2+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23be:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9e 83       	std	Y+6, r25	; 0x06
    23e4:	8d 83       	std	Y+5, r24	; 0x05
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <__vector_2+0xe2>
    23e8:	89 e1       	ldi	r24, 0x19	; 25
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	9c 83       	std	Y+4, r25	; 0x04
    23ee:	8b 83       	std	Y+3, r24	; 0x03
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	9c 81       	ldd	r25, Y+4	; 0x04
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <__vector_2+0xd0>
    23f8:	9c 83       	std	Y+4, r25	; 0x04
    23fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	69 f7       	brne	.-38     	; 0x23e8 <__vector_2+0xc4>
    240e:	14 c0       	rjmp	.+40     	; 0x2438 <__vector_2+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	6f 81       	ldd	r22, Y+7	; 0x07
    2412:	78 85       	ldd	r23, Y+8	; 0x08
    2414:	89 85       	ldd	r24, Y+9	; 0x09
    2416:	9a 85       	ldd	r25, Y+10	; 0x0a
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	9e 81       	ldd	r25, Y+6	; 0x06
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	9a 81       	ldd	r25, Y+2	; 0x02
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <__vector_2+0x10c>
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(200);
/* we have to check on SpeedIndex to prevent segmentation error */
 if(SpeedIndex>0)
    2438:	80 91 68 00 	lds	r24, 0x0068
    243c:	88 23       	and	r24, r24
    243e:	31 f0       	breq	.+12     	; 0x244c <__vector_2+0x128>
   {
    SpeedIndex--;
    2440:	80 91 68 00 	lds	r24, 0x0068
    2444:	81 50       	subi	r24, 0x01	; 1
    2446:	80 93 68 00 	sts	0x0068, r24
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <__vector_2+0x12c>
   }
   else
  {
   SpeedIndex=0;
    244c:	10 92 68 00 	sts	0x0068, r1
  }

/* then send  Speed_Array[SpeedIndex] to the uart */
 UART_sendByte(Speed_Array[SpeedIndex]);
    2450:	80 91 68 00 	lds	r24, 0x0068
    2454:	88 2f       	mov	r24, r24
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	fc 01       	movw	r30, r24
    245a:	e7 59       	subi	r30, 0x97	; 151
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 81       	ld	r24, Z
    2460:	0e 94 9a 06 	call	0xd34	; 0xd34 <UART_sendByte>

}
    2464:	2e 96       	adiw	r28, 0x0e	; 14
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	ff 91       	pop	r31
    2470:	ef 91       	pop	r30
    2472:	bf 91       	pop	r27
    2474:	af 91       	pop	r26
    2476:	9f 91       	pop	r25
    2478:	8f 91       	pop	r24
    247a:	7f 91       	pop	r23
    247c:	6f 91       	pop	r22
    247e:	5f 91       	pop	r21
    2480:	4f 91       	pop	r20
    2482:	3f 91       	pop	r19
    2484:	2f 91       	pop	r18
    2486:	0f 90       	pop	r0
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	0f 90       	pop	r0
    248c:	1f 90       	pop	r1
    248e:	18 95       	reti

00002490 <main>:


int main()
{
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	62 97       	sbiw	r28, 0x12	; 18
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61

/* UART Initialization */
str_UartConfg_t *UART1,uart1;
UART1=&uart1;
    24a4:	ce 01       	movw	r24, r28
    24a6:	07 96       	adiw	r24, 0x07	; 7
    24a8:	9e 83       	std	Y+6, r25	; 0x06
    24aa:	8d 83       	std	Y+5, r24	; 0x05
UART1->u32_BaudRate=9600;
    24ac:	ed 81       	ldd	r30, Y+5	; 0x05
    24ae:	fe 81       	ldd	r31, Y+6	; 0x06
    24b0:	80 e8       	ldi	r24, 0x80	; 128
    24b2:	95 e2       	ldi	r25, 0x25	; 37
    24b4:	a0 e0       	ldi	r26, 0x00	; 0
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	80 83       	st	Z, r24
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	a2 83       	std	Z+2, r26	; 0x02
    24be:	b3 83       	std	Z+3, r27	; 0x03
UART1->u8_DataBits  =UART_8_BIT_MODE;
    24c0:	ed 81       	ldd	r30, Y+5	; 0x05
    24c2:	fe 81       	ldd	r31, Y+6	; 0x06
    24c4:	83 e0       	ldi	r24, 0x03	; 3
    24c6:	84 83       	std	Z+4, r24	; 0x04
UART1->u8_FlagAction=UART_POLLING;
    24c8:	ed 81       	ldd	r30, Y+5	; 0x05
    24ca:	fe 81       	ldd	r31, Y+6	; 0x06
    24cc:	15 82       	std	Z+5, r1	; 0x05
UART_init(UART1);
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>


/* Initialize Increase Speed Button */
Switch_t Switch1,*pswitch1;
pswitch1=&Switch1;
    24d6:	ce 01       	movw	r24, r28
    24d8:	0d 96       	adiw	r24, 0x0d	; 13
    24da:	9c 83       	std	Y+4, r25	; 0x04
    24dc:	8b 83       	std	Y+3, r24	; 0x03
pswitch1->PIN=26;
    24de:	eb 81       	ldd	r30, Y+3	; 0x03
    24e0:	fc 81       	ldd	r31, Y+4	; 0x04
    24e2:	8a e1       	ldi	r24, 0x1A	; 26
    24e4:	80 83       	st	Z, r24
pswitch1->Mode=INT0_MODE;
    24e6:	eb 81       	ldd	r30, Y+3	; 0x03
    24e8:	fc 81       	ldd	r31, Y+4	; 0x04
    24ea:	12 82       	std	Z+2, r1	; 0x02
pswitch1->Status=PULL_UP;
    24ec:	eb 81       	ldd	r30, Y+3	; 0x03
    24ee:	fc 81       	ldd	r31, Y+4	; 0x04
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	81 83       	std	Z+1, r24	; 0x01
SwitchInit(pswitch1);
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	9c 81       	ldd	r25, Y+4	; 0x04
    24f8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <SwitchInit>

/* Initialize Decrease Speed Button  */
Switch_t Switch2,*pswitch2;
pswitch2=&Switch2;
    24fc:	ce 01       	movw	r24, r28
    24fe:	40 96       	adiw	r24, 0x10	; 16
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	89 83       	std	Y+1, r24	; 0x01
pswitch2->PIN=27;
    2504:	e9 81       	ldd	r30, Y+1	; 0x01
    2506:	fa 81       	ldd	r31, Y+2	; 0x02
    2508:	8b e1       	ldi	r24, 0x1B	; 27
    250a:	80 83       	st	Z, r24
pswitch2->Mode=INT1_MODE;
    250c:	e9 81       	ldd	r30, Y+1	; 0x01
    250e:	fa 81       	ldd	r31, Y+2	; 0x02
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	82 83       	std	Z+2, r24	; 0x02
pswitch2->Status=PULL_UP;
    2514:	e9 81       	ldd	r30, Y+1	; 0x01
    2516:	fa 81       	ldd	r31, Y+2	; 0x02
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	81 83       	std	Z+1, r24	; 0x01
SwitchInit(pswitch2);
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	0e 94 4b 0b 	call	0x1696	; 0x1696 <SwitchInit>

/* Enable Global Interrupt */
sei();
    2524:	78 94       	sei
    2526:	ff cf       	rjmp	.-2      	; 0x2526 <main+0x96>

00002528 <__udivmodsi4>:
    2528:	a1 e2       	ldi	r26, 0x21	; 33
    252a:	1a 2e       	mov	r1, r26
    252c:	aa 1b       	sub	r26, r26
    252e:	bb 1b       	sub	r27, r27
    2530:	fd 01       	movw	r30, r26
    2532:	0d c0       	rjmp	.+26     	; 0x254e <__udivmodsi4_ep>

00002534 <__udivmodsi4_loop>:
    2534:	aa 1f       	adc	r26, r26
    2536:	bb 1f       	adc	r27, r27
    2538:	ee 1f       	adc	r30, r30
    253a:	ff 1f       	adc	r31, r31
    253c:	a2 17       	cp	r26, r18
    253e:	b3 07       	cpc	r27, r19
    2540:	e4 07       	cpc	r30, r20
    2542:	f5 07       	cpc	r31, r21
    2544:	20 f0       	brcs	.+8      	; 0x254e <__udivmodsi4_ep>
    2546:	a2 1b       	sub	r26, r18
    2548:	b3 0b       	sbc	r27, r19
    254a:	e4 0b       	sbc	r30, r20
    254c:	f5 0b       	sbc	r31, r21

0000254e <__udivmodsi4_ep>:
    254e:	66 1f       	adc	r22, r22
    2550:	77 1f       	adc	r23, r23
    2552:	88 1f       	adc	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	1a 94       	dec	r1
    2558:	69 f7       	brne	.-38     	; 0x2534 <__udivmodsi4_loop>
    255a:	60 95       	com	r22
    255c:	70 95       	com	r23
    255e:	80 95       	com	r24
    2560:	90 95       	com	r25
    2562:	9b 01       	movw	r18, r22
    2564:	ac 01       	movw	r20, r24
    2566:	bd 01       	movw	r22, r26
    2568:	cf 01       	movw	r24, r30
    256a:	08 95       	ret

0000256c <__divmodsi4>:
    256c:	97 fb       	bst	r25, 7
    256e:	09 2e       	mov	r0, r25
    2570:	05 26       	eor	r0, r21
    2572:	0e d0       	rcall	.+28     	; 0x2590 <__divmodsi4_neg1>
    2574:	57 fd       	sbrc	r21, 7
    2576:	04 d0       	rcall	.+8      	; 0x2580 <__divmodsi4_neg2>
    2578:	d7 df       	rcall	.-82     	; 0x2528 <__udivmodsi4>
    257a:	0a d0       	rcall	.+20     	; 0x2590 <__divmodsi4_neg1>
    257c:	00 1c       	adc	r0, r0
    257e:	38 f4       	brcc	.+14     	; 0x258e <__divmodsi4_exit>

00002580 <__divmodsi4_neg2>:
    2580:	50 95       	com	r21
    2582:	40 95       	com	r20
    2584:	30 95       	com	r19
    2586:	21 95       	neg	r18
    2588:	3f 4f       	sbci	r19, 0xFF	; 255
    258a:	4f 4f       	sbci	r20, 0xFF	; 255
    258c:	5f 4f       	sbci	r21, 0xFF	; 255

0000258e <__divmodsi4_exit>:
    258e:	08 95       	ret

00002590 <__divmodsi4_neg1>:
    2590:	f6 f7       	brtc	.-4      	; 0x258e <__divmodsi4_exit>
    2592:	90 95       	com	r25
    2594:	80 95       	com	r24
    2596:	70 95       	com	r23
    2598:	61 95       	neg	r22
    259a:	7f 4f       	sbci	r23, 0xFF	; 255
    259c:	8f 4f       	sbci	r24, 0xFF	; 255
    259e:	9f 4f       	sbci	r25, 0xFF	; 255
    25a0:	08 95       	ret

000025a2 <__prologue_saves__>:
    25a2:	2f 92       	push	r2
    25a4:	3f 92       	push	r3
    25a6:	4f 92       	push	r4
    25a8:	5f 92       	push	r5
    25aa:	6f 92       	push	r6
    25ac:	7f 92       	push	r7
    25ae:	8f 92       	push	r8
    25b0:	9f 92       	push	r9
    25b2:	af 92       	push	r10
    25b4:	bf 92       	push	r11
    25b6:	cf 92       	push	r12
    25b8:	df 92       	push	r13
    25ba:	ef 92       	push	r14
    25bc:	ff 92       	push	r15
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	ca 1b       	sub	r28, r26
    25cc:	db 0b       	sbc	r29, r27
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	09 94       	ijmp

000025da <__epilogue_restores__>:
    25da:	2a 88       	ldd	r2, Y+18	; 0x12
    25dc:	39 88       	ldd	r3, Y+17	; 0x11
    25de:	48 88       	ldd	r4, Y+16	; 0x10
    25e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    25e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    25e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    25e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    25e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    25ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    25ec:	b9 84       	ldd	r11, Y+9	; 0x09
    25ee:	c8 84       	ldd	r12, Y+8	; 0x08
    25f0:	df 80       	ldd	r13, Y+7	; 0x07
    25f2:	ee 80       	ldd	r14, Y+6	; 0x06
    25f4:	fd 80       	ldd	r15, Y+5	; 0x05
    25f6:	0c 81       	ldd	r16, Y+4	; 0x04
    25f8:	1b 81       	ldd	r17, Y+3	; 0x03
    25fa:	aa 81       	ldd	r26, Y+2	; 0x02
    25fc:	b9 81       	ldd	r27, Y+1	; 0x01
    25fe:	ce 0f       	add	r28, r30
    2600:	d1 1d       	adc	r29, r1
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	ed 01       	movw	r28, r26
    260e:	08 95       	ret

00002610 <_exit>:
    2610:	f8 94       	cli

00002612 <__stop_program>:
    2612:	ff cf       	rjmp	.-2      	; 0x2612 <__stop_program>
